#pragma version 10

smart_contracts.open_ballot.contract.OpenBallot.approval_program:
    intcblock 0 1 2 116
    bytecblock "vote_choice" "total_accounts_opted_in" "poll_finalized" "choice1_total" "choice2_total" "choice3_total" "total_votes" "vote_status" "poll_start_date_unix" "poll_end_date_unix"
    callsub __puya_arc4_router__
    return


// smart_contracts.open_ballot.contract.OpenBallot.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/open_ballot/contract.py:18
    // class OpenBallot(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___after_if_else@11
    pushbytess 0x5be219f0 0x5bbf7c36 0xb3fb275b 0x05a3bf14 0x4abfcdf3 0x5ff16da4 // method "generate()void", method "local_storage(account)void", method "opt_out(account)void", method "set_poll(byte[],byte[],byte[],byte[],string,uint64,string,uint64)void", method "submit_vote(account,uint64)void", method "terminate()void"
    txna ApplicationArgs 0
    match __puya_arc4_router___generate_route@2 __puya_arc4_router___local_storage_route@3 __puya_arc4_router___opt_out_route@4 __puya_arc4_router___set_poll_route@5 __puya_arc4_router___submit_vote_route@6 __puya_arc4_router___terminate_route@7
    intc_0 // 0
    retsub

__puya_arc4_router___generate_route@2:
    // smart_contracts/open_ballot/contract.py:65-66
    // # Define arc4.abimethod that generates the smart contract client
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    callsub generate
    intc_1 // 1
    retsub

__puya_arc4_router___local_storage_route@3:
    // smart_contracts/open_ballot/contract.py:100-101
    // # Define arc4.abimethod that allows any eligible account to opt in to the smart contract's local storage
    // @arc4.abimethod(allow_actions=["OptIn"])
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/open_ballot/contract.py:18
    // class OpenBallot(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/open_ballot/contract.py:100-101
    // # Define arc4.abimethod that allows any eligible account to opt in to the smart contract's local storage
    // @arc4.abimethod(allow_actions=["OptIn"])
    callsub local_storage
    intc_1 // 1
    retsub

__puya_arc4_router___opt_out_route@4:
    // smart_contracts/open_ballot/contract.py:125-126
    // # Define arc4.abimethod that allows any eligible account to opt out of the smart contract's local storage
    // @arc4.abimethod(allow_actions=["CloseOut"])
    txn OnCompletion
    intc_2 // CloseOut
    ==
    assert // OnCompletion is not CloseOut
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/open_ballot/contract.py:18
    // class OpenBallot(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/open_ballot/contract.py:125-126
    // # Define arc4.abimethod that allows any eligible account to opt out of the smart contract's local storage
    // @arc4.abimethod(allow_actions=["CloseOut"])
    callsub opt_out
    intc_1 // 1
    retsub

__puya_arc4_router___set_poll_route@5:
    // smart_contracts/open_ballot/contract.py:143-144
    // # Define arc4.abimethod that allows the creator of the smart contract to set the poll data values
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/open_ballot/contract.py:18
    // class OpenBallot(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    extract 2 0
    txna ApplicationArgs 5
    extract 2 0
    txna ApplicationArgs 6
    btoi
    txna ApplicationArgs 7
    extract 2 0
    txna ApplicationArgs 8
    btoi
    // smart_contracts/open_ballot/contract.py:143-144
    // # Define arc4.abimethod that allows the creator of the smart contract to set the poll data values
    // @arc4.abimethod()
    callsub set_poll
    intc_1 // 1
    retsub

__puya_arc4_router___submit_vote_route@6:
    // smart_contracts/open_ballot/contract.py:207-208
    // # Define arc4.abimethod that allows any eligible account to submit their vote
    // @arc4.abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/open_ballot/contract.py:18
    // class OpenBallot(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    // smart_contracts/open_ballot/contract.py:207-208
    // # Define arc4.abimethod that allows any eligible account to submit their vote
    // @arc4.abimethod
    callsub submit_vote
    intc_1 // 1
    retsub

__puya_arc4_router___terminate_route@7:
    // smart_contracts/open_ballot/contract.py:252-253
    // # Define arc4.abimethod that allows the creator of the smart contract to delete its client
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub terminate
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@11:
    // smart_contracts/open_ballot/contract.py:18
    // class OpenBallot(ARC4Contract):
    intc_0 // 0
    retsub


// smart_contracts.open_ballot.contract.OpenBallot.generate() -> void:
generate:
    // smart_contracts/open_ballot/contract.py:65-67
    // # Define arc4.abimethod that generates the smart contract client
    // @arc4.abimethod(create="require")
    // def generate(self) -> None:
    proto 0 0
    // smart_contracts/open_ballot/contract.py:70
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/open_ballot/contract.py:68-71
    // # Make necessary assertions to verify transaction requirements
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Transaction sender must match creator address."
    assert // Transaction sender must match creator address.
    // smart_contracts/open_ballot/contract.py:73
    // assert Global.creator_address.balance >= (
    global CreatorAddress
    acct_params_get AcctBalance
    assert // account funded
    // smart_contracts/open_ballot/contract.py:74
    // Global.min_balance + self.calc_mbr(num_bytes=UInt64(4), num_uint=UInt64(8))  # Global schema MBR: 0.528 ALGO
    global MinBalance
    pushints 4 8 // 4, 8
    callsub calc_mbr
    +
    // smart_contracts/open_ballot/contract.py:73-74
    // assert Global.creator_address.balance >= (
    //     Global.min_balance + self.calc_mbr(num_bytes=UInt64(4), num_uint=UInt64(8))  # Global schema MBR: 0.528 ALGO
    >=
    // smart_contracts/open_ballot/contract.py:73-75
    // assert Global.creator_address.balance >= (
    //     Global.min_balance + self.calc_mbr(num_bytes=UInt64(4), num_uint=UInt64(8))  # Global schema MBR: 0.528 ALGO
    // ), "Creator address balance must be equal or greater than Global.min_balance + Global schema MBR amount."
    assert // Creator address balance must be equal or greater than Global.min_balance + Global schema MBR amount.
    // smart_contracts/open_ballot/contract.py:77-78
    // # Global storage variable value assignments
    // self.total_accounts_opted_in = UInt64(0)
    bytec_1 // "total_accounts_opted_in"
    intc_0 // 0
    app_global_put
    // smart_contracts/open_ballot/contract.py:80
    // self.poll_finalized = UInt64(0)
    bytec_2 // "poll_finalized"
    intc_0 // 0
    app_global_put
    // smart_contracts/open_ballot/contract.py:82
    // self.choice1_total = UInt64(0)
    bytec_3 // "choice1_total"
    intc_0 // 0
    app_global_put
    // smart_contracts/open_ballot/contract.py:83
    // self.choice2_total = UInt64(0)
    bytec 4 // "choice2_total"
    intc_0 // 0
    app_global_put
    // smart_contracts/open_ballot/contract.py:84
    // self.choice3_total = UInt64(0)
    bytec 5 // "choice3_total"
    intc_0 // 0
    app_global_put
    // smart_contracts/open_ballot/contract.py:85
    // self.total_votes = UInt64(0)
    bytec 6 // "total_votes"
    intc_0 // 0
    app_global_put
    // smart_contracts/open_ballot/contract.py:90
    // Txn.sender,
    pushbytes "Global State MBR has been successfully satisfied by account address: "
    txn Sender
    concat
    // smart_contracts/open_ballot/contract.py:87-91
    // # Log info on-chain
    // log(
    //     "Global State MBR has been successfully satisfied by account address: ",
    //     Txn.sender,
    // )
    log
    retsub


// smart_contracts.open_ballot.contract.OpenBallot.calc_mbr(num_bytes: uint64, num_uint: uint64) -> uint64:
calc_mbr:
    // smart_contracts/open_ballot/contract.py:51-53
    // # Define subroutine that calculates the minimum balance requirement total cost
    // @subroutine
    // def calc_mbr(self, num_bytes: UInt64, num_uint: UInt64) -> UInt64:
    proto 2 1
    // smart_contracts/open_ballot/contract.py:55
    // byte_fee = UInt64(50_000)  # Byte slice fee for key-value pair (25_000 + 25_000)
    pushint 50000 // 50000
    // smart_contracts/open_ballot/contract.py:58-59
    // # Multiply respective fee cost with the number of key-value pairs in each schema to get total fee amount
    // total_byte_fee = byte_fee * num_bytes
    frame_dig -2
    *
    // smart_contracts/open_ballot/contract.py:56
    // uint_fee = UInt64(28_500)  # UInt64 fee for key-value pair (25_000 + 3_500)
    pushint 28500 // 28500
    // smart_contracts/open_ballot/contract.py:60
    // total_uint_fee = uint_fee * num_uint
    frame_dig -1
    *
    // smart_contracts/open_ballot/contract.py:54
    // base_fee = UInt64(100_000)  # Base fee (100_000 * (1 + ExtraProgramPages (if Global base fee)))
    pushint 100000 // 100000
    // smart_contracts/open_ballot/contract.py:62-63
    // # Return the minimum balance requirement total cost
    // return base_fee + total_byte_fee + total_uint_fee
    uncover 2
    +
    +
    retsub


// smart_contracts.open_ballot.contract.OpenBallot.local_storage(account: bytes) -> void:
local_storage:
    // smart_contracts/open_ballot/contract.py:100-102
    // # Define arc4.abimethod that allows any eligible account to opt in to the smart contract's local storage
    // @arc4.abimethod(allow_actions=["OptIn"])
    // def local_storage(self, account: Account) -> None:
    proto 1 0
    // smart_contracts/open_ballot/contract.py:103-104
    // # Make necessary assertions to verify transaction requirements
    // assert Txn.sender == account, "Transaction sender must match account address."
    txn Sender
    frame_dig -1
    ==
    assert // Transaction sender must match account address.
    // smart_contracts/open_ballot/contract.py:106
    // assert account.balance >= (
    frame_dig -1
    acct_params_get AcctBalance
    assert // account funded
    // smart_contracts/open_ballot/contract.py:107
    // Global.min_balance + self.calc_mbr(num_bytes=UInt64(0), num_uint=UInt64(2))  # Local schema MBR: 0.157 ALGO
    global MinBalance
    intc_0 // 0
    intc_2 // 2
    callsub calc_mbr
    +
    // smart_contracts/open_ballot/contract.py:106-107
    // assert account.balance >= (
    //     Global.min_balance + self.calc_mbr(num_bytes=UInt64(0), num_uint=UInt64(2))  # Local schema MBR: 0.157 ALGO
    >=
    // smart_contracts/open_ballot/contract.py:106-108
    // assert account.balance >= (
    //     Global.min_balance + self.calc_mbr(num_bytes=UInt64(0), num_uint=UInt64(2))  # Local schema MBR: 0.157 ALGO
    // ), "Account address balance must be equal or greater than Global.min_balance + Local schema MBR amount."
    assert // Account address balance must be equal or greater than Global.min_balance + Local schema MBR amount.
    // smart_contracts/open_ballot/contract.py:110-111
    // # Change local state var 'self.local_vote_status' (specific to account) value from 'None' to '0'
    // self.local_vote_status[account] = UInt64(0)
    frame_dig -1
    bytec 7 // "vote_status"
    intc_0 // 0
    app_local_put
    // smart_contracts/open_ballot/contract.py:113-114
    // # Change local state var 'self.local_vote_choice' (specific to account) value from 'None' to '0'
    // self.local_vote_choice[account] = UInt64(0)
    frame_dig -1
    bytec_0 // "vote_choice"
    intc_0 // 0
    app_local_put
    // smart_contracts/open_ballot/contract.py:116-117
    // # Increment count for total accounts opted in
    // self.total_accounts_opted_in += UInt64(1)
    intc_0 // 0
    bytec_1 // "total_accounts_opted_in"
    app_global_get_ex
    assert // check self.total_accounts_opted_in exists
    intc_1 // 1
    +
    bytec_1 // "total_accounts_opted_in"
    swap
    app_global_put
    // smart_contracts/open_ballot/contract.py:122
    // Txn.sender,
    pushbytes "Local State MBR has been successfully satisfied by account address: "
    txn Sender
    concat
    // smart_contracts/open_ballot/contract.py:119-123
    // # Log info on-chain
    // log(
    //     "Local State MBR has been successfully satisfied by account address: ",
    //     Txn.sender,
    // )
    log
    retsub


// smart_contracts.open_ballot.contract.OpenBallot.opt_out(account: bytes) -> void:
opt_out:
    // smart_contracts/open_ballot/contract.py:125-127
    // # Define arc4.abimethod that allows any eligible account to opt out of the smart contract's local storage
    // @arc4.abimethod(allow_actions=["CloseOut"])
    // def opt_out(self, account: Account) -> None:
    proto 1 0
    // smart_contracts/open_ballot/contract.py:128-131
    // # Make necessary assertions to verify transaction requirements
    // assert account.is_opted_in(
    //     Application(Global.current_application_id.id)
    // ), "Account must first be opted-in to App client in order to close out."
    frame_dig -1
    // smart_contracts/open_ballot/contract.py:130
    // Application(Global.current_application_id.id)
    global CurrentApplicationID
    // smart_contracts/open_ballot/contract.py:128-131
    // # Make necessary assertions to verify transaction requirements
    // assert account.is_opted_in(
    //     Application(Global.current_application_id.id)
    // ), "Account must first be opted-in to App client in order to close out."
    app_opted_in
    assert // Account must first be opted-in to App client in order to close out.
    // smart_contracts/open_ballot/contract.py:133-134
    // # Delete account local storage keys and their corresponding values
    // del self.local_vote_status[account]
    frame_dig -1
    bytec 7 // "vote_status"
    app_local_del
    // smart_contracts/open_ballot/contract.py:135
    // del self.local_vote_choice[account]
    frame_dig -1
    bytec_0 // "vote_choice"
    app_local_del
    // smart_contracts/open_ballot/contract.py:137-138
    // # Decrement the total count of accounts that are opted in
    // self.total_accounts_opted_in -= UInt64(1)
    intc_0 // 0
    bytec_1 // "total_accounts_opted_in"
    app_global_get_ex
    assert // check self.total_accounts_opted_in exists
    intc_1 // 1
    -
    bytec_1 // "total_accounts_opted_in"
    swap
    app_global_put
    // smart_contracts/open_ballot/contract.py:140-141
    // # Log info on-chain
    // log("Close-out method successful for account address: ", account)
    pushbytes "Close-out method successful for account address: "
    frame_dig -1
    concat
    log
    retsub


// smart_contracts.open_ballot.contract.OpenBallot.set_poll(title: bytes, choice1: bytes, choice2: bytes, choice3: bytes, start_date_str: bytes, start_date_unix: uint64, end_date_str: bytes, end_date_unix: uint64) -> void:
set_poll:
    // smart_contracts/open_ballot/contract.py:143-155
    // # Define arc4.abimethod that allows the creator of the smart contract to set the poll data values
    // @arc4.abimethod()
    // def set_poll(
    //     self,
    //     title: Bytes,
    //     choice1: Bytes,
    //     choice2: Bytes,
    //     choice3: Bytes,
    //     start_date_str: String,
    //     start_date_unix: UInt64,
    //     end_date_str: String,
    //     end_date_unix: UInt64,
    // ) -> None:
    proto 8 0
    // smart_contracts/open_ballot/contract.py:156-157
    // # Make necessary assertions to verify transaction requirements
    // assert Txn.sender == Global.creator_address, "Only App creator can set up poll."
    txn Sender
    global CreatorAddress
    ==
    assert // Only App creator can set up poll.
    // smart_contracts/open_ballot/contract.py:159
    // assert title.length <= UInt64(
    frame_dig -8
    len
    // smart_contracts/open_ballot/contract.py:159-161
    // assert title.length <= UInt64(
    //     118
    // ), "Poll title size can not exceed 118 bytes of data per key-value."
    pushint 118 // 118
    <=
    assert // Poll title size can not exceed 118 bytes of data per key-value.
    // smart_contracts/open_ballot/contract.py:164
    // choice1.length <= UInt64(116)
    frame_dig -7
    len
    intc_3 // 116
    <=
    // smart_contracts/open_ballot/contract.py:164-166
    // choice1.length <= UInt64(116)
    // and choice2.length <= UInt64(116)
    // and choice3.length <= UInt64(116)
    bz set_poll_bool_false@4
    // smart_contracts/open_ballot/contract.py:165
    // and choice2.length <= UInt64(116)
    frame_dig -6
    len
    intc_3 // 116
    <=
    // smart_contracts/open_ballot/contract.py:164-166
    // choice1.length <= UInt64(116)
    // and choice2.length <= UInt64(116)
    // and choice3.length <= UInt64(116)
    bz set_poll_bool_false@4
    // smart_contracts/open_ballot/contract.py:166
    // and choice3.length <= UInt64(116)
    frame_dig -5
    len
    intc_3 // 116
    <=
    // smart_contracts/open_ballot/contract.py:164-166
    // choice1.length <= UInt64(116)
    // and choice2.length <= UInt64(116)
    // and choice3.length <= UInt64(116)
    bz set_poll_bool_false@4
    intc_1 // 1
    b set_poll_bool_merge@5

set_poll_bool_false@4:
    intc_0 // 0

set_poll_bool_merge@5:
    // smart_contracts/open_ballot/contract.py:163-167
    // assert (
    //     choice1.length <= UInt64(116)
    //     and choice2.length <= UInt64(116)
    //     and choice3.length <= UInt64(116)
    // ), "Poll choice size cannot exceed 116 bytes of data per key-value."
    assert // Poll choice size cannot exceed 116 bytes of data per key-value.
    // smart_contracts/open_ballot/contract.py:179
    // start_date_unix < end_date_unix
    frame_dig -3
    frame_dig -1
    <
    // smart_contracts/open_ballot/contract.py:178-180
    // assert (
    //     start_date_unix < end_date_unix
    // ), "Start date must be earlier than end date."
    assert // Start date must be earlier than end date.
    // smart_contracts/open_ballot/contract.py:182-184
    // assert end_date_unix >= start_date_unix + UInt64(
    //     3 * 24 * 60 * 60
    // ), "End date must be at least 3 days later than the start date."
    frame_dig -3
    pushint 259200 // 259200
    +
    frame_dig -1
    <=
    assert // End date must be at least 3 days later than the start date.
    // smart_contracts/open_ballot/contract.py:186
    // assert end_date_unix - start_date_unix <= UInt64(
    frame_dig -1
    frame_dig -3
    -
    // smart_contracts/open_ballot/contract.py:186-188
    // assert end_date_unix - start_date_unix <= UInt64(
    //     14 * 24 * 60 * 60
    // ), "Voting period can not exceed 14 days."
    pushint 1209600 // 1209600
    <=
    assert // Voting period can not exceed 14 days.
    // smart_contracts/open_ballot/contract.py:190
    // assert self.poll_finalized == UInt64(0), "Poll can only be setup once."
    intc_0 // 0
    bytec_2 // "poll_finalized"
    app_global_get_ex
    assert // check self.poll_finalized exists
    !
    assert // Poll can only be setup once.
    // smart_contracts/open_ballot/contract.py:192-193
    // # Update global state keys with new values
    // self.poll_title = title
    pushbytes "poll_title"
    frame_dig -8
    app_global_put
    // smart_contracts/open_ballot/contract.py:194
    // self.poll_choice1 = choice1
    pushbytes "poll_choice1"
    frame_dig -7
    app_global_put
    // smart_contracts/open_ballot/contract.py:195
    // self.poll_choice2 = choice2
    pushbytes "poll_choice2"
    frame_dig -6
    app_global_put
    // smart_contracts/open_ballot/contract.py:196
    // self.poll_choice3 = choice3
    pushbytes "poll_choice3"
    frame_dig -5
    app_global_put
    // smart_contracts/open_ballot/contract.py:197
    // self.poll_start_date_unix = start_date_unix
    bytec 8 // "poll_start_date_unix"
    frame_dig -3
    app_global_put
    // smart_contracts/open_ballot/contract.py:198
    // self.poll_end_date_unix = end_date_unix
    bytec 9 // "poll_end_date_unix"
    frame_dig -1
    app_global_put
    // smart_contracts/open_ballot/contract.py:200-201
    // # Finalize poll (ensures poll can only be set once)
    // self.poll_finalized = UInt64(1)
    bytec_2 // "poll_finalized"
    intc_1 // 1
    app_global_put
    // smart_contracts/open_ballot/contract.py:203-204
    // # Log info on-chain
    // log("Poll start date: ", start_date_str)
    pushbytes "Poll start date: "
    frame_dig -4
    concat
    log
    // smart_contracts/open_ballot/contract.py:205
    // log("Poll end date: ", end_date_str)
    pushbytes "Poll end date: "
    frame_dig -2
    concat
    log
    retsub


// smart_contracts.open_ballot.contract.OpenBallot.submit_vote(account: bytes, choice: uint64) -> void:
submit_vote:
    // smart_contracts/open_ballot/contract.py:207-209
    // # Define arc4.abimethod that allows any eligible account to submit their vote
    // @arc4.abimethod
    // def submit_vote(self, account: Account, choice: UInt64) -> None:
    proto 2 0
    // smart_contracts/open_ballot/contract.py:210-213
    // # Make necessary assertions to verify transaction requirements
    // assert account.is_opted_in(
    //     Application(Global.current_application_id.id)
    // ), "Account must be opted-in before voting."
    frame_dig -2
    // smart_contracts/open_ballot/contract.py:212
    // Application(Global.current_application_id.id)
    global CurrentApplicationID
    // smart_contracts/open_ballot/contract.py:210-213
    // # Make necessary assertions to verify transaction requirements
    // assert account.is_opted_in(
    //     Application(Global.current_application_id.id)
    // ), "Account must be opted-in before voting."
    app_opted_in
    assert // Account must be opted-in before voting.
    // smart_contracts/open_ballot/contract.py:216
    // Global.latest_timestamp > self.poll_start_date_unix
    global LatestTimestamp
    intc_0 // 0
    bytec 8 // "poll_start_date_unix"
    app_global_get_ex
    assert // check self.poll_start_date_unix exists
    >
    // smart_contracts/open_ballot/contract.py:215-217
    // assert (
    //     Global.latest_timestamp > self.poll_start_date_unix
    // ), "Voting period has not started yet."
    assert // Voting period has not started yet.
    // smart_contracts/open_ballot/contract.py:220
    // Global.latest_timestamp < self.poll_end_date_unix
    global LatestTimestamp
    intc_0 // 0
    bytec 9 // "poll_end_date_unix"
    app_global_get_ex
    assert // check self.poll_end_date_unix exists
    <
    // smart_contracts/open_ballot/contract.py:219-221
    // assert (
    //     Global.latest_timestamp < self.poll_end_date_unix
    // ), "Voting period has ended."
    assert // Voting period has ended.
    // smart_contracts/open_ballot/contract.py:223
    // assert self.local_vote_choice[account] == UInt64(
    frame_dig -2
    intc_0 // 0
    bytec_0 // "vote_choice"
    app_local_get_ex
    assert // check self.local_vote_choice exists for account
    // smart_contracts/open_ballot/contract.py:223-225
    // assert self.local_vote_choice[account] == UInt64(
    //     0
    // ), "This account already submitted a vote."
    !
    assert // This account already submitted a vote.
    // smart_contracts/open_ballot/contract.py:228
    // choice == UInt64(1) or choice == UInt64(2) or choice == UInt64(3)
    frame_dig -1
    intc_1 // 1
    ==
    dup
    bnz submit_vote_bool_true@3
    frame_dig -1
    intc_2 // 2
    ==
    bnz submit_vote_bool_true@3
    frame_dig -1
    pushint 3 // 3
    ==
    bz submit_vote_bool_false@4

submit_vote_bool_true@3:
    intc_1 // 1
    b submit_vote_bool_merge@5

submit_vote_bool_false@4:
    intc_0 // 0

submit_vote_bool_merge@5:
    // smart_contracts/open_ballot/contract.py:227-229
    // assert (
    //     choice == UInt64(1) or choice == UInt64(2) or choice == UInt64(3)
    // ), "Invalid choice. Can only choose between choices 1, 2, 3."
    assert // Invalid choice. Can only choose between choices 1, 2, 3.
    // smart_contracts/open_ballot/contract.py:231-232
    // # Mark the account as having voted
    // self.local_vote_status[account] = UInt64(1)
    frame_dig -2
    bytec 7 // "vote_status"
    intc_1 // 1
    app_local_put
    // smart_contracts/open_ballot/contract.py:234-235
    // # Increment count for total votes
    // self.total_votes += UInt64(1)
    intc_0 // 0
    bytec 6 // "total_votes"
    app_global_get_ex
    assert // check self.total_votes exists
    intc_1 // 1
    +
    bytec 6 // "total_votes"
    swap
    app_global_put
    // smart_contracts/open_ballot/contract.py:237-238
    // # Update vote tally
    // if choice == UInt64(1):
    frame_dig 0
    bz submit_vote_else_body@7
    // smart_contracts/open_ballot/contract.py:239
    // self.choice1_total += UInt64(1)
    intc_0 // 0
    bytec_3 // "choice1_total"
    app_global_get_ex
    assert // check self.choice1_total exists
    intc_1 // 1
    +
    bytec_3 // "choice1_total"
    swap
    app_global_put
    // smart_contracts/open_ballot/contract.py:240
    // self.local_vote_choice[account] = UInt64(1)
    frame_dig -2
    bytec_0 // "vote_choice"
    intc_1 // 1
    app_local_put
    b submit_vote_after_if_else@11

submit_vote_else_body@7:
    // smart_contracts/open_ballot/contract.py:241
    // elif choice == UInt64(2):
    frame_dig -1
    intc_2 // 2
    ==
    bz submit_vote_else_body@9
    // smart_contracts/open_ballot/contract.py:242
    // self.choice2_total += UInt64(1)
    intc_0 // 0
    bytec 4 // "choice2_total"
    app_global_get_ex
    assert // check self.choice2_total exists
    intc_1 // 1
    +
    bytec 4 // "choice2_total"
    swap
    app_global_put
    // smart_contracts/open_ballot/contract.py:243
    // self.local_vote_choice[account] = UInt64(2)
    frame_dig -2
    bytec_0 // "vote_choice"
    intc_2 // 2
    app_local_put
    b submit_vote_after_if_else@11

submit_vote_else_body@9:
    // smart_contracts/open_ballot/contract.py:245
    // self.choice3_total += UInt64(1)
    intc_0 // 0
    bytec 5 // "choice3_total"
    app_global_get_ex
    assert // check self.choice3_total exists
    intc_1 // 1
    +
    bytec 5 // "choice3_total"
    swap
    app_global_put
    // smart_contracts/open_ballot/contract.py:246
    // self.local_vote_choice[account] = UInt64(3)
    frame_dig -2
    bytec_0 // "vote_choice"
    pushint 3 // 3
    app_local_put

submit_vote_after_if_else@11:
    // smart_contracts/open_ballot/contract.py:248-249
    // # Log info on-chain
    // log("Vote submitted successfully for account address: ", account)
    pushbytes "Vote submitted successfully for account address: "
    frame_dig -2
    concat
    log
    // smart_contracts/open_ballot/contract.py:250
    // log("Vote submitted for choice number: ", choice)
    frame_dig -1
    itob
    pushbytes "Vote submitted for choice number: "
    swap
    concat
    log
    retsub


// smart_contracts.open_ballot.contract.OpenBallot.terminate() -> void:
terminate:
    // smart_contracts/open_ballot/contract.py:252-254
    // # Define arc4.abimethod that allows the creator of the smart contract to delete its client
    // @arc4.abimethod(allow_actions=["DeleteApplication"])
    // def terminate(self) -> None:
    proto 0 0
    // smart_contracts/open_ballot/contract.py:257
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/open_ballot/contract.py:255-258
    // # Make necessary assertions to verify transaction requirements
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Only App creator can terminate the App."
    assert // Only App creator can terminate the App.
    // smart_contracts/open_ballot/contract.py:263
    // Global.current_application_id.id,
    global CurrentApplicationID
    itob
    pushbytes "Termination method successful for App ID: "
    swap
    concat
    // smart_contracts/open_ballot/contract.py:260-264
    // # Log info on-chain
    // log(
    //     "Termination method successful for App ID: ",
    //     Global.current_application_id.id,
    // )
    log
    retsub
