#pragma version 10
#pragma typetrack false

// smart_contracts.open_ballot.contract.OpenBallot.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 116 TMPL_VERSION_UNIX TMPL_DELETABLE
    bytecblock "poll_finalized" 0x766f74655f7374617475735f
    // smart_contracts/open_ballot/contract.py:22
    // class OpenBallot(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@10
    pushbytess 0xb91a0926 0x5be219f0 0x81e1658f 0xe6bf4f23 0x5ff16da4 // method "pay_box_storage_mbr(pay)void", method "generate()void", method "get_version_unix()uint64", method "set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void", method "terminate()void"
    txna ApplicationArgs 0
    match main_pay_box_storage_mbr_route@5 main_generate_route@6 main_get_version_unix_route@7 main_set_poll_route@8 main_terminate_route@9

main_after_if_else@10:
    // smart_contracts/open_ballot/contract.py:22
    // class OpenBallot(ARC4Contract):
    intc_0 // 0
    return

main_terminate_route@9:
    // smart_contracts/open_ballot/contract.py:279-280
    // # Allows the creator to delete the smart contract client
    // @arc4.abimethod(create="disallow", allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub terminate
    intc_1 // 1
    return

main_set_poll_route@8:
    // smart_contracts/open_ballot/contract.py:136-137
    // # Allows the creator to set up poll data values including title, choices, and dates
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/open_ballot/contract.py:22
    // class OpenBallot(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    extract 2 0
    txna ApplicationArgs 5
    btoi
    txna ApplicationArgs 6
    btoi
    // smart_contracts/open_ballot/contract.py:136-137
    // # Allows the creator to set up poll data values including title, choices, and dates
    // @arc4.abimethod()
    callsub set_poll
    intc_1 // 1
    return

main_get_version_unix_route@7:
    // smart_contracts/open_ballot/contract.py:131-132
    // # Retrieves the version of the smart contract as a Unix timestamp
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/open_ballot/contract.py:134
    // return TemplateVar[UInt64]("VERSION_UNIX")
    intc_3 // TMPL_VERSION_UNIX
    // smart_contracts/open_ballot/contract.py:131-132
    // # Retrieves the version of the smart contract as a Unix timestamp
    // @arc4.abimethod()
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_generate_route@6:
    // smart_contracts/open_ballot/contract.py:105-106
    // # Creates the smart contract client
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    callsub generate
    intc_1 // 1
    return

main_pay_box_storage_mbr_route@5:
    // smart_contracts/open_ballot/contract.py:89
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/open_ballot/contract.py:22
    // class OpenBallot(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/open_ballot/contract.py:89
    // @arc4.abimethod()
    callsub pay_box_storage_mbr
    intc_1 // 1
    return


// smart_contracts.open_ballot.contract.OpenBallot.pay_box_storage_mbr(mbr_pay: uint64) -> void:
pay_box_storage_mbr:
    // smart_contracts/open_ballot/contract.py:89-90
    // @arc4.abimethod()
    // def pay_box_storage_mbr(self, mbr_pay: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/open_ballot/contract.py:91-92
    // # Make necessary assertions to verify transaction requirements
    // assert mbr_pay.amount >= self.calc_box_mbr(), "MBR payment must meet the minimum requirement amount."
    frame_dig -1
    gtxns Amount
    dup
    // smart_contracts/open_ballot/contract.py:78-79
    // # Return single box fee
    // return base_fee.native + size_fee
    pushint 23300 // 23300
    // smart_contracts/open_ballot/contract.py:91-92
    // # Make necessary assertions to verify transaction requirements
    // assert mbr_pay.amount >= self.calc_box_mbr(), "MBR payment must meet the minimum requirement amount."
    >=
    assert // MBR payment must meet the minimum requirement amount.
    // smart_contracts/open_ballot/contract.py:93
    // assert mbr_pay.sender == Txn.sender, "MBR payment sender address must match transaction sender address."
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    assert // MBR payment sender address must match transaction sender address.
    // smart_contracts/open_ballot/contract.py:95
    // mbr_pay.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/open_ballot/contract.py:94-96
    // assert (
    //     mbr_pay.receiver == Global.current_application_address
    // ), "MBR payment reciever address must be the App address."
    assert // MBR payment reciever address must be the App address.
    // smart_contracts/open_ballot/contract.py:98
    // status , exists = self.vote_status_box.maybe(Txn.sender)
    bytec_1 // 0x766f74655f7374617475735f
    txn Sender
    concat
    box_get
    bury 1
    // smart_contracts/open_ballot/contract.py:100
    // if not exists:
    bnz pay_box_storage_mbr_after_if_else@2
    // smart_contracts/open_ballot/contract.py:101
    // self.vote_status_box[Txn.sender] = UInt64(666777888)
    bytec_1 // 0x766f74655f7374617475735f
    txn Sender
    concat
    pushint 666777888 // 666777888
    itob
    box_put

pay_box_storage_mbr_after_if_else@2:
    // smart_contracts/open_ballot/contract.py:103
    // log("MBR payment amount: ", mbr_pay.amount)
    frame_dig 0
    itob
    pushbytes "MBR payment amount: "
    swap
    concat
    log
    retsub


// smart_contracts.open_ballot.contract.OpenBallot.generate() -> void:
generate:
    // smart_contracts/open_ballot/contract.py:105-107
    // # Creates the smart contract client
    // @arc4.abimethod(create="require")
    // def generate(self) -> None:
    proto 0 0
    // smart_contracts/open_ballot/contract.py:110
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/open_ballot/contract.py:108-111
    // # Make necessary assertions to verify transaction requirements
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Transaction sender must match creator address."
    assert // Transaction sender must match creator address.
    // smart_contracts/open_ballot/contract.py:113
    // assert Global.creator_address.balance >= (
    global CreatorAddress
    acct_params_get AcctBalance
    assert // account funded
    // smart_contracts/open_ballot/contract.py:114
    // Global.min_balance
    global MinBalance
    // smart_contracts/open_ballot/contract.py:69-70
    // # Return the minimum balance requirement total cost
    // return base_fee + total_byte_fee + total_uint_fee
    pushint 528000 // 528000
    // smart_contracts/open_ballot/contract.py:114-117
    // Global.min_balance
    // + self.calc_schema_mbr(
    //     num_bytes=UInt64(4), num_uint=UInt64(8)
    // )  # Global schema MBR: 0.528 ALGO
    +
    // smart_contracts/open_ballot/contract.py:113-117
    // assert Global.creator_address.balance >= (
    //     Global.min_balance
    //     + self.calc_schema_mbr(
    //         num_bytes=UInt64(4), num_uint=UInt64(8)
    //     )  # Global schema MBR: 0.528 ALGO
    >=
    // smart_contracts/open_ballot/contract.py:113-118
    // assert Global.creator_address.balance >= (
    //     Global.min_balance
    //     + self.calc_schema_mbr(
    //         num_bytes=UInt64(4), num_uint=UInt64(8)
    //     )  # Global schema MBR: 0.528 ALGO
    // ), "Creator address balance must be equal or greater than Global.min_balance + Global schema MBR amount."
    assert // Creator address balance must be equal or greater than Global.min_balance + Global schema MBR amount.
    // smart_contracts/open_ballot/contract.py:120-121
    // # Global storage variable value assignments
    // self.poll_finalized = UInt64(0)
    bytec_0 // "poll_finalized"
    intc_0 // 0
    app_global_put
    // smart_contracts/open_ballot/contract.py:123
    // self.total_accounts_opted_in = UInt64(0)
    pushbytes "total_accounts_opted_in"
    intc_0 // 0
    app_global_put
    // smart_contracts/open_ballot/contract.py:125
    // self.choice1_total = UInt64(0)
    pushbytes "choice1_total"
    intc_0 // 0
    app_global_put
    // smart_contracts/open_ballot/contract.py:126
    // self.choice2_total = UInt64(0)
    pushbytes "choice2_total"
    intc_0 // 0
    app_global_put
    // smart_contracts/open_ballot/contract.py:127
    // self.choice3_total = UInt64(0)
    pushbytes "choice3_total"
    intc_0 // 0
    app_global_put
    // smart_contracts/open_ballot/contract.py:128
    // self.total_votes = UInt64(0)
    pushbytes "total_votes"
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.open_ballot.contract.OpenBallot.set_poll(title: bytes, choice1: bytes, choice2: bytes, choice3: bytes, start_date_unix: uint64, end_date_unix: uint64) -> void:
set_poll:
    // smart_contracts/open_ballot/contract.py:136-146
    // # Allows the creator to set up poll data values including title, choices, and dates
    // @arc4.abimethod()
    // def set_poll(
    //     self,
    //     title: Bytes,
    //     choice1: Bytes,
    //     choice2: Bytes,
    //     choice3: Bytes,
    //     start_date_unix: UInt64,
    //     end_date_unix: UInt64,
    // ) -> None:
    proto 6 0
    // smart_contracts/open_ballot/contract.py:147-148
    // # Make necessary assertions to verify transaction requirements
    // assert Txn.sender == Global.creator_address, "Only App creator can set up poll."
    txn Sender
    global CreatorAddress
    ==
    assert // Only App creator can set up poll.
    // smart_contracts/open_ballot/contract.py:150
    // assert title.length <= UInt64(
    frame_dig -6
    len
    // smart_contracts/open_ballot/contract.py:150-152
    // assert title.length <= UInt64(
    //     118
    // ), "Poll title size can not exceed 118 bytes of data per key-value."
    pushint 118 // 118
    <=
    assert // Poll title size can not exceed 118 bytes of data per key-value.
    // smart_contracts/open_ballot/contract.py:155
    // choice1.length <= UInt64(116)
    frame_dig -5
    len
    intc_2 // 116
    <=
    // smart_contracts/open_ballot/contract.py:155-157
    // choice1.length <= UInt64(116)
    // and choice2.length <= UInt64(116)
    // and choice3.length <= UInt64(116)
    bz set_poll_bool_false@4
    // smart_contracts/open_ballot/contract.py:156
    // and choice2.length <= UInt64(116)
    frame_dig -4
    len
    intc_2 // 116
    <=
    // smart_contracts/open_ballot/contract.py:155-157
    // choice1.length <= UInt64(116)
    // and choice2.length <= UInt64(116)
    // and choice3.length <= UInt64(116)
    bz set_poll_bool_false@4
    // smart_contracts/open_ballot/contract.py:157
    // and choice3.length <= UInt64(116)
    frame_dig -3
    len
    intc_2 // 116
    <=
    // smart_contracts/open_ballot/contract.py:155-157
    // choice1.length <= UInt64(116)
    // and choice2.length <= UInt64(116)
    // and choice3.length <= UInt64(116)
    bz set_poll_bool_false@4
    intc_1 // 1

set_poll_bool_merge@5:
    // smart_contracts/open_ballot/contract.py:154-158
    // assert (
    //     choice1.length <= UInt64(116)
    //     and choice2.length <= UInt64(116)
    //     and choice3.length <= UInt64(116)
    // ), "Poll choice size cannot exceed 116 bytes of data per key-value."
    assert // Poll choice size cannot exceed 116 bytes of data per key-value.
    // smart_contracts/open_ballot/contract.py:161
    // start_date_unix >= Global.latest_timestamp
    frame_dig -2
    global LatestTimestamp
    >=
    // smart_contracts/open_ballot/contract.py:160-162
    // assert (
    //     start_date_unix >= Global.latest_timestamp
    // ), "Start date must be not be earlier than current date."
    assert // Start date must be not be earlier than current date.
    // smart_contracts/open_ballot/contract.py:165
    // end_date_unix >= Global.latest_timestamp
    frame_dig -1
    global LatestTimestamp
    >=
    // smart_contracts/open_ballot/contract.py:164-166
    // assert (
    //     end_date_unix >= Global.latest_timestamp
    // ), "End date must not be earlier than the current timestamp."
    assert // End date must not be earlier than the current timestamp.
    // smart_contracts/open_ballot/contract.py:169
    // start_date_unix < end_date_unix
    frame_dig -2
    frame_dig -1
    <
    // smart_contracts/open_ballot/contract.py:168-170
    // assert (
    //     start_date_unix < end_date_unix
    // ), "Start date must be earlier than end date."
    assert // Start date must be earlier than end date.
    // smart_contracts/open_ballot/contract.py:172-174
    // assert end_date_unix >= start_date_unix + UInt64(
    //     3 * 24 * 60 * 60
    // ), "End date must be at least 3 days later than the start date."
    frame_dig -2
    pushint 259200 // 259200
    +
    frame_dig -1
    <=
    assert // End date must be at least 3 days later than the start date.
    // smart_contracts/open_ballot/contract.py:176
    // assert end_date_unix - start_date_unix <= UInt64(
    frame_dig -1
    frame_dig -2
    -
    // smart_contracts/open_ballot/contract.py:176-178
    // assert end_date_unix - start_date_unix <= UInt64(
    //     14 * 24 * 60 * 60
    // ), "Voting period can not exceed 14 days."
    pushint 1209600 // 1209600
    <=
    assert // Voting period can not exceed 14 days.
    // smart_contracts/open_ballot/contract.py:180
    // assert self.poll_finalized == UInt64(0), "Poll can only be setup once."
    intc_0 // 0
    bytec_0 // "poll_finalized"
    app_global_get_ex
    assert // check self.poll_finalized exists
    !
    assert // Poll can only be setup once.
    // smart_contracts/open_ballot/contract.py:182-183
    // # Update global state keys with new values
    // self.poll_title = title
    pushbytes "poll_title"
    frame_dig -6
    app_global_put
    // smart_contracts/open_ballot/contract.py:184
    // self.poll_choice1 = choice1
    pushbytes "poll_choice1"
    frame_dig -5
    app_global_put
    // smart_contracts/open_ballot/contract.py:185
    // self.poll_choice2 = choice2
    pushbytes "poll_choice2"
    frame_dig -4
    app_global_put
    // smart_contracts/open_ballot/contract.py:186
    // self.poll_choice3 = choice3
    pushbytes "poll_choice3"
    frame_dig -3
    app_global_put
    // smart_contracts/open_ballot/contract.py:187
    // self.poll_start_date_unix = start_date_unix
    pushbytes "poll_start_date_unix"
    frame_dig -2
    app_global_put
    // smart_contracts/open_ballot/contract.py:188
    // self.poll_end_date_unix = end_date_unix
    pushbytes "poll_end_date_unix"
    frame_dig -1
    app_global_put
    // smart_contracts/open_ballot/contract.py:190-191
    // # Finalize poll (ensures poll can only be set once)
    // self.poll_finalized = UInt64(1)
    bytec_0 // "poll_finalized"
    intc_1 // 1
    app_global_put
    retsub

set_poll_bool_false@4:
    intc_0 // 0
    b set_poll_bool_merge@5


// smart_contracts.open_ballot.contract.OpenBallot.terminate() -> void:
terminate:
    // smart_contracts/open_ballot/contract.py:279-281
    // # Allows the creator to delete the smart contract client
    // @arc4.abimethod(create="disallow", allow_actions=["DeleteApplication"])
    // def terminate(self) -> None:
    proto 0 0
    // smart_contracts/open_ballot/contract.py:284
    // Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    // smart_contracts/open_ballot/contract.py:282-285
    // # Make necessary assertions to verify transaction requirements
    // assert (
    //     Txn.sender == Global.creator_address
    // ), "Only App creator can terminate the App."
    assert // Only App creator can terminate the App.
    // smart_contracts/open_ballot/contract.py:287-289
    // assert TemplateVar[UInt64](
    //     "DELETABLE"
    // ), "Template variable 'DELETABLE' needs to be set to 'true' at deploy-time."
    intc 4 // TMPL_DELETABLE
    assert // Template variable 'DELETABLE' needs to be set to 'true' at deploy-time.
    retsub
