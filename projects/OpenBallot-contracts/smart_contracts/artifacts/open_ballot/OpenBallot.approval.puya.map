{
  "version": 3,
  "sources": [
    "../../open_ballot/contract.py"
  ],
  "mappings": ";;;;AAuBA;;;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;AAAA;AA+EK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAyBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;AAAA;AAAA;AAAA;;AAAA;AA7GL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AA6GK;;;AAAA;AAAA;AAyDA;;AAAA;AAAA;AAAA;;AAAA;AAtKL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsKK;;;AAAA;AAAA;AAgCA;;AAAA;AAAA;AAAA;;AAAA;AAtML;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsMK;;;AAAA;AAAA;AA+DA;;AAAA;AAAA;AAAA;;AAAA;AArQL;;;AAqQK;;;AAAA;AAAA;AAqDA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AA1TL;AAAA;AA+EA;;;AAIY;;AAAc;;AAAd;AADJ;AAIO;;AAAA;;AAAA;AACH;;AAEc;;;;AADZ;;;AADF;AADG;AAAP;AAQA;AAAsB;AAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAA+B;AAA/B;AAEA;AAAqB;AAArB;AACA;AAAqB;AAArB;AACA;;AAAqB;AAArB;AACA;;AAAmB;AAAnB;;AAtCR;;;AAKmB;;;;AAIX;;AAAiB;AAHN;;;;AAIX;;AAAiB;AANN;;;;AASJ;;AAAA;AAAA;AAAP;AA4BR;;;AAEe;AAAP;AAGR;;;AAWe;;AAAc;;AAAd;AAAP;AAEO;;AAAA;AAAgB;;AAAhB;AAAP;AAKI;;AAAA;AAAkB;AAAlB;AAAA;;;AACI;;AAAA;AAAkB;AAAlB;AADJ;;;AAEI;;AAAA;AAAkB;AAAlB;AAFJ;;;;;;;;AADJ;AAeI;;AAAA;;AAAA;AADJ;AAIwB;;AAAkB;;;;AAAlB;AAAjB;;AAAA;AAAP;AAIO;;AAAA;;AAAA;AAAmC;;;;AAAnC;AAAP;AAIO;AAAA;AAAA;AAAA;AAAA;AAAP;AAGA;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AAGA;AAAsB;AAAtB;;AAGR;;;AAIY;;AAAc;;AAAd;AADJ;AAKI;;AAAA;;AAAkB;;AAAlB;AADJ;AAKI;;AAAA;;AAAoB;;AAApB;AADJ;AAKI;;AAAA;;AACG;;;AADH;AADJ;AAKO;;AAAA;;AAAA;AACH;;AAAqB;;;AAArB;AADG;AAAP;AAMiC;AAA9B;;AAAA;AAAA;AAAA;;AAAA;;;AACC;AAAsB;;AAAtB;AAAgD;;AAAhD;;AA9IZ;;;AAKY;;;;;;AADI;;;AAKR;AAxBR;;;AAQY;;AAAA;AAAkB;;AAAA;AAAlB;AADO;;;AAAA;AAKJ;;;AAAA;AAAP;AAsJR;;;AAI8B;AAAlB;;AAAA;AAAA;AAAA;;AAAA;AADJ;AAKI;;AAAA;;AAAsB;AAAtB;AAAA;AAAA;AAAA;;AAAA;AADJ;AAKI;;AAAA;;AAAoB;;AAApB;AADJ;AAKI;;AAAA;;AACG;;;AADH;AADJ;AAOqB;AAAlB;;AAAA;AAAA;AAAA;;AAAA;;;AACC;AAAsB;;AAAtB;AAAoC;;AAApC;;AAwCZ;;;AAK0B;AAAd;;AAAA;AAAA;AAAA;;AADJ;AAKI;AAAsB;;AAAtB;AAAA;AAAA;AAAA;;;AAEE;;;AAHC;AAEH;AAAsB;;AAAtB;AAAA;AAAA;AAAA;;;AACiB;;;AAHd;AAAA;AAAP;AAsBI;;AAAU;;;AAAV;AAAA;;;AACG;;AAAU;;;AAAV;AADH;;;AAEG;;AAAU;;;AAAV;AAFH;;;;;;;;AADJ;AAU8C;;;AAAV;;AAAA;AAApC;AAAsB;;AAAtB;AAAA;AAAA;AAGa;AAAV;AAAA;;AAAA;AAAX;;;AACY;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAA;AAAA;AAAA;;;;AACW;;AAAV;AAAA;;AAAA;AAAb;;;AACY;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAA;AAAA;AAAA;;;;AAEA;AAAA;;AAAA;AAAA;AAAsB;AAAtB;AAAA;;AAAA;AAAA;AAGJ;AAAA;;AAAA;AAAA;AAAoB;AAApB;AAAA;;AAAA;AAAA;;AAGR;;;AAIY;;AAAc;;AAAd;AADJ;AAIO;;AAAP;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.__puya_arc4_router__",
      "op": "callsub __puya_arc4_router__",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3": {
      "op": "return",
      "stack_out": []
    },
    "4": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.__puya_arc4_router__",
      "params": {},
      "block": "__puya_arc4_router__",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "7": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "9": {
      "op": "bz __puya_arc4_router___after_if_else@12",
      "stack_out": []
    },
    "12": {
      "op": "pushbytess 0x5be219f0 0x81e1658f 0xe6bf4f23 0xf537b05b 0x0aae0803 0x761dd0fa 0x5ff16da4 // method \"generate()void\", method \"get_version_unix()uint64\", method \"set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void\", method \"fund_box_storage_mbr(pay)void\", method \"request_box(pay)void\", method \"submit_vote(uint8)void\", method \"terminate()void\""
    },
    "49": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(fund_box_storage_mbr(pay)void)",
        "Method(generate()void)",
        "Method(get_version_unix()uint64)",
        "Method(request_box(pay)void)",
        "Method(set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void)",
        "Method(submit_vote(uint8)void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(generate()void)",
        "Method(get_version_unix()uint64)",
        "Method(set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void)",
        "Method(fund_box_storage_mbr(pay)void)",
        "Method(request_box(pay)void)",
        "Method(submit_vote(uint8)void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ]
    },
    "52": {
      "op": "match __puya_arc4_router___generate_route@2 __puya_arc4_router___get_version_unix_route@3 __puya_arc4_router___set_poll_route@4 __puya_arc4_router___fund_box_storage_mbr_route@5 __puya_arc4_router___request_box_route@6 __puya_arc4_router___submit_vote_route@7 __puya_arc4_router___terminate_route@8",
      "stack_out": []
    },
    "68": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "69": {
      "retsub": true,
      "op": "retsub"
    },
    "70": {
      "block": "__puya_arc4_router___generate_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "72": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "73": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "74": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "76": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "77": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "78": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.generate",
      "op": "callsub generate"
    },
    "81": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "82": {
      "retsub": true,
      "op": "retsub"
    },
    "83": {
      "block": "__puya_arc4_router___get_version_unix_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "85": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "86": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "87": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "89": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "90": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.get_version_unix",
      "op": "callsub get_version_unix",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "93": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "94": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "100": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "101": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "102": {
      "op": "log",
      "stack_out": []
    },
    "103": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "104": {
      "retsub": true,
      "op": "retsub"
    },
    "105": {
      "block": "__puya_arc4_router___set_poll_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "107": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "108": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "109": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "111": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "112": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "115": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "118": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "121": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "124": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "127": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "130": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "133": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "136": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "139": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "140": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "143": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ]
    },
    "144": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.set_poll",
      "op": "callsub set_poll",
      "stack_out": []
    },
    "147": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "148": {
      "retsub": true,
      "op": "retsub"
    },
    "149": {
      "block": "__puya_arc4_router___fund_box_storage_mbr_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "151": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "152": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "153": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "155": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "156": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "158": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "1"
      ]
    },
    "159": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "160": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "161": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "163": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "164": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "165": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "166": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.fund_box_storage_mbr",
      "op": "callsub fund_box_storage_mbr",
      "stack_out": []
    },
    "169": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "170": {
      "retsub": true,
      "op": "retsub"
    },
    "171": {
      "block": "__puya_arc4_router___request_box_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "173": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "174": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "175": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "177": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "178": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "180": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "1"
      ]
    },
    "181": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "182": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "183": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "185": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "186": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "187": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "188": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.request_box",
      "op": "callsub request_box",
      "stack_out": []
    },
    "191": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "192": {
      "retsub": true,
      "op": "retsub"
    },
    "193": {
      "block": "__puya_arc4_router___submit_vote_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "195": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "196": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "197": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "199": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "200": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "203": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.submit_vote",
      "op": "callsub submit_vote",
      "stack_out": []
    },
    "206": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "207": {
      "retsub": true,
      "op": "retsub"
    },
    "208": {
      "block": "__puya_arc4_router___terminate_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "210": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "DeleteApplication"
      ]
    },
    "212": {
      "op": "==",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "213": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "214": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "216": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "217": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.terminate",
      "op": "callsub terminate"
    },
    "220": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "221": {
      "retsub": true,
      "op": "retsub"
    },
    "222": {
      "block": "__puya_arc4_router___after_if_else@12",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "223": {
      "retsub": true,
      "op": "retsub"
    },
    "224": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.generate",
      "params": {},
      "block": "generate",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "227": {
      "op": "txn Sender"
    },
    "229": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "231": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "232": {
      "error": "Transaction sender must match creator address.",
      "op": "assert // Transaction sender must match creator address.",
      "stack_out": []
    },
    "233": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "235": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "237": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "238": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%4#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%4#0"
      ]
    },
    "240": {
      "op": "pushints 4 8 // 4, 8",
      "defined_out": [
        "4",
        "8",
        "tmp%4#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%4#0",
        "4",
        "8"
      ]
    },
    "244": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.calc_schema_mbr",
      "op": "callsub calc_schema_mbr",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "247": {
      "op": "+",
      "defined_out": [
        "tmp%6#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%6#0"
      ]
    },
    "248": {
      "op": ">=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "249": {
      "error": "Creator address balance must be equal or greater than Global.min_balance + Global schema MBR amount.",
      "op": "assert // Creator address balance must be equal or greater than Global.min_balance + Global schema MBR amount.",
      "stack_out": []
    },
    "250": {
      "op": "bytec_1 // \"poll_finalized\"",
      "defined_out": [
        "\"poll_finalized\""
      ],
      "stack_out": [
        "\"poll_finalized\""
      ]
    },
    "251": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"poll_finalized\"",
        "0"
      ],
      "stack_out": [
        "\"poll_finalized\"",
        "0"
      ]
    },
    "252": {
      "op": "app_global_put",
      "stack_out": []
    },
    "253": {
      "op": "pushbytes \"total_accounts_opted_in\"",
      "defined_out": [
        "\"total_accounts_opted_in\""
      ],
      "stack_out": [
        "\"total_accounts_opted_in\""
      ]
    },
    "278": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_accounts_opted_in\"",
        "0"
      ]
    },
    "279": {
      "op": "app_global_put",
      "stack_out": []
    },
    "280": {
      "op": "bytec_2 // \"choice1_total\"",
      "defined_out": [
        "\"choice1_total\""
      ],
      "stack_out": [
        "\"choice1_total\""
      ]
    },
    "281": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"choice1_total\"",
        "0"
      ]
    },
    "282": {
      "op": "app_global_put",
      "stack_out": []
    },
    "283": {
      "op": "bytec_3 // \"choice2_total\"",
      "defined_out": [
        "\"choice2_total\""
      ],
      "stack_out": [
        "\"choice2_total\""
      ]
    },
    "284": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"choice2_total\"",
        "0"
      ]
    },
    "285": {
      "op": "app_global_put",
      "stack_out": []
    },
    "286": {
      "op": "bytec 4 // \"choice3_total\"",
      "defined_out": [
        "\"choice3_total\""
      ],
      "stack_out": [
        "\"choice3_total\""
      ]
    },
    "288": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"choice3_total\"",
        "0"
      ]
    },
    "289": {
      "op": "app_global_put",
      "stack_out": []
    },
    "290": {
      "op": "bytec 5 // \"total_votes\"",
      "defined_out": [
        "\"total_votes\""
      ],
      "stack_out": [
        "\"total_votes\""
      ]
    },
    "292": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_votes\"",
        "0"
      ]
    },
    "293": {
      "op": "app_global_put",
      "stack_out": []
    },
    "294": {
      "retsub": true,
      "op": "retsub"
    },
    "295": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.calc_schema_mbr",
      "params": {
        "num_bytes#0": "uint64",
        "num_uint#0": "uint64"
      },
      "block": "calc_schema_mbr",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "298": {
      "op": "pushint 50000 // 50000",
      "defined_out": [
        "50000"
      ],
      "stack_out": [
        "50000"
      ]
    },
    "302": {
      "op": "frame_dig -2",
      "defined_out": [
        "50000",
        "num_bytes#0 (copy)"
      ],
      "stack_out": [
        "50000",
        "num_bytes#0 (copy)"
      ]
    },
    "304": {
      "op": "*",
      "defined_out": [
        "total_byte_fee#0"
      ],
      "stack_out": [
        "total_byte_fee#0"
      ]
    },
    "305": {
      "op": "pushint 28500 // 28500",
      "defined_out": [
        "28500",
        "total_byte_fee#0"
      ],
      "stack_out": [
        "total_byte_fee#0",
        "28500"
      ]
    },
    "309": {
      "op": "frame_dig -1",
      "defined_out": [
        "28500",
        "num_uint#0 (copy)",
        "total_byte_fee#0"
      ],
      "stack_out": [
        "total_byte_fee#0",
        "28500",
        "num_uint#0 (copy)"
      ]
    },
    "311": {
      "op": "*",
      "defined_out": [
        "total_byte_fee#0",
        "total_uint_fee#0"
      ],
      "stack_out": [
        "total_byte_fee#0",
        "total_uint_fee#0"
      ]
    },
    "312": {
      "op": "pushint 100000 // 100000",
      "defined_out": [
        "100000",
        "total_byte_fee#0",
        "total_uint_fee#0"
      ],
      "stack_out": [
        "total_byte_fee#0",
        "total_uint_fee#0",
        "100000"
      ]
    },
    "316": {
      "op": "uncover 2",
      "stack_out": [
        "total_uint_fee#0",
        "100000",
        "total_byte_fee#0"
      ]
    },
    "318": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "total_uint_fee#0"
      ],
      "stack_out": [
        "total_uint_fee#0",
        "tmp%0#0"
      ]
    },
    "319": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "320": {
      "retsub": true,
      "op": "retsub"
    },
    "321": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.get_version_unix",
      "params": {},
      "block": "get_version_unix",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "324": {
      "op": "intc_3 // TMPL_VERSION_UNIX",
      "defined_out": [
        "TMPL_VERSION_UNIX"
      ],
      "stack_out": [
        "TMPL_VERSION_UNIX"
      ]
    },
    "325": {
      "retsub": true,
      "op": "retsub"
    },
    "326": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.set_poll",
      "params": {
        "title#0": "bytes",
        "choice1#0": "bytes",
        "choice2#0": "bytes",
        "choice3#0": "bytes",
        "start_date_unix#0": "uint64",
        "end_date_unix#0": "uint64"
      },
      "block": "set_poll",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "329": {
      "op": "txn Sender"
    },
    "331": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "333": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "334": {
      "error": "Only App creator can set up poll.",
      "op": "assert // Only App creator can set up poll.",
      "stack_out": []
    },
    "335": {
      "op": "frame_dig -6",
      "defined_out": [
        "title#0 (copy)"
      ],
      "stack_out": [
        "title#0 (copy)"
      ]
    },
    "337": {
      "op": "len",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "338": {
      "op": "pushint 118 // 118",
      "defined_out": [
        "118",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "118"
      ]
    },
    "340": {
      "op": "<=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "341": {
      "error": "Poll title size can not exceed 118 bytes of data per key-value.",
      "op": "assert // Poll title size can not exceed 118 bytes of data per key-value.",
      "stack_out": []
    },
    "342": {
      "op": "frame_dig -5",
      "defined_out": [
        "choice1#0 (copy)"
      ],
      "stack_out": [
        "choice1#0 (copy)"
      ]
    },
    "344": {
      "op": "len",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "345": {
      "op": "intc_2 // 116",
      "defined_out": [
        "116",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "116"
      ]
    },
    "346": {
      "op": "<=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "347": {
      "op": "bz set_poll_bool_false@4",
      "stack_out": []
    },
    "350": {
      "op": "frame_dig -4",
      "defined_out": [
        "choice2#0 (copy)"
      ],
      "stack_out": [
        "choice2#0 (copy)"
      ]
    },
    "352": {
      "op": "len",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "353": {
      "op": "intc_2 // 116",
      "stack_out": [
        "tmp%7#0",
        "116"
      ]
    },
    "354": {
      "op": "<=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "355": {
      "op": "bz set_poll_bool_false@4",
      "stack_out": []
    },
    "358": {
      "op": "frame_dig -3",
      "defined_out": [
        "choice3#0 (copy)"
      ],
      "stack_out": [
        "choice3#0 (copy)"
      ]
    },
    "360": {
      "op": "len",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "361": {
      "op": "intc_2 // 116",
      "stack_out": [
        "tmp%9#0",
        "116"
      ]
    },
    "362": {
      "op": "<=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "363": {
      "op": "bz set_poll_bool_false@4",
      "stack_out": []
    },
    "366": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "367": {
      "op": "b set_poll_bool_merge@5"
    },
    "370": {
      "block": "set_poll_bool_false@4",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "371": {
      "block": "set_poll_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "Poll choice size cannot exceed 116 bytes of data per key-value.",
      "op": "assert // Poll choice size cannot exceed 116 bytes of data per key-value.",
      "defined_out": [],
      "stack_out": []
    },
    "372": {
      "op": "frame_dig -2",
      "defined_out": [
        "start_date_unix#0 (copy)"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)"
      ]
    },
    "374": {
      "op": "frame_dig -1",
      "defined_out": [
        "end_date_unix#0 (copy)",
        "start_date_unix#0 (copy)"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)",
        "end_date_unix#0 (copy)"
      ]
    },
    "376": {
      "op": "<",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "377": {
      "error": "Start date must be earlier than end date.",
      "op": "assert // Start date must be earlier than end date.",
      "stack_out": []
    },
    "378": {
      "op": "frame_dig -2",
      "stack_out": [
        "start_date_unix#0 (copy)"
      ]
    },
    "380": {
      "op": "pushint 259200 // 259200",
      "defined_out": [
        "259200",
        "start_date_unix#0 (copy)"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)",
        "259200"
      ]
    },
    "384": {
      "op": "+",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "385": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "end_date_unix#0 (copy)"
      ]
    },
    "387": {
      "op": "<=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "388": {
      "error": "End date must be at least 3 days later than the start date.",
      "op": "assert // End date must be at least 3 days later than the start date.",
      "stack_out": []
    },
    "389": {
      "op": "frame_dig -1",
      "stack_out": [
        "end_date_unix#0 (copy)"
      ]
    },
    "391": {
      "op": "frame_dig -2",
      "stack_out": [
        "end_date_unix#0 (copy)",
        "start_date_unix#0 (copy)"
      ]
    },
    "393": {
      "op": "-",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "394": {
      "op": "pushint 1209600 // 1209600",
      "defined_out": [
        "1209600",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1209600"
      ]
    },
    "398": {
      "op": "<=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "399": {
      "error": "Voting period can not exceed 14 days.",
      "op": "assert // Voting period can not exceed 14 days.",
      "stack_out": []
    },
    "400": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "401": {
      "op": "bytec_1 // \"poll_finalized\"",
      "defined_out": [
        "\"poll_finalized\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"poll_finalized\""
      ]
    },
    "402": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "403": {
      "error": "check self.poll_finalized exists",
      "op": "assert // check self.poll_finalized exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "404": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "405": {
      "error": "Poll can only be setup once.",
      "op": "assert // Poll can only be setup once.",
      "stack_out": []
    },
    "406": {
      "op": "pushbytes \"poll_title\"",
      "defined_out": [
        "\"poll_title\""
      ],
      "stack_out": [
        "\"poll_title\""
      ]
    },
    "418": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"poll_title\"",
        "title#0 (copy)"
      ],
      "stack_out": [
        "\"poll_title\"",
        "title#0 (copy)"
      ]
    },
    "420": {
      "op": "app_global_put",
      "stack_out": []
    },
    "421": {
      "op": "pushbytes \"poll_choice1\"",
      "defined_out": [
        "\"poll_choice1\""
      ],
      "stack_out": [
        "\"poll_choice1\""
      ]
    },
    "435": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"poll_choice1\"",
        "choice1#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice1\"",
        "choice1#0 (copy)"
      ]
    },
    "437": {
      "op": "app_global_put",
      "stack_out": []
    },
    "438": {
      "op": "pushbytes \"poll_choice2\"",
      "defined_out": [
        "\"poll_choice2\""
      ],
      "stack_out": [
        "\"poll_choice2\""
      ]
    },
    "452": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"poll_choice2\"",
        "choice2#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice2\"",
        "choice2#0 (copy)"
      ]
    },
    "454": {
      "op": "app_global_put",
      "stack_out": []
    },
    "455": {
      "op": "pushbytes \"poll_choice3\"",
      "defined_out": [
        "\"poll_choice3\""
      ],
      "stack_out": [
        "\"poll_choice3\""
      ]
    },
    "469": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"poll_choice3\"",
        "choice3#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice3\"",
        "choice3#0 (copy)"
      ]
    },
    "471": {
      "op": "app_global_put",
      "stack_out": []
    },
    "472": {
      "op": "pushbytes \"poll_start_date_unix\"",
      "defined_out": [
        "\"poll_start_date_unix\""
      ],
      "stack_out": [
        "\"poll_start_date_unix\""
      ]
    },
    "494": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"poll_start_date_unix\"",
        "start_date_unix#0 (copy)"
      ]
    },
    "496": {
      "op": "app_global_put",
      "stack_out": []
    },
    "497": {
      "op": "pushbytes \"poll_end_date_unix\"",
      "defined_out": [
        "\"poll_end_date_unix\""
      ],
      "stack_out": [
        "\"poll_end_date_unix\""
      ]
    },
    "517": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"poll_end_date_unix\"",
        "end_date_unix#0 (copy)"
      ]
    },
    "519": {
      "op": "app_global_put",
      "stack_out": []
    },
    "520": {
      "op": "bytec_1 // \"poll_finalized\"",
      "stack_out": [
        "\"poll_finalized\""
      ]
    },
    "521": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"poll_finalized\"",
        "1"
      ],
      "stack_out": [
        "\"poll_finalized\"",
        "1"
      ]
    },
    "522": {
      "op": "app_global_put",
      "stack_out": []
    },
    "523": {
      "retsub": true,
      "op": "retsub"
    },
    "524": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.fund_box_storage_mbr",
      "params": {
        "mbr_pay#0": "uint64"
      },
      "block": "fund_box_storage_mbr",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "527": {
      "op": "txn Sender"
    },
    "529": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "531": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "532": {
      "error": "Transaction sender must match creator address.",
      "op": "assert // Transaction sender must match creator address.",
      "stack_out": []
    },
    "533": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbr_pay#0 (copy)"
      ],
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "535": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "537": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "539": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "540": {
      "error": "MBR payment sender address must match the App creator address.",
      "op": "assert // MBR payment sender address must match the App creator address.",
      "stack_out": []
    },
    "541": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "543": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "545": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "547": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "548": {
      "error": "MBR payment reciever address must match the App address.",
      "op": "assert // MBR payment reciever address must match the App address.",
      "stack_out": []
    },
    "549": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "551": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "553": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.calc_box_storage_mbr",
      "op": "callsub calc_box_storage_mbr",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "556": {
      "op": ">=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "557": {
      "error": "MBR payment must meet the minimum requirement amount.",
      "op": "assert // MBR payment must meet the minimum requirement amount.",
      "stack_out": []
    },
    "558": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "560": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "562": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "563": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%13#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%13#0"
      ]
    },
    "565": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.calc_box_storage_mbr",
      "op": "callsub calc_box_storage_mbr",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "568": {
      "op": "+",
      "defined_out": [
        "tmp%15#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%15#0"
      ]
    },
    "569": {
      "op": ">=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "570": {
      "error": "App address balance must be equal or greater than Global.min_balance + Box Storage MBR amount.",
      "op": "assert // App address balance must be equal or greater than Global.min_balance + Box Storage MBR amount.",
      "stack_out": []
    },
    "571": {
      "op": "bytec_0 // 0x615f"
    },
    "572": {
      "op": "global CreatorAddress",
      "defined_out": [
        "0x615f",
        "tmp%17#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%17#0"
      ]
    },
    "574": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "575": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "576": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "578": {
      "op": "bnz fund_box_storage_mbr_after_if_else@2",
      "stack_out": []
    },
    "581": {
      "op": "bytec_0 // 0x615f"
    },
    "582": {
      "op": "global CreatorAddress",
      "defined_out": [
        "0x615f",
        "tmp%19#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%19#0"
      ]
    },
    "584": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "585": {
      "op": "bytec 6 // 0x0000",
      "defined_out": [
        "0x0000",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0x0000"
      ]
    },
    "587": {
      "op": "box_put",
      "stack_out": []
    },
    "588": {
      "block": "fund_box_storage_mbr_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "589": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.calc_box_storage_mbr",
      "params": {},
      "block": "calc_box_storage_mbr",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "592": {
      "op": "pushbytess 0x22 0x02 // 0x22, 0x02",
      "defined_out": [
        "0x02",
        "0x22"
      ],
      "stack_out": [
        "0x22",
        "0x02"
      ]
    },
    "598": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "box_a#0"
      ],
      "stack_out": [
        "box_a#0"
      ]
    },
    "601": {
      "retsub": true,
      "op": "retsub"
    },
    "602": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.calc_single_box_fee",
      "params": {
        "key_size#0": "bytes",
        "value_size#0": "bytes"
      },
      "block": "calc_single_box_fee",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "605": {
      "op": "frame_dig -2",
      "defined_out": [
        "key_size#0 (copy)"
      ],
      "stack_out": [
        "key_size#0 (copy)"
      ]
    },
    "607": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "608": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ]
    },
    "610": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "611": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "612": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "400"
      ]
    },
    "615": {
      "op": "*",
      "defined_out": [
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0"
      ]
    },
    "616": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0",
        "2500"
      ]
    },
    "619": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "620": {
      "retsub": true,
      "op": "retsub"
    },
    "621": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.request_box",
      "params": {
        "box_pay#0": "uint64"
      },
      "block": "request_box",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "624": {
      "op": "bytec_0 // 0x615f"
    },
    "625": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%0#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%0#0"
      ]
    },
    "627": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "628": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "629": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "631": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "632": {
      "error": "Transaction sender must match creator address.",
      "op": "assert // Transaction sender must match creator address.",
      "stack_out": []
    },
    "633": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_pay#0 (copy)"
      ],
      "stack_out": [
        "box_pay#0 (copy)"
      ]
    },
    "635": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "637": {
      "op": "bytec_0 // 0x615f",
      "stack_out": [
        "tmp%3#0",
        "0x615f"
      ]
    },
    "638": {
      "op": "swap",
      "stack_out": [
        "0x615f",
        "tmp%3#0"
      ]
    },
    "639": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "640": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "641": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "643": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "644": {
      "error": "Box payment sender address must match the App creator address.",
      "op": "assert // Box payment sender address must match the App creator address.",
      "stack_out": []
    },
    "645": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_pay#0 (copy)"
      ]
    },
    "647": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "649": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "651": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "652": {
      "error": "MBR payment reciever address must match the App address.",
      "op": "assert // MBR payment reciever address must match the App address.",
      "stack_out": []
    },
    "653": {
      "op": "frame_dig -1",
      "stack_out": [
        "box_pay#0 (copy)"
      ]
    },
    "655": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "657": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.calc_box_storage_mbr",
      "op": "callsub calc_box_storage_mbr",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "660": {
      "op": ">=",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "661": {
      "error": "MBR payment must meet the minimum requirement amount.",
      "op": "assert // MBR payment must meet the minimum requirement amount.",
      "stack_out": []
    },
    "662": {
      "op": "bytec_0 // 0x615f"
    },
    "663": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%12#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%12#0"
      ]
    },
    "665": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "666": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "667": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "669": {
      "op": "bnz request_box_after_if_else@2",
      "stack_out": []
    },
    "672": {
      "op": "bytec_0 // 0x615f"
    },
    "673": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%14#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%14#0"
      ]
    },
    "675": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "676": {
      "op": "bytec 6 // 0x0000",
      "defined_out": [
        "0x0000",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0x0000"
      ]
    },
    "678": {
      "op": "box_put",
      "stack_out": []
    },
    "679": {
      "block": "request_box_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "680": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.submit_vote",
      "params": {
        "choice#0": "bytes"
      },
      "block": "submit_vote",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "683": {
      "op": "bytec_0 // 0x615f"
    },
    "684": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%0#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%0#0"
      ]
    },
    "686": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "687": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "688": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "690": {
      "error": "Account not found as key in voter data box.",
      "op": "assert // Account not found as key in voter data box.",
      "stack_out": []
    },
    "691": {
      "op": "bytec_0 // 0x615f"
    },
    "692": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%2#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%2#0"
      ]
    },
    "694": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "695": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "696": {
      "error": "check self.box_a_voter_data entry exists",
      "op": "assert // check self.box_a_voter_data entry exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "697": {
      "op": "extract 0 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "700": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x00"
      ]
    },
    "703": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "704": {
      "op": "bytec_0 // 0x615f"
    },
    "705": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x615f",
        "tmp%5#0"
      ]
    },
    "707": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "708": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "709": {
      "error": "check self.box_a_voter_data entry exists",
      "op": "assert // check self.box_a_voter_data entry exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%2#0"
      ]
    },
    "710": {
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "713": {
      "op": "pushbytes 0x00",
      "stack_out": [
        "tmp%4#0",
        "reinterpret_biguint%2#0",
        "0x00"
      ]
    },
    "716": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "717": {
      "op": "&&",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "718": {
      "error": "Account already submitted a vote.",
      "op": "assert // Account already submitted a vote.",
      "stack_out": []
    },
    "719": {
      "op": "frame_dig -1",
      "defined_out": [
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)"
      ]
    },
    "721": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)",
        "0x01"
      ]
    },
    "724": {
      "op": "b==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "725": {
      "op": "bnz submit_vote_bool_true@3",
      "stack_out": []
    },
    "728": {
      "op": "frame_dig -1",
      "stack_out": [
        "choice#0 (copy)"
      ]
    },
    "730": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)",
        "0x02"
      ]
    },
    "733": {
      "op": "b==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "734": {
      "op": "bnz submit_vote_bool_true@3",
      "stack_out": []
    },
    "737": {
      "op": "frame_dig -1",
      "stack_out": [
        "choice#0 (copy)"
      ]
    },
    "739": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "0x03",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)",
        "0x03"
      ]
    },
    "742": {
      "op": "b==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "743": {
      "op": "bz submit_vote_bool_false@4",
      "stack_out": []
    },
    "746": {
      "block": "submit_vote_bool_true@3",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "747": {
      "op": "b submit_vote_bool_merge@5"
    },
    "750": {
      "block": "submit_vote_bool_false@4",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "751": {
      "block": "submit_vote_bool_merge@5",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "Invalid choice. Can only choose between choices 1, 2, 3.",
      "op": "assert // Invalid choice. Can only choose between choices 1, 2, 3.",
      "defined_out": [],
      "stack_out": []
    },
    "752": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "755": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x01",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "0x01",
        "choice#0 (copy)"
      ]
    },
    "757": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "758": {
      "op": "bytec_0 // 0x615f"
    },
    "759": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "encoded_tuple_buffer%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x615f",
        "tmp%12#0"
      ]
    },
    "761": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%13#0"
      ]
    },
    "762": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "763": {
      "op": "box_put",
      "stack_out": []
    },
    "764": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "765": {
      "op": "itob",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "766": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%14#0",
        "choice#0 (copy)"
      ]
    },
    "768": {
      "op": "b==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "769": {
      "op": "bz submit_vote_else_body@7",
      "stack_out": []
    },
    "772": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "773": {
      "op": "bytec_2 // \"choice1_total\"",
      "defined_out": [
        "\"choice1_total\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"choice1_total\""
      ]
    },
    "774": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "775": {
      "error": "check self.choice1_total exists",
      "op": "assert // check self.choice1_total exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "776": {
      "op": "intc_0 // 1",
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "777": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "778": {
      "op": "bytec_2 // \"choice1_total\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"choice1_total\""
      ]
    },
    "779": {
      "op": "swap",
      "stack_out": [
        "\"choice1_total\"",
        "new_state_value%0#0"
      ]
    },
    "780": {
      "op": "app_global_put",
      "stack_out": []
    },
    "781": {
      "op": "b submit_vote_after_if_else@11"
    },
    "784": {
      "block": "submit_vote_else_body@7",
      "stack_in": [],
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "786": {
      "op": "itob",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "787": {
      "op": "frame_dig -1",
      "defined_out": [
        "choice#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "choice#0 (copy)"
      ]
    },
    "789": {
      "op": "b==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "790": {
      "op": "bz submit_vote_else_body@9",
      "stack_out": []
    },
    "793": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "794": {
      "op": "bytec_3 // \"choice2_total\"",
      "defined_out": [
        "\"choice2_total\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"choice2_total\""
      ]
    },
    "795": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "796": {
      "error": "check self.choice2_total exists",
      "op": "assert // check self.choice2_total exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "797": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "1"
      ]
    },
    "798": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "799": {
      "op": "bytec_3 // \"choice2_total\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"choice2_total\""
      ]
    },
    "800": {
      "op": "swap",
      "stack_out": [
        "\"choice2_total\"",
        "new_state_value%1#0"
      ]
    },
    "801": {
      "op": "app_global_put",
      "stack_out": []
    },
    "802": {
      "op": "b submit_vote_after_if_else@11"
    },
    "805": {
      "block": "submit_vote_else_body@9",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "806": {
      "op": "bytec 4 // \"choice3_total\"",
      "defined_out": [
        "\"choice3_total\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"choice3_total\""
      ]
    },
    "808": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "809": {
      "error": "check self.choice3_total exists",
      "op": "assert // check self.choice3_total exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "810": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "1"
      ]
    },
    "811": {
      "op": "+",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "812": {
      "op": "bytec 4 // \"choice3_total\"",
      "stack_out": [
        "new_state_value%2#0",
        "\"choice3_total\""
      ]
    },
    "814": {
      "op": "swap",
      "stack_out": [
        "\"choice3_total\"",
        "new_state_value%2#0"
      ]
    },
    "815": {
      "op": "app_global_put",
      "stack_out": []
    },
    "816": {
      "block": "submit_vote_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "817": {
      "op": "bytec 5 // \"total_votes\"",
      "defined_out": [
        "\"total_votes\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_votes\""
      ]
    },
    "819": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "820": {
      "error": "check self.total_votes exists",
      "op": "assert // check self.total_votes exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "821": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "1"
      ]
    },
    "822": {
      "op": "+",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "823": {
      "op": "bytec 5 // \"total_votes\"",
      "stack_out": [
        "new_state_value%3#0",
        "\"total_votes\""
      ]
    },
    "825": {
      "op": "swap",
      "stack_out": [
        "\"total_votes\"",
        "new_state_value%3#0"
      ]
    },
    "826": {
      "op": "app_global_put",
      "stack_out": []
    },
    "827": {
      "retsub": true,
      "op": "retsub"
    },
    "828": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.terminate",
      "params": {},
      "block": "terminate",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "831": {
      "op": "txn Sender"
    },
    "833": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "835": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "836": {
      "error": "Only App creator can terminate the App.",
      "op": "assert // Only App creator can terminate the App.",
      "stack_out": []
    },
    "837": {
      "op": "intc 4 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE"
      ]
    },
    "839": {
      "error": "Template variable 'DELETABLE' needs to be set to 'true' at deploy-time.",
      "op": "assert // Template variable 'DELETABLE' needs to be set to 'true' at deploy-time.",
      "stack_out": []
    },
    "840": {
      "retsub": true,
      "op": "retsub"
    }
  }
}