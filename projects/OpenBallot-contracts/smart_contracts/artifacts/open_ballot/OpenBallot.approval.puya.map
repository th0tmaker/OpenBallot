{
  "version": 3,
  "sources": [
    "../../open_ballot/contract.py"
  ],
  "mappings": "AAwBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;AAyXK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAnCA;;AAAA;AAAA;AAAA;;AAAA;AAtVL;;;AAsVK;;;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AArDA;;AAAA;AAAA;AAAA;;AAAA;AA1PL;;;AA0PK;;;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AAxNL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwNK;;;AAAA;;AAzCA;;AAAA;AAAA;AAAA;;AAAA;AA/KL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+KK;;;AAAA;;AA5DA;;AAAA;AAAA;AAAA;;AAAA;AAnHL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAmHK;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAEU;;AAFV;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAL;;;AAIY;;AAAc;;AAAd;AADJ;AAIO;;AAAA;;AAAA;AACH;;AAzCG;;;;AAyCH;AADG;AAAP;AAQA;AAAsB;AAAtB;AAEA;AAAqB;AAArB;AACA;;AAAqB;AAArB;AACA;;AAAqB;AAArB;AAEA;AAA2B;AAA3B;;AAUR;;;AAYY;;AAAc;;AAAd;AADJ;AAIO;;AAAA;AAAgB;;AAAhB;AAAP;AAKI;;AAAA;AAAkB;;AAAlB;AAAA;;;AACI;;AAAA;AAAkB;;AAAlB;AADJ;;;AAEI;;AAAA;AAAkB;;AAAlB;AAFJ;;;;AADJ;AAeI;;AAAA;;AAAA;AADJ;AAIwB;;AAAkB;;;;AAAlB;AAAjB;;AAAA;AAAP;AAIO;;AAAA;;AAAA;AAAmC;;;;AAAnC;AAAP;AAIO;AAAA;AAAA;AAAA;AAAA;AAAP;AAGA;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AAGA;AAAsB;AAAtB;;;;;;AAIR;;;AAIY;;AAAc;;AAAd;AADJ;AAKsB;AAAlB;;AAAA;AAAA;AAAA;;AAAA;AADJ;AAKI;;AAAA;;AAAkB;;AAAlB;AADJ;AAKI;;AAAA;;AAAoB;;AAApB;AADJ;AAKI;;AAAA;;AAhIG;AAgIH;AADJ;AAKO;;AAAA;;AAAA;AACH;;AArIG;AAqIH;AADG;AAAP;AAKI;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AADJ;AAMiC;AAA9B;;AAAA;AAAA;AAAA;;AAAA;;;AACC;AAAsB;;AAAtB;AAAgD;;AAAhD;;AAMZ;;;AAIY;;AAAc;;AAAd;AADJ;AAKsB;AAAlB;;AAAA;AAAA;AAAA;;AAAA;AADJ;AAKI;;AAAA;;AAAsB;AAAtB;AAAA;AAAA;AAAA;;AAAA;AADJ;AAKI;;AAAA;;AAAoB;;AAApB;AADJ;AAKI;;AAAA;;AAzKG;AAyKH;AADJ;AAKI;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AADJ;AAMqB;AAAlB;;AAAA;AAAA;AAAA;;AAAA;;;AACC;AAAsB;;AAAtB;AAAoC;;AAApC;;AAIZ;;;AAI0B;AAAd;;AAAA;AAAA;AAAA;;AADJ;AAKI;AAAsB;;AAAtB;AAAA;AAAA;AAAA;;;AAGA;;;AAJG;AAEH;AAAsB;;AAAtB;AAAA;AAAA;AAAA;;;AAGA;;;AALG;AAAA;AAAP;AASI;;AAAU;;;AAAV;AAAA;;;AACG;;AAAU;;;AAAV;AADH;;;AAEG;;AAAU;;;AAAV;AAFH;;;;AADJ;AA0B8C;;;AAAV;;AAAA;AAApC;AAAsB;;AAAtB;AAAA;AAAA;AAGa;AAAV;AAAA;;AAAA;AAAX;;;AACY;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAA;AAAA;AAAA;;AACW;;AAAV;AAAA;;AAAA;AAAb;;;AACY;AAAA;;AAAA;AAAA;AAAsB;AAAtB;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAsB;AAAtB;AAAA;;AAAA;AAAA;;;;;;AAIZ;;;AAIY;;AAAc;;AAAd;AADJ;AAKkB;AAAd;;AAAA;AAAA;AAAA;;AADJ;AAUI;AAAsB;;AAAtB;AAAJ;;AAI8B;AACnB;;AACE;;AAGJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFE;;;;;;;;;AAHmB;;;AADhB;;;AACgB;;;;;AASY;;AAAtC;AADJ;AAK4C;;AAAxC;AADJ;;AAMR;;;;;AAIY;;AAAc;;AAAd;AADJ;AASI;;AAAA;AAAA;AAAA;AAAA;;;AAAwB;;AAAkB;;AAAlB;AAAxB;;;;AADJ;;;;AAKR;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAGkC;AAAlB;;AAAA;AAAA;AAAA;AAAA;;AADJ;AAKsB;;AAAlB;;AAAA;AADJ;AAIA;;AAGA;AAAA;AAAA;AAAA;AAA4B;AAA5B;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAMZ;;;;;AAGe;;AAAP;AAKI;;AAAc;;AAAd;AADJ;AAK8B;AAA1B;;AAAA;AAAA;AAAA;;AADJ;AAQI;AACA;;AADA;AAAJ;;AAMG;AAAA;AAAA;AAAA;AAAX;;;AAEkC;AACX;;AACE;;AAEL;AAAA;AAAA;AAAA;AArVL;AAqVK;AAPE;AAOF;AAGe;;AAEf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AATc;;;AAHZ;;;AAGY;;;;;;;;;;;AAwBQ;;AAA9B;AADJ;AAKI;;AAAA;;AAAA;AAAA;;;AACI;;AAA0C;;AAA1C;AADJ;;;;AADJ;;;;;;AAb0B;AACX;;AACE;;AAGU;AACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHE;;;;;;;AAHW;;;AAjBZ;;;AAiBY;;;;;;;;;;;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "2": {
      "op": "bz main_after_if_else@14",
      "stack_out": []
    },
    "5": {
      "op": "pushbytess 0x5be219f0 0x81e1658f 0xe6bf4f23 0xfe7b6e39 0x8c2ecf22 0x761dd0fa 0x6e0b83b9 0xbdefdf45 0x5ff16da4 // method \"generate()void\", method \"get_version_unix()uint64\", method \"set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void\", method \"fund_app_mbr(pay)void\", method \"request_box_storage(pay)void\", method \"submit_vote(uint8)void\", method \"delete_box_storage()void\", method \"purge_box_storage(address[])void\", method \"terminate()void\""
    },
    "52": {
      "op": "txna ApplicationArgs 0"
    },
    "55": {
      "op": "match main_generate_route@5 main_get_version_unix_route@6 main_set_poll_route@7 main_fund_app_mbr_route@8 main_request_box_storage_route@9 main_submit_vote_route@10 main_delete_box_storage_route@11 main_purge_box_storage_route@12 main_terminate_route@13"
    },
    "75": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "76": {
      "op": "return"
    },
    "77": {
      "block": "main_terminate_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "79": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "DeleteApplication"
      ]
    },
    "81": {
      "op": "==",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "82": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "83": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "85": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "86": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.terminate",
      "op": "callsub terminate"
    },
    "89": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "90": {
      "op": "return"
    },
    "91": {
      "block": "main_purge_box_storage_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "93": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "94": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "95": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "97": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "98": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "101": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.purge_box_storage",
      "op": "callsub purge_box_storage",
      "stack_out": []
    },
    "104": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "105": {
      "op": "return"
    },
    "106": {
      "block": "main_delete_box_storage_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "108": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "109": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "110": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "112": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "113": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.delete_box_storage",
      "op": "callsub delete_box_storage"
    },
    "116": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "117": {
      "op": "return"
    },
    "118": {
      "block": "main_submit_vote_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "120": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "121": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "122": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "124": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "125": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "128": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.submit_vote",
      "op": "callsub submit_vote",
      "stack_out": []
    },
    "131": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "132": {
      "op": "return"
    },
    "133": {
      "block": "main_request_box_storage_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "135": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "136": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "137": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "139": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "140": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "142": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "1"
      ]
    },
    "143": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "144": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "145": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "147": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "148": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "149": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "150": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.request_box_storage",
      "op": "callsub request_box_storage",
      "stack_out": []
    },
    "153": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "154": {
      "op": "return"
    },
    "155": {
      "block": "main_fund_app_mbr_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "157": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "158": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "159": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "161": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "162": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "164": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "1"
      ]
    },
    "165": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "166": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "167": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "169": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "170": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "171": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "172": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.fund_app_mbr",
      "op": "callsub fund_app_mbr",
      "stack_out": []
    },
    "175": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "176": {
      "op": "return"
    },
    "177": {
      "block": "main_set_poll_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "179": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "180": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "181": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "183": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "184": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "187": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "190": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "193": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "196": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "199": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "202": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "205": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "208": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "211": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "212": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "215": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ]
    },
    "216": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.set_poll",
      "op": "callsub set_poll",
      "stack_out": []
    },
    "219": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "220": {
      "op": "return"
    },
    "221": {
      "block": "main_get_version_unix_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "223": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "224": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "225": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "227": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "228": {
      "op": "intc 4 // TMPL_VERSION_UNIX",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "230": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "231": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "237": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "238": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "239": {
      "op": "log",
      "stack_out": []
    },
    "240": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "241": {
      "op": "return"
    },
    "242": {
      "block": "main_generate_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "244": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "245": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "246": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "248": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "249": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "250": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.generate",
      "op": "callsub generate"
    },
    "253": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "254": {
      "op": "return"
    },
    "255": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.generate",
      "params": {},
      "block": "generate",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "258": {
      "op": "txn Sender"
    },
    "260": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "262": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "263": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "264": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "266": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "268": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "269": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%4#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%4#0"
      ]
    },
    "271": {
      "op": "pushint 499500 // 499500",
      "defined_out": [
        "499500",
        "tmp%4#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%4#0",
        "499500"
      ]
    },
    "275": {
      "op": "+",
      "defined_out": [
        "tmp%6#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%6#0"
      ]
    },
    "276": {
      "op": ">=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "277": {
      "error": "Application creator address balance must be equal or greater than Global.min_balance + Global schema MBR.",
      "op": "assert // Application creator address balance must be equal or greater than Global.min_balance + Global schema MBR.",
      "stack_out": []
    },
    "278": {
      "op": "bytec_2 // \"poll_finalized\"",
      "defined_out": [
        "\"poll_finalized\""
      ],
      "stack_out": [
        "\"poll_finalized\""
      ]
    },
    "279": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"poll_finalized\"",
        "0"
      ],
      "stack_out": [
        "\"poll_finalized\"",
        "0"
      ]
    },
    "280": {
      "op": "app_global_put",
      "stack_out": []
    },
    "281": {
      "op": "bytec_3 // \"total_choice1\"",
      "defined_out": [
        "\"total_choice1\""
      ],
      "stack_out": [
        "\"total_choice1\""
      ]
    },
    "282": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_choice1\"",
        "0"
      ]
    },
    "283": {
      "op": "app_global_put",
      "stack_out": []
    },
    "284": {
      "op": "bytec 4 // \"total_choice2\"",
      "defined_out": [
        "\"total_choice2\""
      ],
      "stack_out": [
        "\"total_choice2\""
      ]
    },
    "286": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_choice2\"",
        "0"
      ]
    },
    "287": {
      "op": "app_global_put",
      "stack_out": []
    },
    "288": {
      "op": "bytec 5 // \"total_choice3\"",
      "defined_out": [
        "\"total_choice3\""
      ],
      "stack_out": [
        "\"total_choice3\""
      ]
    },
    "290": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_choice3\"",
        "0"
      ]
    },
    "291": {
      "op": "app_global_put",
      "stack_out": []
    },
    "292": {
      "op": "bytec_1 // \"total_purged_box_a_\"",
      "defined_out": [
        "\"total_purged_box_a_\""
      ],
      "stack_out": [
        "\"total_purged_box_a_\""
      ]
    },
    "293": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_purged_box_a_\"",
        "0"
      ]
    },
    "294": {
      "op": "app_global_put",
      "stack_out": []
    },
    "295": {
      "retsub": true,
      "op": "retsub"
    },
    "296": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.set_poll",
      "params": {
        "title#0": "bytes",
        "choice1#0": "bytes",
        "choice2#0": "bytes",
        "choice3#0": "bytes",
        "start_date_unix#0": "uint64",
        "end_date_unix#0": "uint64"
      },
      "block": "set_poll",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "299": {
      "op": "txn Sender"
    },
    "301": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "303": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "304": {
      "error": "Only application creator can set up poll.",
      "op": "assert // Only application creator can set up poll.",
      "stack_out": []
    },
    "305": {
      "op": "frame_dig -6",
      "defined_out": [
        "title#0 (copy)"
      ],
      "stack_out": [
        "title#0 (copy)"
      ]
    },
    "307": {
      "op": "len",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "308": {
      "op": "pushint 118 // 118",
      "defined_out": [
        "118",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "118"
      ]
    },
    "310": {
      "op": "<=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "311": {
      "error": "Poll title size can not exceed 118 bytes of data per key-value.",
      "op": "assert // Poll title size can not exceed 118 bytes of data per key-value.",
      "stack_out": []
    },
    "312": {
      "op": "frame_dig -5",
      "defined_out": [
        "choice1#0 (copy)"
      ],
      "stack_out": [
        "choice1#0 (copy)"
      ]
    },
    "314": {
      "op": "len",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "315": {
      "op": "pushint 116 // 116",
      "defined_out": [
        "116",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "116"
      ]
    },
    "317": {
      "op": "<=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "318": {
      "op": "bz set_poll_bool_false@4",
      "stack_out": []
    },
    "321": {
      "op": "frame_dig -4"
    },
    "323": {
      "op": "len"
    },
    "324": {
      "op": "pushint 116 // 116"
    },
    "326": {
      "op": "<="
    },
    "327": {
      "op": "bz set_poll_bool_false@4"
    },
    "330": {
      "op": "frame_dig -3"
    },
    "332": {
      "op": "len"
    },
    "333": {
      "op": "pushint 116 // 116"
    },
    "335": {
      "op": "<="
    },
    "336": {
      "op": "bz set_poll_bool_false@4"
    },
    "339": {
      "op": "intc_0 // 1"
    },
    "340": {
      "block": "set_poll_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "Poll choice size cannot exceed 116 bytes of data per key-value.",
      "op": "assert // Poll choice size cannot exceed 116 bytes of data per key-value.",
      "defined_out": [],
      "stack_out": []
    },
    "341": {
      "op": "frame_dig -2",
      "defined_out": [
        "start_date_unix#0 (copy)"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)"
      ]
    },
    "343": {
      "op": "frame_dig -1",
      "defined_out": [
        "end_date_unix#0 (copy)",
        "start_date_unix#0 (copy)"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)",
        "end_date_unix#0 (copy)"
      ]
    },
    "345": {
      "op": "<",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "346": {
      "error": "Start date must be earlier than end date.",
      "op": "assert // Start date must be earlier than end date.",
      "stack_out": []
    },
    "347": {
      "op": "frame_dig -2",
      "stack_out": [
        "start_date_unix#0 (copy)"
      ]
    },
    "349": {
      "op": "pushint 259200 // 259200",
      "defined_out": [
        "259200",
        "start_date_unix#0 (copy)"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)",
        "259200"
      ]
    },
    "353": {
      "op": "+",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "354": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "end_date_unix#0 (copy)"
      ]
    },
    "356": {
      "op": "<=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "357": {
      "error": "End date must be at least 3 days later than the start date.",
      "op": "assert // End date must be at least 3 days later than the start date.",
      "stack_out": []
    },
    "358": {
      "op": "frame_dig -1",
      "stack_out": [
        "end_date_unix#0 (copy)"
      ]
    },
    "360": {
      "op": "frame_dig -2",
      "stack_out": [
        "end_date_unix#0 (copy)",
        "start_date_unix#0 (copy)"
      ]
    },
    "362": {
      "op": "-",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "363": {
      "op": "pushint 1209600 // 1209600",
      "defined_out": [
        "1209600",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1209600"
      ]
    },
    "367": {
      "op": "<=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "368": {
      "error": "Voting period can not exceed 14 days.",
      "op": "assert // Voting period can not exceed 14 days.",
      "stack_out": []
    },
    "369": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "370": {
      "op": "bytec_2 // \"poll_finalized\"",
      "defined_out": [
        "\"poll_finalized\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"poll_finalized\""
      ]
    },
    "371": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "372": {
      "error": "check self.poll_finalized exists",
      "op": "assert // check self.poll_finalized exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "373": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "374": {
      "error": "Poll can only be setup once.",
      "op": "assert // Poll can only be setup once.",
      "stack_out": []
    },
    "375": {
      "op": "pushbytes \"poll_title\"",
      "defined_out": [
        "\"poll_title\""
      ],
      "stack_out": [
        "\"poll_title\""
      ]
    },
    "387": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"poll_title\"",
        "title#0 (copy)"
      ],
      "stack_out": [
        "\"poll_title\"",
        "title#0 (copy)"
      ]
    },
    "389": {
      "op": "app_global_put",
      "stack_out": []
    },
    "390": {
      "op": "pushbytes \"poll_choice1\"",
      "defined_out": [
        "\"poll_choice1\""
      ],
      "stack_out": [
        "\"poll_choice1\""
      ]
    },
    "404": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"poll_choice1\"",
        "choice1#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice1\"",
        "choice1#0 (copy)"
      ]
    },
    "406": {
      "op": "app_global_put",
      "stack_out": []
    },
    "407": {
      "op": "pushbytes \"poll_choice2\"",
      "defined_out": [
        "\"poll_choice2\""
      ],
      "stack_out": [
        "\"poll_choice2\""
      ]
    },
    "421": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"poll_choice2\"",
        "choice2#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice2\"",
        "choice2#0 (copy)"
      ]
    },
    "423": {
      "op": "app_global_put",
      "stack_out": []
    },
    "424": {
      "op": "pushbytes \"poll_choice3\"",
      "defined_out": [
        "\"poll_choice3\""
      ],
      "stack_out": [
        "\"poll_choice3\""
      ]
    },
    "438": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"poll_choice3\"",
        "choice3#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice3\"",
        "choice3#0 (copy)"
      ]
    },
    "440": {
      "op": "app_global_put",
      "stack_out": []
    },
    "441": {
      "op": "pushbytes \"poll_start_date_unix\"",
      "defined_out": [
        "\"poll_start_date_unix\""
      ],
      "stack_out": [
        "\"poll_start_date_unix\""
      ]
    },
    "463": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"poll_start_date_unix\"",
        "start_date_unix#0 (copy)"
      ]
    },
    "465": {
      "op": "app_global_put",
      "stack_out": []
    },
    "466": {
      "op": "bytec 6 // \"poll_end_date_unix\"",
      "defined_out": [
        "\"poll_end_date_unix\""
      ],
      "stack_out": [
        "\"poll_end_date_unix\""
      ]
    },
    "468": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"poll_end_date_unix\"",
        "end_date_unix#0 (copy)"
      ]
    },
    "470": {
      "op": "app_global_put",
      "stack_out": []
    },
    "471": {
      "op": "bytec_2 // \"poll_finalized\"",
      "stack_out": [
        "\"poll_finalized\""
      ]
    },
    "472": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"poll_finalized\"",
        "1"
      ],
      "stack_out": [
        "\"poll_finalized\"",
        "1"
      ]
    },
    "473": {
      "op": "app_global_put",
      "stack_out": []
    },
    "474": {
      "retsub": true,
      "op": "retsub"
    },
    "475": {
      "block": "set_poll_bool_false@4",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "476": {
      "op": "b set_poll_bool_merge@5"
    },
    "479": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.fund_app_mbr",
      "params": {
        "mbr_pay#0": "uint64"
      },
      "block": "fund_app_mbr",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "482": {
      "op": "txn Sender"
    },
    "484": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "486": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "487": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "488": {
      "op": "bytec_0 // 0x615f"
    },
    "489": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%3#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%3#0"
      ]
    },
    "491": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "492": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "493": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "495": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "496": {
      "error": "Transaction sender address already present in box a_.",
      "op": "assert // Transaction sender address already present in box a_.",
      "stack_out": []
    },
    "497": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbr_pay#0 (copy)"
      ],
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "499": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "501": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "503": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "504": {
      "error": "MBR payment sender address must match appplication creator address.",
      "op": "assert // MBR payment sender address must match appplication creator address.",
      "stack_out": []
    },
    "505": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "507": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "509": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "511": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "512": {
      "error": "MBR payment reciever address must match application address.",
      "op": "assert // MBR payment reciever address must match application address.",
      "stack_out": []
    },
    "513": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "515": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "517": {
      "op": "intc_2 // 16900",
      "defined_out": [
        "16900",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "16900"
      ]
    },
    "518": {
      "op": ">=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "519": {
      "error": "MBR payment for box storage must meet the minimum requirement amount.",
      "op": "assert // MBR payment for box storage must meet the minimum requirement amount.",
      "stack_out": []
    },
    "520": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "522": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "524": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "525": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%16#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%16#0"
      ]
    },
    "527": {
      "op": "intc_2 // 16900",
      "stack_out": [
        "value%0#0",
        "tmp%16#0",
        "16900"
      ]
    },
    "528": {
      "op": "+",
      "defined_out": [
        "tmp%18#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%18#0"
      ]
    },
    "529": {
      "op": ">=",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "530": {
      "error": "Application address balance must be equal or greater than Global.min_balance + Box storage fee.",
      "op": "assert // Application address balance must be equal or greater than Global.min_balance + Box storage fee.",
      "stack_out": []
    },
    "531": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "533": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "534": {
      "op": "bytec 6 // \"poll_end_date_unix\"",
      "defined_out": [
        "\"poll_end_date_unix\"",
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0",
        "\"poll_end_date_unix\""
      ]
    },
    "536": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "537": {
      "error": "check self.poll_end_date_unix exists",
      "op": "assert // check self.poll_end_date_unix exists",
      "stack_out": [
        "tmp%20#0",
        "maybe_value%1#0"
      ]
    },
    "538": {
      "op": "<=",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "539": {
      "error": "Unable to fund app mbr if voting period is over.",
      "op": "assert // Unable to fund app mbr if voting period is over.",
      "stack_out": []
    },
    "540": {
      "op": "bytec_0 // 0x615f"
    },
    "541": {
      "op": "global CreatorAddress",
      "defined_out": [
        "0x615f",
        "tmp%22#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%22#0"
      ]
    },
    "543": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "544": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "545": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "547": {
      "op": "bnz fund_app_mbr_after_if_else@2",
      "stack_out": []
    },
    "550": {
      "op": "bytec_0 // 0x615f"
    },
    "551": {
      "op": "global CreatorAddress"
    },
    "553": {
      "op": "concat"
    },
    "554": {
      "op": "bytec 7 // 0x0000"
    },
    "556": {
      "op": "box_put"
    },
    "557": {
      "block": "fund_app_mbr_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "558": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.request_box_storage",
      "params": {
        "mbr_pay#0": "uint64"
      },
      "block": "request_box_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "561": {
      "op": "txn Sender"
    },
    "563": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "565": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "566": {
      "error": "Invalid sender address! Application creator address can not use request box storage method.",
      "op": "assert // Invalid sender address! Application creator address can not use request box storage method.",
      "stack_out": []
    },
    "567": {
      "op": "bytec_0 // 0x615f"
    },
    "568": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%3#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%3#0"
      ]
    },
    "570": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "571": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "572": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "574": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "575": {
      "error": "Transaction sender address must not be present in box a_.",
      "op": "assert // Transaction sender address must not be present in box a_.",
      "stack_out": []
    },
    "576": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbr_pay#0 (copy)"
      ],
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "578": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "580": {
      "op": "bytec_0 // 0x615f",
      "stack_out": [
        "tmp%6#0",
        "0x615f"
      ]
    },
    "581": {
      "op": "swap",
      "stack_out": [
        "0x615f",
        "tmp%6#0"
      ]
    },
    "582": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "583": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "584": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "586": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "587": {
      "error": "Box storage MBR payment sender address must not be present in box a_.",
      "op": "assert // Box storage MBR payment sender address must not be present in box a_.",
      "stack_out": []
    },
    "588": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "590": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "592": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "594": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "595": {
      "error": "Box storage MBR payment reciever address must match application address.",
      "op": "assert // Box storage MBR payment reciever address must match application address.",
      "stack_out": []
    },
    "596": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "598": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "600": {
      "op": "intc_2 // 16900",
      "defined_out": [
        "16900",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "16900"
      ]
    },
    "601": {
      "op": ">=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "602": {
      "error": "Box storage MBR payment amount must be equal or greater than box _a fee.",
      "op": "assert // Box storage MBR payment amount must be equal or greater than box _a fee.",
      "stack_out": []
    },
    "603": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "605": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "606": {
      "op": "bytec 6 // \"poll_end_date_unix\"",
      "defined_out": [
        "\"poll_end_date_unix\"",
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0",
        "\"poll_end_date_unix\""
      ]
    },
    "608": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "609": {
      "error": "check self.poll_end_date_unix exists",
      "op": "assert // check self.poll_end_date_unix exists",
      "stack_out": [
        "tmp%15#0",
        "maybe_value%2#0"
      ]
    },
    "610": {
      "op": "<=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "611": {
      "error": "Unable to request box storage if voting period is over.",
      "op": "assert // Unable to request box storage if voting period is over.",
      "stack_out": []
    },
    "612": {
      "op": "bytec_0 // 0x615f"
    },
    "613": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%17#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%17#0"
      ]
    },
    "615": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "616": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "617": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%3#0"
      ]
    },
    "619": {
      "op": "bnz request_box_storage_after_if_else@2",
      "stack_out": []
    },
    "622": {
      "op": "bytec_0 // 0x615f"
    },
    "623": {
      "op": "txn Sender"
    },
    "625": {
      "op": "concat"
    },
    "626": {
      "op": "bytec 7 // 0x0000"
    },
    "628": {
      "op": "box_put"
    },
    "629": {
      "block": "request_box_storage_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "630": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.submit_vote",
      "params": {
        "choice#0": "bytes"
      },
      "block": "submit_vote",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "633": {
      "op": "bytec_0 // 0x615f"
    },
    "634": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%0#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%0#0"
      ]
    },
    "636": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "637": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "638": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "640": {
      "error": "Transaction sender address must be present in box a_.",
      "op": "assert // Transaction sender address must be present in box a_.",
      "stack_out": []
    },
    "641": {
      "op": "bytec_0 // 0x615f"
    },
    "642": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%2#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%2#0"
      ]
    },
    "644": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "645": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "646": {
      "error": "check self.box_a_voter_data entry exists",
      "op": "assert // check self.box_a_voter_data entry exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "647": {
      "error": "Index access is out of bounds",
      "op": "extract 0 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "650": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x00"
      ]
    },
    "653": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "654": {
      "op": "bytec_0 // 0x615f"
    },
    "655": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x615f",
        "tmp%5#0"
      ]
    },
    "657": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "658": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "659": {
      "error": "check self.box_a_voter_data entry exists",
      "op": "assert // check self.box_a_voter_data entry exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%2#0"
      ]
    },
    "660": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "663": {
      "op": "pushbytes 0x00",
      "stack_out": [
        "tmp%4#0",
        "reinterpret_biguint%2#0",
        "0x00"
      ]
    },
    "666": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "667": {
      "op": "&&",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "668": {
      "error": "Transaction sender address already submitted a vote.",
      "op": "assert // Transaction sender address already submitted a vote.",
      "stack_out": []
    },
    "669": {
      "op": "frame_dig -1",
      "defined_out": [
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)"
      ]
    },
    "671": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)",
        "0x01"
      ]
    },
    "674": {
      "op": "b==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "675": {
      "op": "bnz submit_vote_bool_true@3",
      "stack_out": []
    },
    "678": {
      "op": "frame_dig -1"
    },
    "680": {
      "op": "pushbytes 0x02"
    },
    "683": {
      "op": "b=="
    },
    "684": {
      "op": "bnz submit_vote_bool_true@3"
    },
    "687": {
      "op": "frame_dig -1"
    },
    "689": {
      "op": "pushbytes 0x03"
    },
    "692": {
      "op": "b=="
    },
    "693": {
      "op": "bz submit_vote_bool_false@4"
    },
    "696": {
      "block": "submit_vote_bool_true@3",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "697": {
      "block": "submit_vote_bool_merge@5",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "Invalid choice. Can only select choices 1, 2, 3.",
      "op": "assert // Invalid choice. Can only select choices 1, 2, 3.",
      "defined_out": [],
      "stack_out": []
    },
    "698": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "701": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x01",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "0x01",
        "choice#0 (copy)"
      ]
    },
    "703": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "704": {
      "op": "bytec_0 // 0x615f"
    },
    "705": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "encoded_tuple_buffer%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x615f",
        "tmp%12#0"
      ]
    },
    "707": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%13#0"
      ]
    },
    "708": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "709": {
      "op": "box_put",
      "stack_out": []
    },
    "710": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "711": {
      "op": "itob",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "712": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%14#0",
        "choice#0 (copy)"
      ]
    },
    "714": {
      "op": "b==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "715": {
      "op": "bz submit_vote_else_body@7",
      "stack_out": []
    },
    "718": {
      "op": "intc_1 // 0"
    },
    "719": {
      "op": "bytec_3 // \"total_choice1\""
    },
    "720": {
      "op": "app_global_get_ex"
    },
    "721": {
      "error": "check self.total_choice1 exists",
      "op": "assert // check self.total_choice1 exists"
    },
    "722": {
      "op": "intc_0 // 1"
    },
    "723": {
      "op": "+"
    },
    "724": {
      "op": "bytec_3 // \"total_choice1\""
    },
    "725": {
      "op": "swap"
    },
    "726": {
      "op": "app_global_put"
    },
    "727": {
      "retsub": true,
      "op": "retsub"
    },
    "728": {
      "block": "submit_vote_else_body@7",
      "stack_in": [],
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "730": {
      "op": "itob",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "731": {
      "op": "frame_dig -1",
      "defined_out": [
        "choice#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "choice#0 (copy)"
      ]
    },
    "733": {
      "op": "b==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "734": {
      "op": "bz submit_vote_else_body@9",
      "stack_out": []
    },
    "737": {
      "op": "intc_1 // 0"
    },
    "738": {
      "op": "bytec 4 // \"total_choice2\""
    },
    "740": {
      "op": "app_global_get_ex"
    },
    "741": {
      "error": "check self.total_choice2 exists",
      "op": "assert // check self.total_choice2 exists"
    },
    "742": {
      "op": "intc_0 // 1"
    },
    "743": {
      "op": "+"
    },
    "744": {
      "op": "bytec 4 // \"total_choice2\""
    },
    "746": {
      "op": "swap"
    },
    "747": {
      "op": "app_global_put"
    },
    "748": {
      "retsub": true,
      "op": "retsub"
    },
    "749": {
      "block": "submit_vote_else_body@9",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "750": {
      "op": "bytec 5 // \"total_choice3\"",
      "defined_out": [
        "\"total_choice3\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_choice3\""
      ]
    },
    "752": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "753": {
      "error": "check self.total_choice3 exists",
      "op": "assert // check self.total_choice3 exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "754": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "1"
      ]
    },
    "755": {
      "op": "+",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "756": {
      "op": "bytec 5 // \"total_choice3\"",
      "stack_out": [
        "new_state_value%2#0",
        "\"total_choice3\""
      ]
    },
    "758": {
      "op": "swap",
      "stack_out": [
        "\"total_choice3\"",
        "new_state_value%2#0"
      ]
    },
    "759": {
      "op": "app_global_put",
      "stack_out": []
    },
    "760": {
      "retsub": true,
      "op": "retsub"
    },
    "761": {
      "block": "submit_vote_bool_false@4",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "762": {
      "op": "b submit_vote_bool_merge@5"
    },
    "765": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.delete_box_storage",
      "params": {},
      "block": "delete_box_storage",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "768": {
      "op": "txn Sender"
    },
    "770": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "772": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "773": {
      "error": "Invalid sender address! Application creator must delete smart contract to free up their box storage MBR.",
      "op": "assert // Invalid sender address! Application creator must delete smart contract to free up their box storage MBR.",
      "stack_out": []
    },
    "774": {
      "op": "bytec_0 // 0x615f"
    },
    "775": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%3#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%3#0"
      ]
    },
    "777": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "778": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "779": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "781": {
      "error": "Transaction sender address must be present in box a_.",
      "op": "assert // Transaction sender address must be present in box a_.",
      "stack_out": []
    },
    "782": {
      "op": "bytec_0 // 0x615f"
    },
    "783": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%5#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%5#0"
      ]
    },
    "785": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "786": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "787": {
      "op": "pop",
      "stack_out": []
    },
    "788": {
      "op": "itxn_begin"
    },
    "789": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "791": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "793": {
      "op": "pushbytes \"Account gets app box storage MBR (0.0169 ALGO) refunded.\"",
      "defined_out": [
        "\"Account gets app box storage MBR (0.0169 ALGO) refunded.\"",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "\"Account gets app box storage MBR (0.0169 ALGO) refunded.\""
      ]
    },
    "851": {
      "op": "itxn_field Note",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "853": {
      "op": "pushint 15900 // 15900",
      "defined_out": [
        "15900",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "15900"
      ]
    },
    "856": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "858": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "860": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "862": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "863": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "865": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "866": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "868": {
      "op": "itxn_submit"
    },
    "869": {
      "op": "itxn Receiver"
    },
    "871": {
      "op": "itxn Sender"
    },
    "873": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "box_storage_del_refund_itxn.Sender#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "box_storage_del_refund_itxn.Sender#0",
        "tmp%8#0"
      ]
    },
    "875": {
      "op": "==",
      "defined_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "tmp%9#0"
      ]
    },
    "876": {
      "error": "box_storage_del_refund_itxn sender address must match application address.",
      "op": "assert // box_storage_del_refund_itxn sender address must match application address.",
      "stack_out": [
        "box_storage_del_refund_itxn.Receiver#0"
      ]
    },
    "877": {
      "op": "txn Sender",
      "defined_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "tmp%10#0"
      ]
    },
    "879": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "880": {
      "error": "box_storage_del_refund_itxn reciever address must match transaction sender address.",
      "op": "assert // box_storage_del_refund_itxn reciever address must match transaction sender address.",
      "stack_out": []
    },
    "881": {
      "retsub": true,
      "op": "retsub"
    },
    "882": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.purge_box_storage",
      "params": {
        "box_keys#0": "bytes"
      },
      "block": "purge_box_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "885": {
      "op": "pushbytes \"\""
    },
    "887": {
      "op": "txn Sender"
    },
    "889": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "891": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%2#0"
      ]
    },
    "892": {
      "error": "Unauthorized address! Only application creator can purge box storage.",
      "op": "assert // Unauthorized address! Only application creator can purge box storage.",
      "stack_out": [
        "item_index_internal%0#0"
      ]
    },
    "893": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_keys#0 (copy)"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "box_keys#0 (copy)"
      ]
    },
    "895": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "box_keys#0 (copy)"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "box_keys#0 (copy)",
        "0"
      ]
    },
    "896": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "897": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "898": {
      "op": "bz purge_box_storage_bool_false@3",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "901": {
      "op": "frame_dig 1"
    },
    "903": {
      "op": "pushint 9 // 9"
    },
    "905": {
      "op": "<"
    },
    "906": {
      "op": "bz purge_box_storage_bool_false@3"
    },
    "909": {
      "op": "intc_0 // 1"
    },
    "910": {
      "block": "purge_box_storage_bool_merge@4",
      "stack_in": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "and_result%0#0"
      ],
      "error": "The number of addresses represented by box keys array must be greater than 0 and lesser than 9.",
      "op": "assert // The number of addresses represented by box keys array must be greater than 0 and lesser than 9.",
      "defined_out": [],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "911": {
      "op": "intc_1 // 0",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0"
      ]
    },
    "912": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "914": {
      "block": "purge_box_storage_for_header@5",
      "stack_in": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0"
      ]
    },
    "916": {
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "918": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "continue_looping%0#0"
      ]
    },
    "919": {
      "op": "bz purge_box_storage_after_for@8",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "922": {
      "op": "frame_dig -1"
    },
    "924": {
      "op": "extract 2 0"
    },
    "927": {
      "op": "frame_dig 0"
    },
    "929": {
      "op": "dup"
    },
    "930": {
      "op": "cover 2"
    },
    "932": {
      "op": "pushint 32 // 32"
    },
    "934": {
      "op": "*"
    },
    "935": {
      "op": "pushint 32 // 32"
    },
    "937": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "938": {
      "op": "bytec_0 // 0x615f"
    },
    "939": {
      "op": "dig 1"
    },
    "941": {
      "op": "concat"
    },
    "942": {
      "op": "dup"
    },
    "943": {
      "op": "box_len"
    },
    "944": {
      "op": "bury 1"
    },
    "946": {
      "error": "Account address represented in box key must be present in box a_.",
      "op": "assert // Account address represented in box key must be present in box a_."
    },
    "947": {
      "op": "global CreatorAddress"
    },
    "949": {
      "op": "uncover 2"
    },
    "951": {
      "op": "!="
    },
    "952": {
      "error": "Account address represented in box key must not match application creator address.",
      "op": "assert // Account address represented in box key must not match application creator address."
    },
    "953": {
      "op": "box_del"
    },
    "954": {
      "op": "pop"
    },
    "955": {
      "op": "intc_1 // 0"
    },
    "956": {
      "op": "bytec_1 // \"total_purged_box_a_\""
    },
    "957": {
      "op": "app_global_get_ex"
    },
    "958": {
      "error": "check self.total_purged_box_a_ exists",
      "op": "assert // check self.total_purged_box_a_ exists"
    },
    "959": {
      "op": "intc_0 // 1"
    },
    "960": {
      "op": "+"
    },
    "961": {
      "op": "bytec_1 // \"total_purged_box_a_\""
    },
    "962": {
      "op": "swap"
    },
    "963": {
      "op": "app_global_put"
    },
    "964": {
      "op": "intc_0 // 1"
    },
    "965": {
      "op": "+"
    },
    "966": {
      "op": "frame_bury 0"
    },
    "968": {
      "op": "b purge_box_storage_for_header@5"
    },
    "971": {
      "block": "purge_box_storage_after_for@8",
      "stack_in": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "972": {
      "block": "purge_box_storage_bool_false@3",
      "stack_in": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "and_result%0#0"
      ]
    },
    "973": {
      "op": "b purge_box_storage_bool_merge@4"
    },
    "976": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.terminate",
      "params": {},
      "block": "terminate",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "979": {
      "op": "intc_1 // 0",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0"
      ]
    },
    "980": {
      "op": "dup",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ]
    },
    "981": {
      "op": "intc 5 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "TMPL_DELETABLE"
      ]
    },
    "983": {
      "error": "Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "op": "assert // Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ]
    },
    "984": {
      "op": "txn Sender"
    },
    "986": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "988": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "tmp%3#0"
      ]
    },
    "989": {
      "error": "Unauthorized address! Only application creator can delete the smart contract.",
      "op": "assert // Unauthorized address! Only application creator can delete the smart contract.",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ]
    },
    "990": {
      "op": "bytec_0 // 0x615f"
    },
    "991": {
      "op": "global CreatorAddress",
      "defined_out": [
        "0x615f",
        "tmp%4#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "0x615f",
        "tmp%4#0"
      ]
    },
    "993": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "tmp%5#0"
      ]
    },
    "994": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "995": {
      "op": "bury 1",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "maybe_exists%0#0"
      ]
    },
    "997": {
      "error": "Transaction sender address must be present in box a_.",
      "op": "assert // Transaction sender address must be present in box a_.",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ]
    },
    "998": {
      "op": "bytec_0 // 0x615f"
    },
    "999": {
      "op": "global CreatorAddress",
      "defined_out": [
        "0x615f",
        "tmp%6#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "0x615f",
        "tmp%6#0"
      ]
    },
    "1001": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "tmp%7#0"
      ]
    },
    "1002": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "{box_del}"
      ]
    },
    "1003": {
      "op": "pop",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ]
    },
    "1004": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "0"
      ]
    },
    "1005": {
      "op": "bytec_1 // \"total_purged_box_a_\"",
      "defined_out": [
        "\"total_purged_box_a_\"",
        "0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "0",
        "\"total_purged_box_a_\""
      ]
    },
    "1006": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1007": {
      "error": "check self.total_purged_box_a_ exists",
      "op": "assert // check self.total_purged_box_a_ exists",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "maybe_value%1#0"
      ]
    },
    "1008": {
      "op": "bz terminate_else_body@3",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ]
    },
    "1011": {
      "op": "itxn_begin"
    },
    "1012": {
      "op": "global CurrentApplicationAddress"
    },
    "1014": {
      "op": "global CreatorAddress"
    },
    "1016": {
      "op": "intc_1 // 0"
    },
    "1017": {
      "op": "bytec_1 // \"total_purged_box_a_\""
    },
    "1018": {
      "op": "app_global_get_ex"
    },
    "1019": {
      "error": "check self.total_purged_box_a_ exists",
      "op": "assert // check self.total_purged_box_a_ exists"
    },
    "1020": {
      "op": "intc_2 // 16900"
    },
    "1021": {
      "op": "*"
    },
    "1022": {
      "op": "intc_3 // 1000"
    },
    "1023": {
      "op": "-"
    },
    "1024": {
      "op": "global CreatorAddress"
    },
    "1026": {
      "op": "pushbytes \"Closed remainder of app balance + purged box storage amount to Creator after deletion method.\""
    },
    "1121": {
      "op": "itxn_field Note"
    },
    "1123": {
      "op": "itxn_field CloseRemainderTo"
    },
    "1125": {
      "op": "itxn_field Amount"
    },
    "1127": {
      "op": "itxn_field Receiver"
    },
    "1129": {
      "op": "itxn_field Sender"
    },
    "1131": {
      "op": "intc_0 // pay"
    },
    "1132": {
      "op": "itxn_field TypeEnum"
    },
    "1134": {
      "op": "intc_3 // 1000"
    },
    "1135": {
      "op": "itxn_field Fee"
    },
    "1137": {
      "op": "itxn_submit"
    },
    "1138": {
      "op": "itxn Sender"
    },
    "1140": {
      "op": "itxn Receiver"
    },
    "1142": {
      "op": "frame_bury 1"
    },
    "1144": {
      "op": "itxn CloseRemainderTo"
    },
    "1146": {
      "op": "frame_bury 0"
    },
    "1148": {
      "block": "terminate_after_if_else@5",
      "stack_in": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "del_app_refund_itxn.Sender#0"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "del_app_refund_itxn.Sender#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "del_app_refund_itxn.Sender#0",
        "tmp%11#0"
      ]
    },
    "1150": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "tmp%12#0"
      ]
    },
    "1151": {
      "error": "del_app_refund_itxn 'sender' address must match Application address.",
      "op": "assert // del_app_refund_itxn 'sender' address must match Application address.",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ]
    },
    "1152": {
      "op": "frame_dig 1"
    },
    "1154": {
      "op": "global ZeroAddress",
      "defined_out": [
        "del_app_refund_itxn.Receiver#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "del_app_refund_itxn.Receiver#0",
        "tmp%13#0"
      ]
    },
    "1156": {
      "op": "!=",
      "defined_out": [
        "del_app_refund_itxn.Receiver#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "tmp%14#0"
      ]
    },
    "1157": {
      "op": "bz terminate_bool_false@8",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ]
    },
    "1160": {
      "op": "frame_dig 0"
    },
    "1162": {
      "op": "global CreatorAddress"
    },
    "1164": {
      "op": "=="
    },
    "1165": {
      "op": "bz terminate_bool_false@8"
    },
    "1168": {
      "op": "intc_0 // 1"
    },
    "1169": {
      "block": "terminate_bool_merge@9",
      "stack_in": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "and_result%0#0"
      ],
      "error": "del_app_refund_itxn 'reciever' and 'close_remainder_to' address must match application Creator address.",
      "op": "assert // del_app_refund_itxn 'reciever' and 'close_remainder_to' address must match application Creator address.",
      "defined_out": [],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ]
    },
    "1170": {
      "retsub": true,
      "op": "retsub"
    },
    "1171": {
      "block": "terminate_bool_false@8",
      "stack_in": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "and_result%0#0"
      ]
    },
    "1172": {
      "op": "b terminate_bool_merge@9"
    },
    "1175": {
      "block": "terminate_else_body@3",
      "stack_in": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ],
      "op": "itxn_begin"
    },
    "1176": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ]
    },
    "1178": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "1180": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "1181": {
      "op": "pushbytes \"Closing remainder of app balance to Creator after deletion method.\"",
      "defined_out": [
        "\"Closing remainder of app balance to Creator after deletion method.\"",
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0",
        "\"Closing remainder of app balance to Creator after deletion method.\""
      ]
    },
    "1249": {
      "op": "itxn_field Note",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "1251": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "1253": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "0"
      ]
    },
    "1254": {
      "op": "itxn_field Amount",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "1256": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ]
    },
    "1258": {
      "op": "itxn_field Sender",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ]
    },
    "1260": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "pay"
      ]
    },
    "1261": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ]
    },
    "1263": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "1000"
      ]
    },
    "1264": {
      "op": "itxn_field Fee",
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0"
      ]
    },
    "1266": {
      "op": "itxn_submit"
    },
    "1267": {
      "op": "itxn Sender"
    },
    "1269": {
      "op": "itxn Receiver",
      "defined_out": [
        "del_app_refund_itxn.Receiver#0",
        "del_app_refund_itxn.Sender#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "del_app_refund_itxn.Sender#0",
        "del_app_refund_itxn.Receiver#0"
      ]
    },
    "1271": {
      "op": "frame_bury 1",
      "defined_out": [
        "del_app_refund_itxn.Receiver#0",
        "del_app_refund_itxn.Sender#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "del_app_refund_itxn.Sender#0"
      ]
    },
    "1273": {
      "op": "itxn CloseRemainderTo",
      "defined_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "del_app_refund_itxn.Sender#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "del_app_refund_itxn.Sender#0",
        "del_app_refund_itxn.CloseRemainderTo#0"
      ]
    },
    "1275": {
      "op": "frame_bury 0",
      "defined_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "del_app_refund_itxn.Sender#0"
      ],
      "stack_out": [
        "del_app_refund_itxn.CloseRemainderTo#0",
        "del_app_refund_itxn.Receiver#0",
        "del_app_refund_itxn.Sender#0"
      ]
    },
    "1277": {
      "op": "b terminate_after_if_else@5"
    }
  }
}