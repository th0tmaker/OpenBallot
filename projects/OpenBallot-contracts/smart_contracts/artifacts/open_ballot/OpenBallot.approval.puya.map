{
  "version": 3,
  "sources": [
    "../../open_ballot/contract.py"
  ],
  "mappings": ";;;;AAwBA;;;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAgFK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAyBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;AAAA;AAAA;AAAA;;AAAA;AA9GL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AA8GK;;;AAAA;AAAA;AA2DA;;AAAA;AAAA;AAAA;;AAAA;AAzKL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyKK;;;AAAA;AAAA;AAwCA;;AAAA;AAAA;AAAA;;AAAA;AAjNL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiNK;;;AAAA;AAAA;AAiCA;;AAAA;AAAA;AAAA;;AAAA;AAlPL;;;AAkPK;;;AAAA;AAAA;AAuDA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAsCA;;AAAA;AAAA;AAAA;;AAAA;AA/UL;;;AA+UK;;;AAAA;AAAA;AAkCA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAjXL;AAAA;AAgFA;;;AAIY;;AAAc;;AAAd;AADJ;AAIO;;AAAA;;AAAA;AACH;;AAEc;;;;AADZ;;;AADF;AADG;AAAP;AAQA;AAAsB;AAAtB;AAEA;AAAqB;AAArB;AACA;;AAAqB;AAArB;AACA;;AAAqB;AAArB;AACA;;AAAmB;AAAnB;AAEA;AAA2B;AAA3B;;AAjER;;;AAKmB;;;;AAIX;;AAAiB;AAHN;;;;AAIX;;AAAiB;AANN;;;;AASJ;;AAAA;AAAA;AAAP;AAuDR;;;AAEe;;AAAP;AAGR;;;AAYY;;AAAc;;AAAd;AADJ;AAIO;;AAAA;AAAgB;;AAAhB;AAAP;AAKI;;AAAA;AAAkB;AAAlB;AAAA;;;AACI;;AAAA;AAAkB;AAAlB;AADJ;;;AAEI;;AAAA;AAAkB;AAAlB;AAFJ;;;;;;;;AADJ;AAeI;;AAAA;;AAAA;AADJ;AAIwB;;AAAkB;;;;AAAlB;AAAjB;;AAAA;AAAP;AAIO;;AAAA;;AAAA;AAAmC;;;;AAAnC;AAAP;AAIO;AAAA;AAAA;AAAA;AAAA;AAAP;AAGA;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AAGA;AAAsB;AAAtB;;AAGR;;;AAIY;;AAAc;;AAAd;AADJ;AAKsB;AAAlB;;AAAA;AAAA;AAAA;;AAAA;AADJ;AAKI;;AAAA;;AAAkB;;AAAlB;AADJ;AAKI;;AAAA;;AAAoB;;AAApB;AADJ;AAKI;;AAAA;;AACG;;;AADH;AADJ;AAKO;;AAAA;;AAAA;AACH;;AAAqB;;;AAArB;AADG;AAAP;AAKI;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AADJ;AAMiC;AAA9B;;AAAA;AAAA;AAAA;;AAAA;;;AACC;AAAsB;;AAAtB;AAAgD;;AAAhD;;AAxIZ;;;AAKY;;;;;;AADK;;;AAKT;AAxBR;;;AAQY;;AAAA;AAAkB;;AAAA;AAAlB;AADO;;;AAAA;AAKJ;;;AAAA;AAAP;AAgJR;;;AAIY;;AAAc;;AAAd;AADJ;AAKsB;AAAlB;;AAAA;AAAA;AAAA;;AAAA;AADJ;AAKI;;AAAA;;AAAsB;AAAtB;AAAA;AAAA;AAAA;;AAAA;AADJ;AAKI;;AAAA;;AAAoB;;AAApB;AADJ;AAKI;;AAAA;;AAAkB;;;AAAlB;AADJ;AAKI;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AADJ;AAMqB;AAAlB;;AAAA;AAAA;AAAA;;AAAA;;;AACC;AAAsB;;AAAtB;AAAoC;;AAApC;;AAGZ;;;AAI0B;AAAd;;AAAA;AAAA;AAAA;;AADJ;AAKI;AAAsB;;AAAtB;AAAA;AAAA;AAAA;;;AAGA;;;AAJG;AAEH;AAAsB;;AAAtB;AAAA;AAAA;AAAA;;;AAGA;;;AALG;AAAA;AAAP;AASI;;AAAU;;;AAAV;AAAA;;;AACG;;AAAU;;;AAAV;AADH;;;AAEG;;AAAU;;;AAAV;AAFH;;;;;;;;AADJ;AA0B8C;;;AAAV;;AAAA;AAApC;AAAsB;;AAAtB;AAAA;AAAA;AAGa;AAAV;AAAA;;AAAA;AAAX;;;AACY;AAAA;AAAA;AAAA;AAAsB;AAAtB;AAAA;AAAA;AAAA;;;;AACW;;AAAV;AAAA;;AAAA;AAAb;;;AACY;AAAA;;AAAA;AAAA;AAAsB;AAAtB;AAAA;;AAAA;AAAA;;;;AAEA;AAAA;;AAAA;AAAA;AAAsB;AAAtB;AAAA;;AAAA;AAAA;AAGJ;AAAA;;AAAA;AAAA;AAAoB;AAApB;AAAA;;AAAA;AAAA;;AAGR;;;AAIY;;AAAc;;AAAd;AADJ;AAKkB;AAAd;;AAAA;AAAA;AAAA;;AADJ;AAUI;AAAsB;;AAAtB;AAAJ;;AAI8B;AACnB;;AACE;;AACF;;;AAJG;AAIH;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALqB;;;AADhB;;;AACgB;;;;;AASY;;AAAtC;AADJ;AAK4C;;AAAxC;AADJ;;AAKR;;;;;AAIY;;AAAc;;AAAd;AADJ;AASI;;AAAA;AAAA;AAAA;AAAA;;;AAAwB;;AAAkB;;AAAlB;AAAxB;;;;;;;;AADJ;;;;AAKR;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAGkC;AAAlB;;AAAA;AAAA;AAAA;AAAA;;AADJ;AAKsB;;AAAlB;;AAAA;AADJ;AAIA;;AAGA;AAAA;AAAA;AAAA;AAA4B;AAA5B;AAAA;AAAA;AAAA;;;;;;;;;AAKZ;;;;AAGe;;AAAP;AAKI;;AAAc;;AAAd;AADJ;AAK8B;AAA1B;;AAAA;AAAA;AAAA;;AADJ;AAQI;AACA;;AADA;AAAJ;;AAMG;AAAA;AAAA;AAAA;AAAX;;;AAEsC;AACf;;AACE;;AACF;AAAA;AAAA;AAAA;AAA2B;;;AAA3B;AAND;AAMC;AAGY;;AACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPiB;;;AAHhB;;;AAGgB;;;;;;;;;;AAWA;AACf;;AACE;;AAGU;AACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHE;;;;;;;AAHe;;;AAdhB;;;AAcgB;;;;;;;AAUQ;;AAAlC;AADJ;AAKI;;AAAoC;;AAApC;AADJ;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.__puya_arc4_router__",
      "op": "callsub __puya_arc4_router__",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3": {
      "op": "return",
      "stack_out": []
    },
    "4": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.__puya_arc4_router__",
      "params": {},
      "block": "__puya_arc4_router__",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "7": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "9": {
      "op": "bz __puya_arc4_router___after_if_else@14",
      "stack_out": []
    },
    "12": {
      "op": "pushbytess 0x5be219f0 0x81e1658f 0xe6bf4f23 0xfe7b6e39 0x8c2ecf22 0x761dd0fa 0x6e0b83b9 0xbdefdf45 0x5ff16da4 // method \"generate()void\", method \"get_version_unix()uint64\", method \"set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void\", method \"fund_app_mbr(pay)void\", method \"request_box_storage(pay)void\", method \"submit_vote(uint8)void\", method \"delete_box_storage()void\", method \"purge_box_storage(address[])void\", method \"terminate()void\""
    },
    "59": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(delete_box_storage()void)",
        "Method(fund_app_mbr(pay)void)",
        "Method(generate()void)",
        "Method(get_version_unix()uint64)",
        "Method(purge_box_storage(address[])void)",
        "Method(request_box_storage(pay)void)",
        "Method(set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void)",
        "Method(submit_vote(uint8)void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(generate()void)",
        "Method(get_version_unix()uint64)",
        "Method(set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void)",
        "Method(fund_app_mbr(pay)void)",
        "Method(request_box_storage(pay)void)",
        "Method(submit_vote(uint8)void)",
        "Method(delete_box_storage()void)",
        "Method(purge_box_storage(address[])void)",
        "Method(terminate()void)",
        "tmp%2#0"
      ]
    },
    "62": {
      "op": "match __puya_arc4_router___generate_route@2 __puya_arc4_router___get_version_unix_route@3 __puya_arc4_router___set_poll_route@4 __puya_arc4_router___fund_app_mbr_route@5 __puya_arc4_router___request_box_storage_route@6 __puya_arc4_router___submit_vote_route@7 __puya_arc4_router___delete_box_storage_route@8 __puya_arc4_router___purge_box_storage_route@9 __puya_arc4_router___terminate_route@10",
      "stack_out": []
    },
    "82": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "83": {
      "retsub": true,
      "op": "retsub"
    },
    "84": {
      "block": "__puya_arc4_router___generate_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "86": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "87": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "88": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "90": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "91": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "92": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.generate",
      "op": "callsub generate"
    },
    "95": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "96": {
      "retsub": true,
      "op": "retsub"
    },
    "97": {
      "block": "__puya_arc4_router___get_version_unix_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "99": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "100": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "101": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "103": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "104": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.get_version_unix",
      "op": "callsub get_version_unix",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "107": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "108": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "114": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "115": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "116": {
      "op": "log",
      "stack_out": []
    },
    "117": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "118": {
      "retsub": true,
      "op": "retsub"
    },
    "119": {
      "block": "__puya_arc4_router___set_poll_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "121": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "122": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "123": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "125": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "126": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "129": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "132": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "135": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "138": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "141": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "144": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "147": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "150": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "153": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "154": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "157": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ]
    },
    "158": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.set_poll",
      "op": "callsub set_poll",
      "stack_out": []
    },
    "161": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "162": {
      "retsub": true,
      "op": "retsub"
    },
    "163": {
      "block": "__puya_arc4_router___fund_app_mbr_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "165": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "166": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "167": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "169": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "170": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "172": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "1"
      ]
    },
    "173": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "174": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "175": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "177": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "178": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "179": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "180": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.fund_app_mbr",
      "op": "callsub fund_app_mbr",
      "stack_out": []
    },
    "183": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "184": {
      "retsub": true,
      "op": "retsub"
    },
    "185": {
      "block": "__puya_arc4_router___request_box_storage_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "187": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "188": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "189": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "191": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "192": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "194": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "1"
      ]
    },
    "195": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "196": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "197": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "199": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "200": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "201": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "202": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.request_box_storage",
      "op": "callsub request_box_storage",
      "stack_out": []
    },
    "205": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "206": {
      "retsub": true,
      "op": "retsub"
    },
    "207": {
      "block": "__puya_arc4_router___submit_vote_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "209": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "210": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "211": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "213": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "214": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "217": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.submit_vote",
      "op": "callsub submit_vote",
      "stack_out": []
    },
    "220": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "221": {
      "retsub": true,
      "op": "retsub"
    },
    "222": {
      "block": "__puya_arc4_router___delete_box_storage_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "224": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "225": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "226": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "228": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "229": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.delete_box_storage",
      "op": "callsub delete_box_storage"
    },
    "232": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "233": {
      "retsub": true,
      "op": "retsub"
    },
    "234": {
      "block": "__puya_arc4_router___purge_box_storage_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "236": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "237": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "238": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "240": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "241": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "244": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.purge_box_storage",
      "op": "callsub purge_box_storage",
      "stack_out": []
    },
    "247": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "248": {
      "retsub": true,
      "op": "retsub"
    },
    "249": {
      "block": "__puya_arc4_router___terminate_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "251": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "DeleteApplication"
      ]
    },
    "253": {
      "op": "==",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "254": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "255": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "257": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "258": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.terminate",
      "op": "callsub terminate"
    },
    "261": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "262": {
      "retsub": true,
      "op": "retsub"
    },
    "263": {
      "block": "__puya_arc4_router___after_if_else@14",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "264": {
      "retsub": true,
      "op": "retsub"
    },
    "265": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.generate",
      "params": {},
      "block": "generate",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "268": {
      "op": "txn Sender"
    },
    "270": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "272": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "273": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "274": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "276": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "278": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "279": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%4#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%4#0"
      ]
    },
    "281": {
      "op": "pushints 4 8 // 4, 8",
      "defined_out": [
        "4",
        "8",
        "tmp%4#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%4#0",
        "4",
        "8"
      ]
    },
    "285": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.calc_schema_mbr",
      "op": "callsub calc_schema_mbr",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "288": {
      "op": "+",
      "defined_out": [
        "tmp%6#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%6#0"
      ]
    },
    "289": {
      "op": ">=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "290": {
      "error": "Application creator address balance must be equal or greater than Global.min_balance + Global schema MBR.",
      "op": "assert // Application creator address balance must be equal or greater than Global.min_balance + Global schema MBR.",
      "stack_out": []
    },
    "291": {
      "op": "bytec_2 // \"poll_finalized\"",
      "defined_out": [
        "\"poll_finalized\""
      ],
      "stack_out": [
        "\"poll_finalized\""
      ]
    },
    "292": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"poll_finalized\"",
        "0"
      ],
      "stack_out": [
        "\"poll_finalized\"",
        "0"
      ]
    },
    "293": {
      "op": "app_global_put",
      "stack_out": []
    },
    "294": {
      "op": "bytec_3 // \"total_choice1\"",
      "defined_out": [
        "\"total_choice1\""
      ],
      "stack_out": [
        "\"total_choice1\""
      ]
    },
    "295": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_choice1\"",
        "0"
      ]
    },
    "296": {
      "op": "app_global_put",
      "stack_out": []
    },
    "297": {
      "op": "bytec 4 // \"total_choice2\"",
      "defined_out": [
        "\"total_choice2\""
      ],
      "stack_out": [
        "\"total_choice2\""
      ]
    },
    "299": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_choice2\"",
        "0"
      ]
    },
    "300": {
      "op": "app_global_put",
      "stack_out": []
    },
    "301": {
      "op": "bytec 5 // \"total_choice3\"",
      "defined_out": [
        "\"total_choice3\""
      ],
      "stack_out": [
        "\"total_choice3\""
      ]
    },
    "303": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_choice3\"",
        "0"
      ]
    },
    "304": {
      "op": "app_global_put",
      "stack_out": []
    },
    "305": {
      "op": "bytec 6 // \"total_votes\"",
      "defined_out": [
        "\"total_votes\""
      ],
      "stack_out": [
        "\"total_votes\""
      ]
    },
    "307": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_votes\"",
        "0"
      ]
    },
    "308": {
      "op": "app_global_put",
      "stack_out": []
    },
    "309": {
      "op": "bytec_1 // \"total_purged_box_a_\"",
      "defined_out": [
        "\"total_purged_box_a_\""
      ],
      "stack_out": [
        "\"total_purged_box_a_\""
      ]
    },
    "310": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_purged_box_a_\"",
        "0"
      ]
    },
    "311": {
      "op": "app_global_put",
      "stack_out": []
    },
    "312": {
      "retsub": true,
      "op": "retsub"
    },
    "313": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.calc_schema_mbr",
      "params": {
        "num_bytes#0": "uint64",
        "num_uint#0": "uint64"
      },
      "block": "calc_schema_mbr",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "316": {
      "op": "pushint 50000 // 50000",
      "defined_out": [
        "50000"
      ],
      "stack_out": [
        "50000"
      ]
    },
    "320": {
      "op": "frame_dig -2",
      "defined_out": [
        "50000",
        "num_bytes#0 (copy)"
      ],
      "stack_out": [
        "50000",
        "num_bytes#0 (copy)"
      ]
    },
    "322": {
      "op": "*",
      "defined_out": [
        "total_byte_fee#0"
      ],
      "stack_out": [
        "total_byte_fee#0"
      ]
    },
    "323": {
      "op": "pushint 28500 // 28500",
      "defined_out": [
        "28500",
        "total_byte_fee#0"
      ],
      "stack_out": [
        "total_byte_fee#0",
        "28500"
      ]
    },
    "327": {
      "op": "frame_dig -1",
      "defined_out": [
        "28500",
        "num_uint#0 (copy)",
        "total_byte_fee#0"
      ],
      "stack_out": [
        "total_byte_fee#0",
        "28500",
        "num_uint#0 (copy)"
      ]
    },
    "329": {
      "op": "*",
      "defined_out": [
        "total_byte_fee#0",
        "total_uint_fee#0"
      ],
      "stack_out": [
        "total_byte_fee#0",
        "total_uint_fee#0"
      ]
    },
    "330": {
      "op": "pushint 100000 // 100000",
      "defined_out": [
        "100000",
        "total_byte_fee#0",
        "total_uint_fee#0"
      ],
      "stack_out": [
        "total_byte_fee#0",
        "total_uint_fee#0",
        "100000"
      ]
    },
    "334": {
      "op": "uncover 2",
      "stack_out": [
        "total_uint_fee#0",
        "100000",
        "total_byte_fee#0"
      ]
    },
    "336": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "total_uint_fee#0"
      ],
      "stack_out": [
        "total_uint_fee#0",
        "tmp%0#0"
      ]
    },
    "337": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "338": {
      "retsub": true,
      "op": "retsub"
    },
    "339": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.get_version_unix",
      "params": {},
      "block": "get_version_unix",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "342": {
      "op": "intc 4 // TMPL_VERSION_UNIX",
      "defined_out": [
        "TMPL_VERSION_UNIX"
      ],
      "stack_out": [
        "TMPL_VERSION_UNIX"
      ]
    },
    "344": {
      "retsub": true,
      "op": "retsub"
    },
    "345": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.set_poll",
      "params": {
        "title#0": "bytes",
        "choice1#0": "bytes",
        "choice2#0": "bytes",
        "choice3#0": "bytes",
        "start_date_unix#0": "uint64",
        "end_date_unix#0": "uint64"
      },
      "block": "set_poll",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "348": {
      "op": "txn Sender"
    },
    "350": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "352": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "353": {
      "error": "Only application creator can set up poll.",
      "op": "assert // Only application creator can set up poll.",
      "stack_out": []
    },
    "354": {
      "op": "frame_dig -6",
      "defined_out": [
        "title#0 (copy)"
      ],
      "stack_out": [
        "title#0 (copy)"
      ]
    },
    "356": {
      "op": "len",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "357": {
      "op": "pushint 118 // 118",
      "defined_out": [
        "118",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "118"
      ]
    },
    "359": {
      "op": "<=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "360": {
      "error": "Poll title size can not exceed 118 bytes of data per key-value.",
      "op": "assert // Poll title size can not exceed 118 bytes of data per key-value.",
      "stack_out": []
    },
    "361": {
      "op": "frame_dig -5",
      "defined_out": [
        "choice1#0 (copy)"
      ],
      "stack_out": [
        "choice1#0 (copy)"
      ]
    },
    "363": {
      "op": "len",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "364": {
      "op": "intc_3 // 116",
      "defined_out": [
        "116",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "116"
      ]
    },
    "365": {
      "op": "<=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "366": {
      "op": "bz set_poll_bool_false@4",
      "stack_out": []
    },
    "369": {
      "op": "frame_dig -4",
      "defined_out": [
        "choice2#0 (copy)"
      ],
      "stack_out": [
        "choice2#0 (copy)"
      ]
    },
    "371": {
      "op": "len",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "372": {
      "op": "intc_3 // 116",
      "stack_out": [
        "tmp%7#0",
        "116"
      ]
    },
    "373": {
      "op": "<=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "374": {
      "op": "bz set_poll_bool_false@4",
      "stack_out": []
    },
    "377": {
      "op": "frame_dig -3",
      "defined_out": [
        "choice3#0 (copy)"
      ],
      "stack_out": [
        "choice3#0 (copy)"
      ]
    },
    "379": {
      "op": "len",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "380": {
      "op": "intc_3 // 116",
      "stack_out": [
        "tmp%9#0",
        "116"
      ]
    },
    "381": {
      "op": "<=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "382": {
      "op": "bz set_poll_bool_false@4",
      "stack_out": []
    },
    "385": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "386": {
      "op": "b set_poll_bool_merge@5"
    },
    "389": {
      "block": "set_poll_bool_false@4",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "390": {
      "block": "set_poll_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "Poll choice size cannot exceed 116 bytes of data per key-value.",
      "op": "assert // Poll choice size cannot exceed 116 bytes of data per key-value.",
      "defined_out": [],
      "stack_out": []
    },
    "391": {
      "op": "frame_dig -2",
      "defined_out": [
        "start_date_unix#0 (copy)"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)"
      ]
    },
    "393": {
      "op": "frame_dig -1",
      "defined_out": [
        "end_date_unix#0 (copy)",
        "start_date_unix#0 (copy)"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)",
        "end_date_unix#0 (copy)"
      ]
    },
    "395": {
      "op": "<",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "396": {
      "error": "Start date must be earlier than end date.",
      "op": "assert // Start date must be earlier than end date.",
      "stack_out": []
    },
    "397": {
      "op": "frame_dig -2",
      "stack_out": [
        "start_date_unix#0 (copy)"
      ]
    },
    "399": {
      "op": "pushint 259200 // 259200",
      "defined_out": [
        "259200",
        "start_date_unix#0 (copy)"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)",
        "259200"
      ]
    },
    "403": {
      "op": "+",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "404": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "end_date_unix#0 (copy)"
      ]
    },
    "406": {
      "op": "<=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "407": {
      "error": "End date must be at least 3 days later than the start date.",
      "op": "assert // End date must be at least 3 days later than the start date.",
      "stack_out": []
    },
    "408": {
      "op": "frame_dig -1",
      "stack_out": [
        "end_date_unix#0 (copy)"
      ]
    },
    "410": {
      "op": "frame_dig -2",
      "stack_out": [
        "end_date_unix#0 (copy)",
        "start_date_unix#0 (copy)"
      ]
    },
    "412": {
      "op": "-",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "413": {
      "op": "pushint 1209600 // 1209600",
      "defined_out": [
        "1209600",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1209600"
      ]
    },
    "417": {
      "op": "<=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "418": {
      "error": "Voting period can not exceed 14 days.",
      "op": "assert // Voting period can not exceed 14 days.",
      "stack_out": []
    },
    "419": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "420": {
      "op": "bytec_2 // \"poll_finalized\"",
      "defined_out": [
        "\"poll_finalized\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"poll_finalized\""
      ]
    },
    "421": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "422": {
      "error": "check self.poll_finalized exists",
      "op": "assert // check self.poll_finalized exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "423": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "424": {
      "error": "Poll can only be setup once.",
      "op": "assert // Poll can only be setup once.",
      "stack_out": []
    },
    "425": {
      "op": "pushbytes \"poll_title\"",
      "defined_out": [
        "\"poll_title\""
      ],
      "stack_out": [
        "\"poll_title\""
      ]
    },
    "437": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"poll_title\"",
        "title#0 (copy)"
      ],
      "stack_out": [
        "\"poll_title\"",
        "title#0 (copy)"
      ]
    },
    "439": {
      "op": "app_global_put",
      "stack_out": []
    },
    "440": {
      "op": "pushbytes \"poll_choice1\"",
      "defined_out": [
        "\"poll_choice1\""
      ],
      "stack_out": [
        "\"poll_choice1\""
      ]
    },
    "454": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"poll_choice1\"",
        "choice1#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice1\"",
        "choice1#0 (copy)"
      ]
    },
    "456": {
      "op": "app_global_put",
      "stack_out": []
    },
    "457": {
      "op": "pushbytes \"poll_choice2\"",
      "defined_out": [
        "\"poll_choice2\""
      ],
      "stack_out": [
        "\"poll_choice2\""
      ]
    },
    "471": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"poll_choice2\"",
        "choice2#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice2\"",
        "choice2#0 (copy)"
      ]
    },
    "473": {
      "op": "app_global_put",
      "stack_out": []
    },
    "474": {
      "op": "pushbytes \"poll_choice3\"",
      "defined_out": [
        "\"poll_choice3\""
      ],
      "stack_out": [
        "\"poll_choice3\""
      ]
    },
    "488": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"poll_choice3\"",
        "choice3#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice3\"",
        "choice3#0 (copy)"
      ]
    },
    "490": {
      "op": "app_global_put",
      "stack_out": []
    },
    "491": {
      "op": "pushbytes \"poll_start_date_unix\"",
      "defined_out": [
        "\"poll_start_date_unix\""
      ],
      "stack_out": [
        "\"poll_start_date_unix\""
      ]
    },
    "513": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"poll_start_date_unix\"",
        "start_date_unix#0 (copy)"
      ]
    },
    "515": {
      "op": "app_global_put",
      "stack_out": []
    },
    "516": {
      "op": "bytec 7 // \"poll_end_date_unix\"",
      "defined_out": [
        "\"poll_end_date_unix\""
      ],
      "stack_out": [
        "\"poll_end_date_unix\""
      ]
    },
    "518": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"poll_end_date_unix\"",
        "end_date_unix#0 (copy)"
      ]
    },
    "520": {
      "op": "app_global_put",
      "stack_out": []
    },
    "521": {
      "op": "bytec_2 // \"poll_finalized\"",
      "stack_out": [
        "\"poll_finalized\""
      ]
    },
    "522": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"poll_finalized\"",
        "1"
      ],
      "stack_out": [
        "\"poll_finalized\"",
        "1"
      ]
    },
    "523": {
      "op": "app_global_put",
      "stack_out": []
    },
    "524": {
      "retsub": true,
      "op": "retsub"
    },
    "525": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.fund_app_mbr",
      "params": {
        "mbr_pay#0": "uint64"
      },
      "block": "fund_app_mbr",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "528": {
      "op": "txn Sender"
    },
    "530": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "532": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "533": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "534": {
      "op": "bytec_0 // 0x615f"
    },
    "535": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%3#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%3#0"
      ]
    },
    "537": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "538": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "539": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "541": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "542": {
      "error": "Transaction sender address already present in box a_.",
      "op": "assert // Transaction sender address already present in box a_.",
      "stack_out": []
    },
    "543": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbr_pay#0 (copy)"
      ],
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "545": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "547": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "549": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "550": {
      "error": "MBR payment sender address must match appplication creator address.",
      "op": "assert // MBR payment sender address must match appplication creator address.",
      "stack_out": []
    },
    "551": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "553": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "555": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "557": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "558": {
      "error": "MBR payment reciever address must match application address.",
      "op": "assert // MBR payment reciever address must match application address.",
      "stack_out": []
    },
    "559": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "561": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "563": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.calc_box_storage_mbr",
      "op": "callsub calc_box_storage_mbr",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "566": {
      "op": ">=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "567": {
      "error": "MBR payment for box storage must meet the minimum requirement amount.",
      "op": "assert // MBR payment for box storage must meet the minimum requirement amount.",
      "stack_out": []
    },
    "568": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "570": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "572": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "573": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%16#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%16#0"
      ]
    },
    "575": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.calc_box_storage_mbr",
      "op": "callsub calc_box_storage_mbr",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "578": {
      "op": "+",
      "defined_out": [
        "tmp%18#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%18#0"
      ]
    },
    "579": {
      "op": ">=",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "580": {
      "error": "Application address balance must be equal or greater than Global.min_balance + Box storage fee.",
      "op": "assert // Application address balance must be equal or greater than Global.min_balance + Box storage fee.",
      "stack_out": []
    },
    "581": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "583": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "584": {
      "op": "bytec 7 // \"poll_end_date_unix\"",
      "defined_out": [
        "\"poll_end_date_unix\"",
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0",
        "\"poll_end_date_unix\""
      ]
    },
    "586": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "587": {
      "error": "check self.poll_end_date_unix exists",
      "op": "assert // check self.poll_end_date_unix exists",
      "stack_out": [
        "tmp%20#0",
        "maybe_value%1#0"
      ]
    },
    "588": {
      "op": "<=",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "589": {
      "error": "Unable to fund app mbr if voting period is over.",
      "op": "assert // Unable to fund app mbr if voting period is over.",
      "stack_out": []
    },
    "590": {
      "op": "bytec_0 // 0x615f"
    },
    "591": {
      "op": "global CreatorAddress",
      "defined_out": [
        "0x615f",
        "tmp%22#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%22#0"
      ]
    },
    "593": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "594": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "595": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "597": {
      "op": "bnz fund_app_mbr_after_if_else@2",
      "stack_out": []
    },
    "600": {
      "op": "bytec_0 // 0x615f"
    },
    "601": {
      "op": "global CreatorAddress",
      "defined_out": [
        "0x615f",
        "tmp%24#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%24#0"
      ]
    },
    "603": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "604": {
      "op": "bytec 8 // 0x0000",
      "defined_out": [
        "0x0000",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0x0000"
      ]
    },
    "606": {
      "op": "box_put",
      "stack_out": []
    },
    "607": {
      "block": "fund_app_mbr_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "608": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.calc_box_storage_mbr",
      "params": {},
      "block": "calc_box_storage_mbr",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "611": {
      "op": "pushbytess 0x22 0x02 // 0x22, 0x02",
      "defined_out": [
        "0x02",
        "0x22"
      ],
      "stack_out": [
        "0x22",
        "0x02"
      ]
    },
    "617": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.calc_single_box_fee",
      "op": "callsub calc_single_box_fee",
      "defined_out": [
        "box_a_#0"
      ],
      "stack_out": [
        "box_a_#0"
      ]
    },
    "620": {
      "retsub": true,
      "op": "retsub"
    },
    "621": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.calc_single_box_fee",
      "params": {
        "key_size#0": "bytes",
        "value_size#0": "bytes"
      },
      "block": "calc_single_box_fee",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "624": {
      "op": "frame_dig -2",
      "defined_out": [
        "key_size#0 (copy)"
      ],
      "stack_out": [
        "key_size#0 (copy)"
      ]
    },
    "626": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "627": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "value_size#0 (copy)"
      ]
    },
    "629": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "630": {
      "op": "+",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "631": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "400"
      ]
    },
    "634": {
      "op": "*",
      "defined_out": [
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0"
      ]
    },
    "635": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "size_fee#0"
      ],
      "stack_out": [
        "size_fee#0",
        "2500"
      ]
    },
    "638": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "639": {
      "retsub": true,
      "op": "retsub"
    },
    "640": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.request_box_storage",
      "params": {
        "mbr_pay#0": "uint64"
      },
      "block": "request_box_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "643": {
      "op": "txn Sender"
    },
    "645": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "647": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "648": {
      "error": "Invalid sender address! Application creator address can not use request box storage method.",
      "op": "assert // Invalid sender address! Application creator address can not use request box storage method.",
      "stack_out": []
    },
    "649": {
      "op": "bytec_0 // 0x615f"
    },
    "650": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%3#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%3#0"
      ]
    },
    "652": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "653": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "654": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "656": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "657": {
      "error": "Transaction sender address must not be present in box a_.",
      "op": "assert // Transaction sender address must not be present in box a_.",
      "stack_out": []
    },
    "658": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbr_pay#0 (copy)"
      ],
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "660": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "662": {
      "op": "bytec_0 // 0x615f",
      "stack_out": [
        "tmp%6#0",
        "0x615f"
      ]
    },
    "663": {
      "op": "swap",
      "stack_out": [
        "0x615f",
        "tmp%6#0"
      ]
    },
    "664": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "665": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "666": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "668": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "669": {
      "error": "Box storage MBR payment sender address must not be present in box a_.",
      "op": "assert // Box storage MBR payment sender address must not be present in box a_.",
      "stack_out": []
    },
    "670": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "672": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "674": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "676": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "677": {
      "error": "Box storage MBR payment reciever address must match application address.",
      "op": "assert // Box storage MBR payment reciever address must match application address.",
      "stack_out": []
    },
    "678": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "680": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "682": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.calc_box_storage_mbr",
      "op": "callsub calc_box_storage_mbr",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "685": {
      "op": ">=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "686": {
      "error": "Box storage MBR payment amount must be equal or greater than box _a fee.",
      "op": "assert // Box storage MBR payment amount must be equal or greater than box _a fee.",
      "stack_out": []
    },
    "687": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "689": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "690": {
      "op": "bytec 7 // \"poll_end_date_unix\"",
      "defined_out": [
        "\"poll_end_date_unix\"",
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0",
        "\"poll_end_date_unix\""
      ]
    },
    "692": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "693": {
      "error": "check self.poll_end_date_unix exists",
      "op": "assert // check self.poll_end_date_unix exists",
      "stack_out": [
        "tmp%15#0",
        "maybe_value%2#0"
      ]
    },
    "694": {
      "op": "<=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "695": {
      "error": "Unable to request box storage if voting period is over.",
      "op": "assert // Unable to request box storage if voting period is over.",
      "stack_out": []
    },
    "696": {
      "op": "bytec_0 // 0x615f"
    },
    "697": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%17#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%17#0"
      ]
    },
    "699": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "700": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "701": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%3#0"
      ]
    },
    "703": {
      "op": "bnz request_box_storage_after_if_else@2",
      "stack_out": []
    },
    "706": {
      "op": "bytec_0 // 0x615f"
    },
    "707": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%19#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%19#0"
      ]
    },
    "709": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "710": {
      "op": "bytec 8 // 0x0000",
      "defined_out": [
        "0x0000",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0x0000"
      ]
    },
    "712": {
      "op": "box_put",
      "stack_out": []
    },
    "713": {
      "block": "request_box_storage_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "714": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.submit_vote",
      "params": {
        "choice#0": "bytes"
      },
      "block": "submit_vote",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "717": {
      "op": "bytec_0 // 0x615f"
    },
    "718": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%0#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%0#0"
      ]
    },
    "720": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "721": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "722": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "724": {
      "error": "Transaction sender address must be present in box a_.",
      "op": "assert // Transaction sender address must be present in box a_.",
      "stack_out": []
    },
    "725": {
      "op": "bytec_0 // 0x615f"
    },
    "726": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%2#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%2#0"
      ]
    },
    "728": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "729": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "730": {
      "error": "check self.box_a_voter_data entry exists",
      "op": "assert // check self.box_a_voter_data entry exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "731": {
      "op": "extract 0 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "734": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x00"
      ]
    },
    "737": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "738": {
      "op": "bytec_0 // 0x615f"
    },
    "739": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x615f",
        "tmp%5#0"
      ]
    },
    "741": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "742": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "743": {
      "error": "check self.box_a_voter_data entry exists",
      "op": "assert // check self.box_a_voter_data entry exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%2#0"
      ]
    },
    "744": {
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "747": {
      "op": "pushbytes 0x00",
      "stack_out": [
        "tmp%4#0",
        "reinterpret_biguint%2#0",
        "0x00"
      ]
    },
    "750": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "751": {
      "op": "&&",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "752": {
      "error": "Transaction sender address already submitted a vote.",
      "op": "assert // Transaction sender address already submitted a vote.",
      "stack_out": []
    },
    "753": {
      "op": "frame_dig -1",
      "defined_out": [
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)"
      ]
    },
    "755": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)",
        "0x01"
      ]
    },
    "758": {
      "op": "b==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "759": {
      "op": "bnz submit_vote_bool_true@3",
      "stack_out": []
    },
    "762": {
      "op": "frame_dig -1",
      "stack_out": [
        "choice#0 (copy)"
      ]
    },
    "764": {
      "op": "pushbytes 0x02",
      "defined_out": [
        "0x02",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)",
        "0x02"
      ]
    },
    "767": {
      "op": "b==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "768": {
      "op": "bnz submit_vote_bool_true@3",
      "stack_out": []
    },
    "771": {
      "op": "frame_dig -1",
      "stack_out": [
        "choice#0 (copy)"
      ]
    },
    "773": {
      "op": "pushbytes 0x03",
      "defined_out": [
        "0x03",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)",
        "0x03"
      ]
    },
    "776": {
      "op": "b==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "777": {
      "op": "bz submit_vote_bool_false@4",
      "stack_out": []
    },
    "780": {
      "block": "submit_vote_bool_true@3",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "781": {
      "op": "b submit_vote_bool_merge@5"
    },
    "784": {
      "block": "submit_vote_bool_false@4",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "785": {
      "block": "submit_vote_bool_merge@5",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "Invalid choice. Can only select choices 1, 2, 3.",
      "op": "assert // Invalid choice. Can only select choices 1, 2, 3.",
      "defined_out": [],
      "stack_out": []
    },
    "786": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "789": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x01",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "0x01",
        "choice#0 (copy)"
      ]
    },
    "791": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "792": {
      "op": "bytec_0 // 0x615f"
    },
    "793": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "encoded_tuple_buffer%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x615f",
        "tmp%12#0"
      ]
    },
    "795": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%13#0"
      ]
    },
    "796": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "797": {
      "op": "box_put",
      "stack_out": []
    },
    "798": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "799": {
      "op": "itob",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "800": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%14#0",
        "choice#0 (copy)"
      ]
    },
    "802": {
      "op": "b==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "803": {
      "op": "bz submit_vote_else_body@7",
      "stack_out": []
    },
    "806": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "807": {
      "op": "bytec_3 // \"total_choice1\"",
      "defined_out": [
        "\"total_choice1\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_choice1\""
      ]
    },
    "808": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "809": {
      "error": "check self.total_choice1 exists",
      "op": "assert // check self.total_choice1 exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "810": {
      "op": "intc_0 // 1",
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "811": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "812": {
      "op": "bytec_3 // \"total_choice1\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_choice1\""
      ]
    },
    "813": {
      "op": "swap",
      "stack_out": [
        "\"total_choice1\"",
        "new_state_value%0#0"
      ]
    },
    "814": {
      "op": "app_global_put",
      "stack_out": []
    },
    "815": {
      "op": "b submit_vote_after_if_else@11"
    },
    "818": {
      "block": "submit_vote_else_body@7",
      "stack_in": [],
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "820": {
      "op": "itob",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "821": {
      "op": "frame_dig -1",
      "defined_out": [
        "choice#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "choice#0 (copy)"
      ]
    },
    "823": {
      "op": "b==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "824": {
      "op": "bz submit_vote_else_body@9",
      "stack_out": []
    },
    "827": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "828": {
      "op": "bytec 4 // \"total_choice2\"",
      "defined_out": [
        "\"total_choice2\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_choice2\""
      ]
    },
    "830": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "831": {
      "error": "check self.total_choice2 exists",
      "op": "assert // check self.total_choice2 exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "832": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "1"
      ]
    },
    "833": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "834": {
      "op": "bytec 4 // \"total_choice2\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"total_choice2\""
      ]
    },
    "836": {
      "op": "swap",
      "stack_out": [
        "\"total_choice2\"",
        "new_state_value%1#0"
      ]
    },
    "837": {
      "op": "app_global_put",
      "stack_out": []
    },
    "838": {
      "op": "b submit_vote_after_if_else@11"
    },
    "841": {
      "block": "submit_vote_else_body@9",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "842": {
      "op": "bytec 5 // \"total_choice3\"",
      "defined_out": [
        "\"total_choice3\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_choice3\""
      ]
    },
    "844": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "845": {
      "error": "check self.total_choice3 exists",
      "op": "assert // check self.total_choice3 exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "846": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "1"
      ]
    },
    "847": {
      "op": "+",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "848": {
      "op": "bytec 5 // \"total_choice3\"",
      "stack_out": [
        "new_state_value%2#0",
        "\"total_choice3\""
      ]
    },
    "850": {
      "op": "swap",
      "stack_out": [
        "\"total_choice3\"",
        "new_state_value%2#0"
      ]
    },
    "851": {
      "op": "app_global_put",
      "stack_out": []
    },
    "852": {
      "block": "submit_vote_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "853": {
      "op": "bytec 6 // \"total_votes\"",
      "defined_out": [
        "\"total_votes\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_votes\""
      ]
    },
    "855": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "856": {
      "error": "check self.total_votes exists",
      "op": "assert // check self.total_votes exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "857": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "1"
      ]
    },
    "858": {
      "op": "+",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "859": {
      "op": "bytec 6 // \"total_votes\"",
      "stack_out": [
        "new_state_value%3#0",
        "\"total_votes\""
      ]
    },
    "861": {
      "op": "swap",
      "stack_out": [
        "\"total_votes\"",
        "new_state_value%3#0"
      ]
    },
    "862": {
      "op": "app_global_put",
      "stack_out": []
    },
    "863": {
      "retsub": true,
      "op": "retsub"
    },
    "864": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.delete_box_storage",
      "params": {},
      "block": "delete_box_storage",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "867": {
      "op": "txn Sender"
    },
    "869": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "871": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "872": {
      "error": "Invalid sender address! Application creator must delete smart contract to free up their box storage MBR.",
      "op": "assert // Invalid sender address! Application creator must delete smart contract to free up their box storage MBR.",
      "stack_out": []
    },
    "873": {
      "op": "bytec_0 // 0x615f"
    },
    "874": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%3#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%3#0"
      ]
    },
    "876": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "877": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "878": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "880": {
      "error": "Transaction sender address must be present in box a_.",
      "op": "assert // Transaction sender address must be present in box a_.",
      "stack_out": []
    },
    "881": {
      "op": "bytec_0 // 0x615f"
    },
    "882": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%5#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%5#0"
      ]
    },
    "884": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "885": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "886": {
      "op": "pop",
      "stack_out": []
    },
    "887": {
      "op": "itxn_begin"
    },
    "888": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "890": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "892": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.calc_box_storage_mbr",
      "op": "callsub calc_box_storage_mbr",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%7#0"
      ]
    },
    "895": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%7#0",
        "1000"
      ]
    },
    "896": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "897": {
      "op": "pushbytes \"Account gets app box storage MBR refunded..\"",
      "defined_out": [
        "\"Account gets app box storage MBR refunded..\"",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "\"Account gets app box storage MBR refunded..\""
      ]
    },
    "942": {
      "op": "itxn_field Note",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "944": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "946": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "948": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "950": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "951": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "953": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "954": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "956": {
      "op": "itxn_submit"
    },
    "957": {
      "op": "itxn Receiver"
    },
    "959": {
      "op": "itxn Sender"
    },
    "961": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "box_storage_del_refund_itxn.Sender#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "box_storage_del_refund_itxn.Sender#0",
        "tmp%8#0"
      ]
    },
    "963": {
      "op": "==",
      "defined_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "tmp%9#0"
      ]
    },
    "964": {
      "error": "box_storage_del_refund_itxn sender address must match application address.",
      "op": "assert // box_storage_del_refund_itxn sender address must match application address.",
      "stack_out": [
        "box_storage_del_refund_itxn.Receiver#0"
      ]
    },
    "965": {
      "op": "txn Sender",
      "defined_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "tmp%10#0"
      ]
    },
    "967": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "968": {
      "error": "box_storage_del_refund_itxn reciever address must match transaction sender address.",
      "op": "assert // box_storage_del_refund_itxn reciever address must match transaction sender address.",
      "stack_out": []
    },
    "969": {
      "retsub": true,
      "op": "retsub"
    },
    "970": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.purge_box_storage",
      "params": {
        "box_keys#0": "bytes"
      },
      "block": "purge_box_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "973": {
      "op": "pushbytes \"\""
    },
    "975": {
      "op": "txn Sender"
    },
    "977": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "979": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%2#0"
      ]
    },
    "980": {
      "error": "Unauthorized address! Only application creator can purge box storage.",
      "op": "assert // Unauthorized address! Only application creator can purge box storage.",
      "stack_out": [
        "item_index_internal%0#0"
      ]
    },
    "981": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_keys#0 (copy)"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "box_keys#0 (copy)"
      ]
    },
    "983": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "box_keys#0 (copy)"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "box_keys#0 (copy)",
        "0"
      ]
    },
    "984": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "985": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "986": {
      "op": "bz purge_box_storage_bool_false@3",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "989": {
      "op": "frame_dig 1",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "991": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%3#0",
        "9"
      ]
    },
    "993": {
      "op": "<",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "994": {
      "op": "bz purge_box_storage_bool_false@3",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "997": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "and_result%0#0"
      ]
    },
    "998": {
      "op": "b purge_box_storage_bool_merge@4"
    },
    "1001": {
      "block": "purge_box_storage_bool_false@3",
      "stack_in": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "and_result%0#0"
      ]
    },
    "1002": {
      "block": "purge_box_storage_bool_merge@4",
      "stack_in": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "and_result%0#0"
      ],
      "error": "The number of addresses represented by box keys array must be greater than 0 and lesser than 9.",
      "op": "assert // The number of addresses represented by box keys array must be greater than 0 and lesser than 9.",
      "defined_out": [],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "1003": {
      "op": "intc_1 // 0",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0"
      ]
    },
    "1004": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "1006": {
      "block": "purge_box_storage_for_header@5",
      "stack_in": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0"
      ]
    },
    "1008": {
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "1010": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "continue_looping%0#0"
      ]
    },
    "1011": {
      "op": "bz purge_box_storage_after_for@8",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "1014": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_keys#0 (copy)",
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "box_keys#0 (copy)"
      ]
    },
    "1016": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1019": {
      "op": "frame_dig 0",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0"
      ]
    },
    "1021": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "1022": {
      "op": "cover 2",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)"
      ]
    },
    "1024": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_index_internal%0#0 (copy)",
        "32"
      ]
    },
    "1026": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_index_internal%0#0",
        "item_offset%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1027": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "1029": {
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "box_key#0",
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "box_key#0"
      ]
    },
    "1030": {
      "op": "bytec_0 // 0x615f",
      "defined_out": [
        "0x615f",
        "box_key#0",
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "box_key#0",
        "0x615f"
      ]
    },
    "1031": {
      "op": "dig 1",
      "defined_out": [
        "0x615f",
        "box_key#0",
        "box_key#0 (copy)",
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "box_key#0",
        "0x615f",
        "box_key#0 (copy)"
      ]
    },
    "1033": {
      "op": "concat",
      "defined_out": [
        "box_key#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "box_key#0",
        "tmp%7#0"
      ]
    },
    "1034": {
      "op": "dup",
      "defined_out": [
        "box_key#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "box_key#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "1035": {
      "op": "box_len",
      "defined_out": [
        "box_key#0",
        "item_index_internal%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "box_key#0",
        "tmp%7#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1036": {
      "op": "bury 1",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "box_key#0",
        "tmp%7#0",
        "maybe_exists%0#0"
      ]
    },
    "1038": {
      "error": "Account address represented in box key must be present in box a_.",
      "op": "assert // Account address represented in box key must be present in box a_.",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "box_key#0",
        "tmp%7#0"
      ]
    },
    "1039": {
      "op": "global CreatorAddress",
      "defined_out": [
        "box_key#0",
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "box_key#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1041": {
      "op": "uncover 2",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "box_key#0"
      ]
    },
    "1043": {
      "op": "!=",
      "defined_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1044": {
      "error": "Account address represented in box key must not match application creator address.",
      "op": "assert // Account address represented in box key must not match application creator address.",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "tmp%7#0"
      ]
    },
    "1045": {
      "op": "box_del",
      "defined_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "{box_del}"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "{box_del}"
      ]
    },
    "1046": {
      "op": "pop",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0"
      ]
    },
    "1047": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "0"
      ]
    },
    "1048": {
      "op": "bytec_1 // \"total_purged_box_a_\"",
      "defined_out": [
        "\"total_purged_box_a_\"",
        "0",
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "0",
        "\"total_purged_box_a_\""
      ]
    },
    "1049": {
      "op": "app_global_get_ex",
      "defined_out": [
        "item_index_internal%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1050": {
      "error": "check self.total_purged_box_a_ exists",
      "op": "assert // check self.total_purged_box_a_ exists",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "maybe_value%1#0"
      ]
    },
    "1051": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "item_index_internal%0#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "1052": {
      "op": "+",
      "defined_out": [
        "item_index_internal%0#0",
        "new_state_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "new_state_value%0#0"
      ]
    },
    "1053": {
      "op": "bytec_1 // \"total_purged_box_a_\"",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "new_state_value%0#0",
        "\"total_purged_box_a_\""
      ]
    },
    "1054": {
      "op": "swap",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "\"total_purged_box_a_\"",
        "new_state_value%0#0"
      ]
    },
    "1055": {
      "op": "app_global_put",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0"
      ]
    },
    "1056": {
      "op": "intc_0 // 1",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0",
        "1"
      ]
    },
    "1057": {
      "op": "+",
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0",
        "item_index_internal%0#0"
      ]
    },
    "1058": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "1060": {
      "op": "b purge_box_storage_for_header@5"
    },
    "1063": {
      "block": "purge_box_storage_after_for@8",
      "stack_in": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1064": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.terminate",
      "params": {},
      "block": "terminate",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1067": {
      "op": "intc_1 // 0",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1068": {
      "op": "intc 5 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "TMPL_DELETABLE"
      ]
    },
    "1070": {
      "error": "Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "op": "assert // Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1071": {
      "op": "txn Sender"
    },
    "1073": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1075": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "tmp%3#0"
      ]
    },
    "1076": {
      "error": "Unauthorized address! Only application creator can delete the smart contract.",
      "op": "assert // Unauthorized address! Only application creator can delete the smart contract.",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1077": {
      "op": "bytec_0 // 0x615f"
    },
    "1078": {
      "op": "global CreatorAddress",
      "defined_out": [
        "0x615f",
        "tmp%4#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "0x615f",
        "tmp%4#0"
      ]
    },
    "1080": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "tmp%5#0"
      ]
    },
    "1081": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1082": {
      "op": "bury 1",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "maybe_exists%0#0"
      ]
    },
    "1084": {
      "error": "Transaction sender address must be present in box a_.",
      "op": "assert // Transaction sender address must be present in box a_.",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1085": {
      "op": "bytec_0 // 0x615f"
    },
    "1086": {
      "op": "global CreatorAddress",
      "defined_out": [
        "0x615f",
        "tmp%6#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "0x615f",
        "tmp%6#0"
      ]
    },
    "1088": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "tmp%7#0"
      ]
    },
    "1089": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "{box_del}"
      ]
    },
    "1090": {
      "op": "pop",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1091": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "0"
      ]
    },
    "1092": {
      "op": "bytec_1 // \"total_purged_box_a_\"",
      "defined_out": [
        "\"total_purged_box_a_\"",
        "0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "0",
        "\"total_purged_box_a_\""
      ]
    },
    "1093": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1094": {
      "error": "check self.total_purged_box_a_ exists",
      "op": "assert // check self.total_purged_box_a_ exists",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "maybe_value%1#0"
      ]
    },
    "1095": {
      "op": "bz terminate_else_body@3",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1098": {
      "op": "itxn_begin"
    },
    "1099": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1101": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "1103": {
      "op": "intc_1 // 0",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "0"
      ]
    },
    "1104": {
      "op": "bytec_1 // \"total_purged_box_a_\"",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "0",
        "\"total_purged_box_a_\""
      ]
    },
    "1105": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1106": {
      "error": "check self.total_purged_box_a_ exists",
      "op": "assert // check self.total_purged_box_a_ exists",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "1107": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.calc_box_storage_mbr",
      "op": "callsub calc_box_storage_mbr",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "maybe_value%2#0",
        "tmp%9#0"
      ]
    },
    "1110": {
      "op": "*",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%10#0"
      ]
    },
    "1111": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "tmp%10#0",
        "1000"
      ]
    },
    "1112": {
      "op": "-",
      "defined_out": [
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "1113": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "1115": {
      "op": "pushbytes \"Creator gets app base and purged box storage MBR refunded.\"",
      "defined_out": [
        "\"Creator gets app base and purged box storage MBR refunded.\"",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0",
        "\"Creator gets app base and purged box storage MBR refunded.\""
      ]
    },
    "1175": {
      "op": "itxn_field Note",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0",
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "1177": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Amount_idx_0#0"
      ]
    },
    "1179": {
      "op": "itxn_field Amount",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "1181": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1183": {
      "op": "itxn_field Sender",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1185": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "pay"
      ]
    },
    "1186": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1188": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "1000"
      ]
    },
    "1189": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1191": {
      "op": "itxn_submit"
    },
    "1192": {
      "op": "itxn Sender"
    },
    "1194": {
      "op": "itxn Receiver",
      "defined_out": [
        "app_balance_refund_itxn.Receiver#0",
        "app_balance_refund_itxn.Sender#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "app_balance_refund_itxn.Sender#0",
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1196": {
      "op": "frame_bury 0",
      "defined_out": [
        "app_balance_refund_itxn.Receiver#0",
        "app_balance_refund_itxn.Sender#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "app_balance_refund_itxn.Sender#0"
      ]
    },
    "1198": {
      "op": "b terminate_after_if_else@5"
    },
    "1201": {
      "block": "terminate_else_body@3",
      "stack_in": [
        "app_balance_refund_itxn.Receiver#0"
      ],
      "op": "itxn_begin"
    },
    "1202": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ]
    },
    "1204": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "1206": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "1207": {
      "op": "pushbytes \"Creator gets app base MBR refunded.\"",
      "defined_out": [
        "\"Creator gets app base MBR refunded.\"",
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0",
        "\"Creator gets app base MBR refunded.\""
      ]
    },
    "1244": {
      "op": "itxn_field Note",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "1246": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "1248": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0",
        "0"
      ]
    },
    "1249": {
      "op": "itxn_field Amount",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "inner_txn_params%1%%param_Receiver_idx_0#0"
      ]
    },
    "1251": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ]
    },
    "1253": {
      "op": "itxn_field Sender",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1255": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "pay"
      ]
    },
    "1256": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1258": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "1000"
      ]
    },
    "1259": {
      "op": "itxn_field Fee",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1261": {
      "op": "itxn_submit"
    },
    "1262": {
      "op": "itxn Sender"
    },
    "1264": {
      "op": "itxn Receiver",
      "defined_out": [
        "app_balance_refund_itxn.Receiver#0",
        "app_balance_refund_itxn.Sender#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "app_balance_refund_itxn.Sender#0",
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1266": {
      "op": "frame_bury 0",
      "defined_out": [
        "app_balance_refund_itxn.Receiver#0",
        "app_balance_refund_itxn.Sender#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "app_balance_refund_itxn.Sender#0"
      ]
    },
    "1268": {
      "block": "terminate_after_if_else@5",
      "stack_in": [
        "app_balance_refund_itxn.Receiver#0",
        "app_balance_refund_itxn.Sender#0"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "app_balance_refund_itxn.Sender#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "app_balance_refund_itxn.Sender#0",
        "tmp%11#0"
      ]
    },
    "1270": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "tmp%12#0"
      ]
    },
    "1271": {
      "error": "app_balance_refund_itxn sender address must match application address.",
      "op": "assert // app_balance_refund_itxn sender address must match application address.",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1272": {
      "op": "frame_dig 0"
    },
    "1274": {
      "op": "global CreatorAddress",
      "defined_out": [
        "app_balance_refund_itxn.Receiver#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "app_balance_refund_itxn.Receiver#0",
        "tmp%13#0"
      ]
    },
    "1276": {
      "op": "==",
      "defined_out": [
        "app_balance_refund_itxn.Receiver#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0",
        "tmp%14#0"
      ]
    },
    "1277": {
      "error": "app_balance_refund_itxn_itxn reciever address must match application creator address.",
      "op": "assert // app_balance_refund_itxn_itxn reciever address must match application creator address.",
      "stack_out": [
        "app_balance_refund_itxn.Receiver#0"
      ]
    },
    "1278": {
      "retsub": true,
      "op": "retsub"
    }
  }
}