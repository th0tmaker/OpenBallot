{
  "version": 3,
  "sources": [
    "../../open_ballot/contract.py"
  ],
  "mappings": "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",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 116"
    },
    "7": {
      "op": "bytecblock \"vote_choice\" \"total_accounts_opted_in\" \"poll_finalized\" \"choice1_total\" \"choice2_total\" \"choice3_total\" \"total_votes\" \"vote_status\" \"poll_start_date_unix\" \"poll_end_date_unix\""
    },
    "166": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "168": {
      "op": "bz main_after_if_else@11",
      "stack_out": []
    },
    "171": {
      "op": "pushbytess 0x5be219f0 0x5bbf7c36 0xb3fb275b 0xe6bf4f23 0x4abfcdf3 0x5ff16da4 // method \"generate()void\", method \"local_storage(account)void\", method \"opt_out(account)void\", method \"set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void\", method \"submit_vote(account,uint64)void\", method \"terminate()void\""
    },
    "203": {
      "op": "txna ApplicationArgs 0"
    },
    "206": {
      "op": "match main_generate_route@5 main_local_storage_route@6 main_opt_out_route@7 main_set_poll_route@8 main_submit_vote_route@9 main_terminate_route@10"
    },
    "220": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "221": {
      "op": "return"
    },
    "222": {
      "block": "main_terminate_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "224": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "DeleteApplication"
      ]
    },
    "226": {
      "op": "==",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "227": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "228": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "230": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "231": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.terminate",
      "op": "callsub terminate"
    },
    "234": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "235": {
      "op": "return"
    },
    "236": {
      "block": "main_submit_vote_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "238": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "239": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "240": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "242": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "243": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "246": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "247": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "249": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "252": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%45#0"
      ]
    },
    "253": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.submit_vote",
      "op": "callsub submit_vote",
      "stack_out": []
    },
    "256": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "257": {
      "op": "return"
    },
    "258": {
      "block": "main_set_poll_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "260": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "261": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "262": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "264": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "265": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "268": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "271": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "274": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%26#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0"
      ]
    },
    "277": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "280": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0"
      ]
    },
    "283": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "286": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0"
      ]
    },
    "289": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "292": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%34#0"
      ]
    },
    "293": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "296": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%34#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%34#0",
        "tmp%36#0"
      ]
    },
    "297": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.set_poll",
      "op": "callsub set_poll",
      "stack_out": []
    },
    "300": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "301": {
      "op": "return"
    },
    "302": {
      "block": "main_opt_out_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "304": {
      "op": "intc_2 // CloseOut",
      "defined_out": [
        "CloseOut",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "CloseOut"
      ]
    },
    "305": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "306": {
      "error": "OnCompletion is not CloseOut",
      "op": "assert // OnCompletion is not CloseOut",
      "stack_out": []
    },
    "307": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "309": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "310": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "313": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "314": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "316": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.opt_out",
      "op": "callsub opt_out",
      "stack_out": []
    },
    "319": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "320": {
      "op": "return"
    },
    "321": {
      "block": "main_local_storage_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "323": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "OptIn"
      ]
    },
    "324": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "325": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "326": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "328": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "329": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "332": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "333": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "335": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.local_storage",
      "op": "callsub local_storage",
      "stack_out": []
    },
    "338": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "339": {
      "op": "return"
    },
    "340": {
      "block": "main_generate_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "342": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "343": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "344": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "346": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "347": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "348": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.generate",
      "op": "callsub generate"
    },
    "351": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "352": {
      "op": "return"
    },
    "353": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.generate",
      "params": {},
      "block": "generate",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "356": {
      "op": "txn Sender"
    },
    "358": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "360": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "361": {
      "error": "Transaction sender must match creator address.",
      "op": "assert // Transaction sender must match creator address.",
      "stack_out": []
    },
    "362": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "364": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "366": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "367": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%4#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%4#0"
      ]
    },
    "369": {
      "op": "pushint 528000 // 528000",
      "defined_out": [
        "528000",
        "tmp%4#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%4#0",
        "528000"
      ]
    },
    "373": {
      "op": "+",
      "defined_out": [
        "tmp%6#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%6#0"
      ]
    },
    "374": {
      "op": ">=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "375": {
      "error": "Creator address balance must be equal or greater than Global.min_balance + Global schema MBR amount.",
      "op": "assert // Creator address balance must be equal or greater than Global.min_balance + Global schema MBR amount.",
      "stack_out": []
    },
    "376": {
      "op": "bytec_1 // \"total_accounts_opted_in\"",
      "defined_out": [
        "\"total_accounts_opted_in\""
      ],
      "stack_out": [
        "\"total_accounts_opted_in\""
      ]
    },
    "377": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"total_accounts_opted_in\"",
        "0"
      ],
      "stack_out": [
        "\"total_accounts_opted_in\"",
        "0"
      ]
    },
    "378": {
      "op": "app_global_put",
      "stack_out": []
    },
    "379": {
      "op": "bytec_2 // \"poll_finalized\"",
      "defined_out": [
        "\"poll_finalized\""
      ],
      "stack_out": [
        "\"poll_finalized\""
      ]
    },
    "380": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"poll_finalized\"",
        "0"
      ]
    },
    "381": {
      "op": "app_global_put",
      "stack_out": []
    },
    "382": {
      "op": "bytec_3 // \"choice1_total\"",
      "defined_out": [
        "\"choice1_total\""
      ],
      "stack_out": [
        "\"choice1_total\""
      ]
    },
    "383": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"choice1_total\"",
        "0"
      ]
    },
    "384": {
      "op": "app_global_put",
      "stack_out": []
    },
    "385": {
      "op": "bytec 4 // \"choice2_total\"",
      "defined_out": [
        "\"choice2_total\""
      ],
      "stack_out": [
        "\"choice2_total\""
      ]
    },
    "387": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"choice2_total\"",
        "0"
      ]
    },
    "388": {
      "op": "app_global_put",
      "stack_out": []
    },
    "389": {
      "op": "bytec 5 // \"choice3_total\"",
      "defined_out": [
        "\"choice3_total\""
      ],
      "stack_out": [
        "\"choice3_total\""
      ]
    },
    "391": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"choice3_total\"",
        "0"
      ]
    },
    "392": {
      "op": "app_global_put",
      "stack_out": []
    },
    "393": {
      "op": "bytec 6 // \"total_votes\"",
      "defined_out": [
        "\"total_votes\""
      ],
      "stack_out": [
        "\"total_votes\""
      ]
    },
    "395": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_votes\"",
        "0"
      ]
    },
    "396": {
      "op": "app_global_put",
      "stack_out": []
    },
    "397": {
      "retsub": true,
      "op": "retsub"
    },
    "398": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.local_storage",
      "params": {
        "account#0": "bytes"
      },
      "block": "local_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "401": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "403": {
      "op": "frame_dig -1",
      "defined_out": [
        "account#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "account#0 (copy)"
      ]
    },
    "405": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "406": {
      "error": "Transaction sender must match account address.",
      "op": "assert // Transaction sender must match account address.",
      "stack_out": []
    },
    "407": {
      "op": "frame_dig -1",
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "409": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "411": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "412": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%2#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%2#0"
      ]
    },
    "414": {
      "op": "pushint 157000 // 157000",
      "defined_out": [
        "157000",
        "tmp%2#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%2#0",
        "157000"
      ]
    },
    "418": {
      "op": "+",
      "defined_out": [
        "tmp%4#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%4#0"
      ]
    },
    "419": {
      "op": ">=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "420": {
      "error": "Account address balance must be equal or greater than Global.min_balance + Local schema MBR amount.",
      "op": "assert // Account address balance must be equal or greater than Global.min_balance + Local schema MBR amount.",
      "stack_out": []
    },
    "421": {
      "op": "frame_dig -1",
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "423": {
      "op": "bytec 7 // \"vote_status\"",
      "defined_out": [
        "\"vote_status\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "\"vote_status\""
      ]
    },
    "425": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"vote_status\"",
        "0",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "\"vote_status\"",
        "0"
      ]
    },
    "426": {
      "op": "app_local_put",
      "stack_out": []
    },
    "427": {
      "op": "frame_dig -1",
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "429": {
      "op": "bytec_0 // \"vote_choice\"",
      "defined_out": [
        "\"vote_choice\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "\"vote_choice\""
      ]
    },
    "430": {
      "op": "intc_0 // 0",
      "stack_out": [
        "account#0 (copy)",
        "\"vote_choice\"",
        "0"
      ]
    },
    "431": {
      "op": "app_local_put",
      "stack_out": []
    },
    "432": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "433": {
      "op": "bytec_1 // \"total_accounts_opted_in\"",
      "defined_out": [
        "\"total_accounts_opted_in\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_accounts_opted_in\""
      ]
    },
    "434": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "435": {
      "error": "check self.total_accounts_opted_in exists",
      "op": "assert // check self.total_accounts_opted_in exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "436": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "437": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "438": {
      "op": "bytec_1 // \"total_accounts_opted_in\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_accounts_opted_in\""
      ]
    },
    "439": {
      "op": "swap",
      "stack_out": [
        "\"total_accounts_opted_in\"",
        "new_state_value%0#0"
      ]
    },
    "440": {
      "op": "app_global_put",
      "stack_out": []
    },
    "441": {
      "retsub": true,
      "op": "retsub"
    },
    "442": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.opt_out",
      "params": {
        "account#0": "bytes"
      },
      "block": "opt_out",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "445": {
      "op": "frame_dig -1"
    },
    "447": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "account#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "account#0 (copy)",
        "tmp%0#0"
      ]
    },
    "449": {
      "op": "app_opted_in",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "450": {
      "error": "Account must first be opted-in to App client in order to close out.",
      "op": "assert // Account must first be opted-in to App client in order to close out.",
      "stack_out": []
    },
    "451": {
      "op": "frame_dig -1",
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "453": {
      "op": "bytec 7 // \"vote_status\"",
      "defined_out": [
        "\"vote_status\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "\"vote_status\""
      ]
    },
    "455": {
      "op": "app_local_del",
      "stack_out": []
    },
    "456": {
      "op": "frame_dig -1",
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "458": {
      "op": "bytec_0 // \"vote_choice\"",
      "defined_out": [
        "\"vote_choice\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "\"vote_choice\""
      ]
    },
    "459": {
      "op": "app_local_del",
      "stack_out": []
    },
    "460": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "461": {
      "op": "bytec_1 // \"total_accounts_opted_in\"",
      "defined_out": [
        "\"total_accounts_opted_in\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_accounts_opted_in\""
      ]
    },
    "462": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "463": {
      "error": "check self.total_accounts_opted_in exists",
      "op": "assert // check self.total_accounts_opted_in exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "464": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "465": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "466": {
      "op": "bytec_1 // \"total_accounts_opted_in\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_accounts_opted_in\""
      ]
    },
    "467": {
      "op": "swap",
      "stack_out": [
        "\"total_accounts_opted_in\"",
        "new_state_value%0#0"
      ]
    },
    "468": {
      "op": "app_global_put",
      "stack_out": []
    },
    "469": {
      "retsub": true,
      "op": "retsub"
    },
    "470": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.set_poll",
      "params": {
        "title#0": "bytes",
        "choice1#0": "bytes",
        "choice2#0": "bytes",
        "choice3#0": "bytes",
        "start_date_unix#0": "uint64",
        "end_date_unix#0": "uint64"
      },
      "block": "set_poll",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "473": {
      "op": "txn Sender"
    },
    "475": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "477": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "478": {
      "error": "Only App creator can set up poll.",
      "op": "assert // Only App creator can set up poll.",
      "stack_out": []
    },
    "479": {
      "op": "frame_dig -6",
      "defined_out": [
        "title#0 (copy)"
      ],
      "stack_out": [
        "title#0 (copy)"
      ]
    },
    "481": {
      "op": "len",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "482": {
      "op": "pushint 118 // 118",
      "defined_out": [
        "118",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "118"
      ]
    },
    "484": {
      "op": "<=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "485": {
      "error": "Poll title size can not exceed 118 bytes of data per key-value.",
      "op": "assert // Poll title size can not exceed 118 bytes of data per key-value.",
      "stack_out": []
    },
    "486": {
      "op": "frame_dig -5",
      "defined_out": [
        "choice1#0 (copy)"
      ],
      "stack_out": [
        "choice1#0 (copy)"
      ]
    },
    "488": {
      "op": "len",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "489": {
      "op": "intc_3 // 116",
      "defined_out": [
        "116",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "116"
      ]
    },
    "490": {
      "op": "<=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "491": {
      "op": "bz set_poll_bool_false@4",
      "stack_out": []
    },
    "494": {
      "op": "frame_dig -4"
    },
    "496": {
      "op": "len"
    },
    "497": {
      "op": "intc_3 // 116"
    },
    "498": {
      "op": "<="
    },
    "499": {
      "op": "bz set_poll_bool_false@4"
    },
    "502": {
      "op": "frame_dig -3"
    },
    "504": {
      "op": "len"
    },
    "505": {
      "op": "intc_3 // 116"
    },
    "506": {
      "op": "<="
    },
    "507": {
      "op": "bz set_poll_bool_false@4"
    },
    "510": {
      "op": "intc_1 // 1"
    },
    "511": {
      "block": "set_poll_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "Poll choice size cannot exceed 116 bytes of data per key-value.",
      "op": "assert // Poll choice size cannot exceed 116 bytes of data per key-value.",
      "defined_out": [],
      "stack_out": []
    },
    "512": {
      "op": "frame_dig -2"
    },
    "514": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "start_date_unix#0 (copy)",
        "tmp%11#0"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)",
        "tmp%11#0"
      ]
    },
    "516": {
      "op": ">=",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "517": {
      "error": "Start date must be not be earlier than current date.",
      "op": "assert // Start date must be not be earlier than current date.",
      "stack_out": []
    },
    "518": {
      "op": "frame_dig -1"
    },
    "520": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "end_date_unix#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "end_date_unix#0 (copy)",
        "tmp%13#0"
      ]
    },
    "522": {
      "op": ">=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "523": {
      "error": "End date must not be earlier than the current timestamp.",
      "op": "assert // End date must not be earlier than the current timestamp.",
      "stack_out": []
    },
    "524": {
      "op": "frame_dig -2",
      "stack_out": [
        "start_date_unix#0 (copy)"
      ]
    },
    "526": {
      "op": "frame_dig -1",
      "stack_out": [
        "start_date_unix#0 (copy)",
        "end_date_unix#0 (copy)"
      ]
    },
    "528": {
      "op": "<",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "529": {
      "error": "Start date must be earlier than end date.",
      "op": "assert // Start date must be earlier than end date.",
      "stack_out": []
    },
    "530": {
      "op": "frame_dig -2",
      "stack_out": [
        "start_date_unix#0 (copy)"
      ]
    },
    "532": {
      "op": "pushint 259200 // 259200",
      "defined_out": [
        "259200",
        "start_date_unix#0 (copy)"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)",
        "259200"
      ]
    },
    "536": {
      "op": "+",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "537": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%16#0",
        "end_date_unix#0 (copy)"
      ]
    },
    "539": {
      "op": "<=",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "540": {
      "error": "End date must be at least 3 days later than the start date.",
      "op": "assert // End date must be at least 3 days later than the start date.",
      "stack_out": []
    },
    "541": {
      "op": "frame_dig -1",
      "stack_out": [
        "end_date_unix#0 (copy)"
      ]
    },
    "543": {
      "op": "frame_dig -2",
      "stack_out": [
        "end_date_unix#0 (copy)",
        "start_date_unix#0 (copy)"
      ]
    },
    "545": {
      "op": "-",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "546": {
      "op": "pushint 1209600 // 1209600",
      "defined_out": [
        "1209600",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "1209600"
      ]
    },
    "550": {
      "op": "<=",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "551": {
      "error": "Voting period can not exceed 14 days.",
      "op": "assert // Voting period can not exceed 14 days.",
      "stack_out": []
    },
    "552": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "553": {
      "op": "bytec_2 // \"poll_finalized\"",
      "defined_out": [
        "\"poll_finalized\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"poll_finalized\""
      ]
    },
    "554": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "555": {
      "error": "check self.poll_finalized exists",
      "op": "assert // check self.poll_finalized exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "556": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "557": {
      "error": "Poll can only be setup once.",
      "op": "assert // Poll can only be setup once.",
      "stack_out": []
    },
    "558": {
      "op": "pushbytes \"poll_title\"",
      "defined_out": [
        "\"poll_title\""
      ],
      "stack_out": [
        "\"poll_title\""
      ]
    },
    "570": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"poll_title\"",
        "title#0 (copy)"
      ],
      "stack_out": [
        "\"poll_title\"",
        "title#0 (copy)"
      ]
    },
    "572": {
      "op": "app_global_put",
      "stack_out": []
    },
    "573": {
      "op": "pushbytes \"poll_choice1\"",
      "defined_out": [
        "\"poll_choice1\""
      ],
      "stack_out": [
        "\"poll_choice1\""
      ]
    },
    "587": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"poll_choice1\"",
        "choice1#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice1\"",
        "choice1#0 (copy)"
      ]
    },
    "589": {
      "op": "app_global_put",
      "stack_out": []
    },
    "590": {
      "op": "pushbytes \"poll_choice2\"",
      "defined_out": [
        "\"poll_choice2\""
      ],
      "stack_out": [
        "\"poll_choice2\""
      ]
    },
    "604": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"poll_choice2\"",
        "choice2#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice2\"",
        "choice2#0 (copy)"
      ]
    },
    "606": {
      "op": "app_global_put",
      "stack_out": []
    },
    "607": {
      "op": "pushbytes \"poll_choice3\"",
      "defined_out": [
        "\"poll_choice3\""
      ],
      "stack_out": [
        "\"poll_choice3\""
      ]
    },
    "621": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"poll_choice3\"",
        "choice3#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice3\"",
        "choice3#0 (copy)"
      ]
    },
    "623": {
      "op": "app_global_put",
      "stack_out": []
    },
    "624": {
      "op": "bytec 8 // \"poll_start_date_unix\"",
      "defined_out": [
        "\"poll_start_date_unix\""
      ],
      "stack_out": [
        "\"poll_start_date_unix\""
      ]
    },
    "626": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"poll_start_date_unix\"",
        "start_date_unix#0 (copy)"
      ]
    },
    "628": {
      "op": "app_global_put",
      "stack_out": []
    },
    "629": {
      "op": "bytec 9 // \"poll_end_date_unix\"",
      "defined_out": [
        "\"poll_end_date_unix\""
      ],
      "stack_out": [
        "\"poll_end_date_unix\""
      ]
    },
    "631": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"poll_end_date_unix\"",
        "end_date_unix#0 (copy)"
      ]
    },
    "633": {
      "op": "app_global_put",
      "stack_out": []
    },
    "634": {
      "op": "bytec_2 // \"poll_finalized\"",
      "stack_out": [
        "\"poll_finalized\""
      ]
    },
    "635": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"poll_finalized\"",
        "1"
      ],
      "stack_out": [
        "\"poll_finalized\"",
        "1"
      ]
    },
    "636": {
      "op": "app_global_put",
      "stack_out": []
    },
    "637": {
      "retsub": true,
      "op": "retsub"
    },
    "638": {
      "block": "set_poll_bool_false@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "639": {
      "op": "b set_poll_bool_merge@5"
    },
    "642": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.submit_vote",
      "params": {
        "account#0": "bytes",
        "choice#0": "uint64"
      },
      "block": "submit_vote",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "645": {
      "op": "frame_dig -2"
    },
    "647": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "account#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "account#0 (copy)",
        "tmp%0#0"
      ]
    },
    "649": {
      "op": "app_opted_in",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "650": {
      "error": "Account must be opted-in before voting.",
      "op": "assert // Account must be opted-in before voting.",
      "stack_out": []
    },
    "651": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "653": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "654": {
      "op": "bytec 8 // \"poll_start_date_unix\"",
      "defined_out": [
        "\"poll_start_date_unix\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"poll_start_date_unix\""
      ]
    },
    "656": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "657": {
      "error": "check self.poll_start_date_unix exists",
      "op": "assert // check self.poll_start_date_unix exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "658": {
      "op": ">=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "659": {
      "error": "Voting period has not started yet.",
      "op": "assert // Voting period has not started yet.",
      "stack_out": []
    },
    "660": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "662": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "663": {
      "op": "bytec 9 // \"poll_end_date_unix\"",
      "defined_out": [
        "\"poll_end_date_unix\"",
        "0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0",
        "\"poll_end_date_unix\""
      ]
    },
    "665": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "666": {
      "error": "check self.poll_end_date_unix exists",
      "op": "assert // check self.poll_end_date_unix exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%1#0"
      ]
    },
    "667": {
      "op": "<=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "668": {
      "error": "Voting period has ended.",
      "op": "assert // Voting period has ended.",
      "stack_out": []
    },
    "669": {
      "op": "frame_dig -2",
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "671": {
      "op": "intc_0 // 0",
      "stack_out": [
        "account#0 (copy)",
        "0"
      ]
    },
    "672": {
      "op": "bytec_0 // \"vote_choice\"",
      "defined_out": [
        "\"vote_choice\"",
        "0",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "0",
        "\"vote_choice\""
      ]
    },
    "673": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "674": {
      "error": "check self.local_vote_choice exists for account",
      "op": "assert // check self.local_vote_choice exists for account",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "675": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "676": {
      "error": "This account already submitted a vote.",
      "op": "assert // This account already submitted a vote.",
      "stack_out": []
    },
    "677": {
      "op": "frame_dig -1",
      "defined_out": [
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)"
      ]
    },
    "679": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)",
        "1"
      ]
    },
    "680": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "681": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "682": {
      "op": "bnz submit_vote_bool_true@3",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "685": {
      "op": "frame_dig -1"
    },
    "687": {
      "op": "intc_2 // 2"
    },
    "688": {
      "op": "=="
    },
    "689": {
      "op": "bnz submit_vote_bool_true@3"
    },
    "692": {
      "op": "frame_dig -1"
    },
    "694": {
      "op": "pushint 3 // 3"
    },
    "696": {
      "op": "=="
    },
    "697": {
      "op": "bz submit_vote_bool_false@4"
    },
    "700": {
      "block": "submit_vote_bool_true@3",
      "stack_in": [
        "tmp%7#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "or_result%0#0"
      ]
    },
    "701": {
      "block": "submit_vote_bool_merge@5",
      "stack_in": [
        "tmp%7#0",
        "or_result%0#0"
      ],
      "error": "Invalid choice. Can only choose between choices 1, 2, 3.",
      "op": "assert // Invalid choice. Can only choose between choices 1, 2, 3.",
      "defined_out": [],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "702": {
      "op": "frame_dig -2",
      "defined_out": [
        "account#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "account#0 (copy)"
      ]
    },
    "704": {
      "op": "bytec 7 // \"vote_status\"",
      "defined_out": [
        "\"vote_status\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "account#0 (copy)",
        "\"vote_status\""
      ]
    },
    "706": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"vote_status\"",
        "1",
        "account#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "account#0 (copy)",
        "\"vote_status\"",
        "1"
      ]
    },
    "707": {
      "op": "app_local_put",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "708": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "709": {
      "op": "bytec 6 // \"total_votes\"",
      "defined_out": [
        "\"total_votes\"",
        "0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"total_votes\""
      ]
    },
    "711": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "712": {
      "error": "check self.total_votes exists",
      "op": "assert // check self.total_votes exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%3#0"
      ]
    },
    "713": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "714": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "new_state_value%0#0"
      ]
    },
    "715": {
      "op": "bytec 6 // \"total_votes\"",
      "stack_out": [
        "tmp%7#0",
        "new_state_value%0#0",
        "\"total_votes\""
      ]
    },
    "717": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "\"total_votes\"",
        "new_state_value%0#0"
      ]
    },
    "718": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "719": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "721": {
      "op": "bz submit_vote_else_body@7",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "724": {
      "op": "intc_0 // 0"
    },
    "725": {
      "op": "bytec_3 // \"choice1_total\""
    },
    "726": {
      "op": "app_global_get_ex"
    },
    "727": {
      "error": "check self.choice1_total exists",
      "op": "assert // check self.choice1_total exists"
    },
    "728": {
      "op": "intc_1 // 1"
    },
    "729": {
      "op": "+"
    },
    "730": {
      "op": "bytec_3 // \"choice1_total\""
    },
    "731": {
      "op": "swap"
    },
    "732": {
      "op": "app_global_put"
    },
    "733": {
      "op": "frame_dig -2"
    },
    "735": {
      "op": "bytec_0 // \"vote_choice\""
    },
    "736": {
      "op": "intc_1 // 1"
    },
    "737": {
      "op": "app_local_put"
    },
    "738": {
      "retsub": true,
      "op": "retsub"
    },
    "739": {
      "block": "submit_vote_else_body@7",
      "stack_in": [
        "tmp%7#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "choice#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "choice#0 (copy)"
      ]
    },
    "741": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "choice#0 (copy)",
        "2"
      ]
    },
    "742": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%11#0"
      ]
    },
    "743": {
      "op": "bz submit_vote_else_body@9",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "746": {
      "op": "intc_0 // 0"
    },
    "747": {
      "op": "bytec 4 // \"choice2_total\""
    },
    "749": {
      "op": "app_global_get_ex"
    },
    "750": {
      "error": "check self.choice2_total exists",
      "op": "assert // check self.choice2_total exists"
    },
    "751": {
      "op": "intc_1 // 1"
    },
    "752": {
      "op": "+"
    },
    "753": {
      "op": "bytec 4 // \"choice2_total\""
    },
    "755": {
      "op": "swap"
    },
    "756": {
      "op": "app_global_put"
    },
    "757": {
      "op": "frame_dig -2"
    },
    "759": {
      "op": "bytec_0 // \"vote_choice\""
    },
    "760": {
      "op": "intc_2 // 2"
    },
    "761": {
      "op": "app_local_put"
    },
    "762": {
      "retsub": true,
      "op": "retsub"
    },
    "763": {
      "block": "submit_vote_else_body@9",
      "stack_in": [
        "tmp%7#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "764": {
      "op": "bytec 5 // \"choice3_total\"",
      "defined_out": [
        "\"choice3_total\"",
        "0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"choice3_total\""
      ]
    },
    "766": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "767": {
      "error": "check self.choice3_total exists",
      "op": "assert // check self.choice3_total exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%6#0"
      ]
    },
    "768": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%6#0",
        "1"
      ]
    },
    "769": {
      "op": "+",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "new_state_value%3#0"
      ]
    },
    "770": {
      "op": "bytec 5 // \"choice3_total\"",
      "stack_out": [
        "tmp%7#0",
        "new_state_value%3#0",
        "\"choice3_total\""
      ]
    },
    "772": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "\"choice3_total\"",
        "new_state_value%3#0"
      ]
    },
    "773": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "774": {
      "op": "frame_dig -2",
      "defined_out": [
        "account#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "account#0 (copy)"
      ]
    },
    "776": {
      "op": "bytec_0 // \"vote_choice\"",
      "defined_out": [
        "\"vote_choice\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "account#0 (copy)",
        "\"vote_choice\""
      ]
    },
    "777": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "\"vote_choice\"",
        "3",
        "account#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "account#0 (copy)",
        "\"vote_choice\"",
        "3"
      ]
    },
    "779": {
      "op": "app_local_put",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "780": {
      "retsub": true,
      "op": "retsub"
    },
    "781": {
      "block": "submit_vote_bool_false@4",
      "stack_in": [
        "tmp%7#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "or_result%0#0"
      ]
    },
    "782": {
      "op": "b submit_vote_bool_merge@5"
    },
    "785": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.terminate",
      "params": {},
      "block": "terminate",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "788": {
      "op": "txn Sender"
    },
    "790": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "792": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "793": {
      "error": "Only App creator can terminate the App.",
      "op": "assert // Only App creator can terminate the App.",
      "stack_out": []
    },
    "794": {
      "retsub": true,
      "op": "retsub"
    }
  }
}