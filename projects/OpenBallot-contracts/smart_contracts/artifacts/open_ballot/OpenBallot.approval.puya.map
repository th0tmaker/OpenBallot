{
  "version": 3,
  "sources": [
    "../../open_ballot/contract.py"
  ],
  "mappings": "AAwBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;AA4WK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AA7UL;;;AA6UK;;;AAAA;;AApDA;;AAAA;AAAA;AAAA;;AAAA;AAzRL;;;AAyRK;;;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAnCA;;AAAA;AAAA;AAAA;;AAAA;AA/ML;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+MK;;;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AAxKL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwKK;;;AAAA;;AAzDA;;AAAA;AAAA;AAAA;;AAAA;AA/GL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AA+GK;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAEU;;AAFV;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAL;;;AAIY;;AAAc;;AAAd;AADJ;AAIO;;AAAA;;AAAA;AACH;;AAtCG;;;;AAsCH;AADG;AAAP;AAQA;AAAsB;AAAtB;AAEA;;AAAqB;AAArB;AACA;;AAAqB;AAArB;AACA;;AAAqB;AAArB;AACA;;AAAmB;AAAnB;AAEA;AAAoB;AAApB;AACA;AAA4B;AAA5B;;AAQR;;;AAWe;;AAAc;;AAAd;AAAP;AAEO;;AAAA;AAAgB;;AAAhB;AAAP;AAKI;;AAAA;AAAkB;AAAlB;AAAA;;;AACI;;AAAA;AAAkB;AAAlB;AADJ;;;AAEI;;AAAA;AAAkB;AAAlB;AAFJ;;;;AADJ;AAeI;;AAAA;;AAAA;AADJ;AAIwB;;AAAkB;;;;AAAlB;AAAjB;;AAAA;AAAP;AAIO;;AAAA;;AAAA;AAAmC;;;;AAAnC;AAAP;AAIO;AAAA;AAAA;AAAA;AAAA;AAAP;AAGA;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AAGA;AAAsB;AAAtB;;;;;;AAGR;;;AAIY;;AAAc;;AAAd;AADJ;AAKsB;AAAlB;;AAAA;AAAA;AAAA;;AAAA;AADJ;AAKI;;AAAA;;AAAkB;;AAAlB;AADJ;AAKI;;AAAA;;AAAoB;;AAApB;AADJ;AAKI;;AAAA;;AA3HG;AA2HH;AADJ;AAKO;;AAAA;;AAAA;AACH;;AAhIG;AAgIH;AADG;AAAP;AAKI;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AADJ;AAMiC;AAA9B;;AAAA;AAAA;AAAA;;AAAA;;;AACC;AAAsB;;AAAtB;AAAgD;;AAAhD;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;;AAGZ;;;AAIY;;AAAc;;AAAd;AADJ;AAKsB;AAAlB;;AAAA;AAAA;AAAA;;AAAA;AADJ;AAKI;;AAAA;;AAAsB;AAAtB;AAAA;AAAA;AAAA;;AAAA;AADJ;AAKI;;AAAA;;AAAoB;;AAApB;AADJ;AAKI;;AAAA;;AAlKG;AAkKH;AADJ;AAMI;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AADJ;AAMqB;AAAlB;;AAAA;AAAA;AAAA;;AAAA;;;AACC;AAAsB;;AAAtB;AAAoC;;AAApC;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;;AAGZ;;;AAQ0B;AAAd;;AAAA;AAAA;AAAA;;AADJ;AAW8B;AACnB;;AACE;;AAGJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFE;;;;;;;;;AAHmB;;;AAItB;;;;AAJsB;;;;;AASY;;AAAtC;AADJ;AAK4C;;AAAxC;AADJ;AAKI;AAAsB;;AAAtB;AAAJ;;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;;AAGR;;;AAI0B;AAAd;;AAAA;AAAA;AAAA;;AADJ;AAKI;AAAsB;;AAAtB;AAAA;AAAA;AAAA;;;AAEE;;;AAHC;AAEH;AAAsB;;AAAtB;AAAA;AAAA;AAAA;;;AACiB;;;AAHd;AAAA;AAAP;AAsBI;;AAAU;;;AAAV;AAAA;;;AACG;;AAAU;;;AAAV;AADH;;;AAEG;;AAAU;;;AAAV;AAFH;;;;AADJ;AAU8C;;;AAAV;;AAAA;AAApC;AAAsB;;AAAtB;AAAA;AAAA;AAGa;AAAV;AAAA;;AAAA;AAAX;;;AACY;AAAA;;AAAA;AAAA;AAAsB;AAAtB;AAAA;;AAAA;AAAA;AAOJ;AAAA;;AAAA;AAAA;AAAoB;AAApB;AAAA;;AAAA;AAAA;;AANe;;AAAV;AAAA;;AAAA;AAAb;;;AACY;AAAA;;AAAA;AAAA;AAAsB;AAAtB;AAAA;;AAAA;AAAA;;;;AAEA;AAAA;;AAAA;AAAA;AAAsB;AAAtB;AAAA;;AAAA;AAAA;;;;;;;;AAMZ;;;AAIY;;AAAc;;AAAd;AADJ;AASI;;AAAA;AAAA;AAAA;AAAmB;;AAAnB;AADJ;;AAKR;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAGkC;AAAlB;;AAAA;AAAA;AAAA;AAAA;;AADJ;AAKsB;;AAAlB;;AAAA;AADJ;AAIA;;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAA6B;AAA7B;AAAA;AAAA;AAAA;;;;;;;;;AAGZ;;;AAGe;;AAAP;AAKI;;AAAc;;AAAd;AADJ;AAK8B;AAA1B;;AAAA;AAAA;AAAA;;AADJ;AAUI;AAAsB;;AAAtB;AAAJ;;AACA;AAAA;AAAA;AAAA;AAAqB;AAArB;AAAA;AAAA;AAAA;AAIsB;AAAA;AAAA;AAAA;AArUf;AAqUe;AAA0D;;AAA1D;AAEQ;AACnB;;AACE;;AAGU;AACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AANqB;;;AAItB;;;;AAJsB;;;;;AAWY;;AAAtC;AADJ;AAK4C;;AAAxC;AADJ;AAKA;AAA2B;AAA3B;",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "2": {
      "op": "bz main_after_if_else@14",
      "stack_out": []
    },
    "5": {
      "op": "pushbytess 0x5be219f0 0x81e1658f 0xe6bf4f23 0xfe7b6e39 0x8c2ecf22 0x6e0b83b9 0x761dd0fa 0xdcc9ce3b 0x5ff16da4 // method \"generate()void\", method \"get_version_unix()uint64\", method \"set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void\", method \"fund_app_mbr(pay)void\", method \"request_box_storage(pay)void\", method \"delete_box_storage()void\", method \"submit_vote(uint8)void\", method \"cleanup_box_storage(address[])void\", method \"terminate()void\""
    },
    "52": {
      "op": "txna ApplicationArgs 0"
    },
    "55": {
      "op": "match main_generate_route@5 main_get_version_unix_route@6 main_set_poll_route@7 main_fund_app_mbr_route@8 main_request_box_storage_route@9 main_delete_box_storage_route@10 main_submit_vote_route@11 main_cleanup_box_storage_route@12 main_terminate_route@13"
    },
    "75": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "76": {
      "op": "return"
    },
    "77": {
      "block": "main_terminate_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "79": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "DeleteApplication"
      ]
    },
    "81": {
      "op": "==",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "82": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "83": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "85": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "86": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.terminate",
      "op": "callsub terminate"
    },
    "89": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "90": {
      "op": "return"
    },
    "91": {
      "block": "main_cleanup_box_storage_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "93": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "94": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "95": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "97": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "98": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "101": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.cleanup_box_storage",
      "op": "callsub cleanup_box_storage",
      "stack_out": []
    },
    "104": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "105": {
      "op": "return"
    },
    "106": {
      "block": "main_submit_vote_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "108": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "109": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "110": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "112": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "113": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "116": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.submit_vote",
      "op": "callsub submit_vote",
      "stack_out": []
    },
    "119": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "120": {
      "op": "return"
    },
    "121": {
      "block": "main_delete_box_storage_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "123": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "124": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "125": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "127": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "128": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.delete_box_storage",
      "op": "callsub delete_box_storage"
    },
    "131": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "132": {
      "op": "return"
    },
    "133": {
      "block": "main_request_box_storage_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "135": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "136": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "137": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "139": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "140": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "142": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "1"
      ]
    },
    "143": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "144": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "145": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "147": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "148": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "149": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "150": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.request_box_storage",
      "op": "callsub request_box_storage",
      "stack_out": []
    },
    "153": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "154": {
      "op": "return"
    },
    "155": {
      "block": "main_fund_app_mbr_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "157": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "158": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "159": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "161": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "162": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "164": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "1"
      ]
    },
    "165": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "166": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "167": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "169": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "170": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "171": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "172": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.fund_app_mbr",
      "op": "callsub fund_app_mbr",
      "stack_out": []
    },
    "175": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "176": {
      "op": "return"
    },
    "177": {
      "block": "main_set_poll_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "179": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "180": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "181": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "183": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "184": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "187": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "190": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "193": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "196": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "199": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "202": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "205": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "208": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "211": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "212": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "215": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0",
        "tmp%27#0"
      ]
    },
    "216": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.set_poll",
      "op": "callsub set_poll",
      "stack_out": []
    },
    "219": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "220": {
      "op": "return"
    },
    "221": {
      "block": "main_get_version_unix_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "223": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "224": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "225": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "227": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "228": {
      "op": "intc 5 // TMPL_VERSION_UNIX",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "230": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "231": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "237": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "238": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "239": {
      "op": "log",
      "stack_out": []
    },
    "240": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "241": {
      "op": "return"
    },
    "242": {
      "block": "main_generate_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "244": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "245": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "246": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "248": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "249": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "250": {
      "callsub": "smart_contracts.open_ballot.contract.OpenBallot.generate",
      "op": "callsub generate"
    },
    "253": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "254": {
      "op": "return"
    },
    "255": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.generate",
      "params": {},
      "block": "generate",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "258": {
      "op": "txn Sender"
    },
    "260": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "262": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "263": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "264": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "266": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "268": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "269": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%4#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%4#0"
      ]
    },
    "271": {
      "op": "pushint 556500 // 556500",
      "defined_out": [
        "556500",
        "tmp%4#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%4#0",
        "556500"
      ]
    },
    "275": {
      "op": "+",
      "defined_out": [
        "tmp%6#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%6#0"
      ]
    },
    "276": {
      "op": ">=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "277": {
      "error": "Application creator address balance must be equal or greater than Global.min_balance + Global schema MBR.",
      "op": "assert // Application creator address balance must be equal or greater than Global.min_balance + Global schema MBR.",
      "stack_out": []
    },
    "278": {
      "op": "bytec_3 // \"poll_finalized\"",
      "defined_out": [
        "\"poll_finalized\""
      ],
      "stack_out": [
        "\"poll_finalized\""
      ]
    },
    "279": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"poll_finalized\"",
        "0"
      ],
      "stack_out": [
        "\"poll_finalized\"",
        "0"
      ]
    },
    "280": {
      "op": "app_global_put",
      "stack_out": []
    },
    "281": {
      "op": "bytec 4 // \"total_choice1\"",
      "defined_out": [
        "\"total_choice1\""
      ],
      "stack_out": [
        "\"total_choice1\""
      ]
    },
    "283": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_choice1\"",
        "0"
      ]
    },
    "284": {
      "op": "app_global_put",
      "stack_out": []
    },
    "285": {
      "op": "bytec 5 // \"total_choice2\"",
      "defined_out": [
        "\"total_choice2\""
      ],
      "stack_out": [
        "\"total_choice2\""
      ]
    },
    "287": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_choice2\"",
        "0"
      ]
    },
    "288": {
      "op": "app_global_put",
      "stack_out": []
    },
    "289": {
      "op": "bytec 6 // \"total_choice3\"",
      "defined_out": [
        "\"total_choice3\""
      ],
      "stack_out": [
        "\"total_choice3\""
      ]
    },
    "291": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_choice3\"",
        "0"
      ]
    },
    "292": {
      "op": "app_global_put",
      "stack_out": []
    },
    "293": {
      "op": "bytec 7 // \"total_votes\"",
      "defined_out": [
        "\"total_votes\""
      ],
      "stack_out": [
        "\"total_votes\""
      ]
    },
    "295": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_votes\"",
        "0"
      ]
    },
    "296": {
      "op": "app_global_put",
      "stack_out": []
    },
    "297": {
      "op": "bytec_1 // \"total_box_a_\"",
      "defined_out": [
        "\"total_box_a_\""
      ],
      "stack_out": [
        "\"total_box_a_\""
      ]
    },
    "298": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_box_a_\"",
        "0"
      ]
    },
    "299": {
      "op": "app_global_put",
      "stack_out": []
    },
    "300": {
      "op": "bytec_2 // \"total_cleaned_box_a_\"",
      "defined_out": [
        "\"total_cleaned_box_a_\""
      ],
      "stack_out": [
        "\"total_cleaned_box_a_\""
      ]
    },
    "301": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_cleaned_box_a_\"",
        "0"
      ]
    },
    "302": {
      "op": "app_global_put",
      "stack_out": []
    },
    "303": {
      "retsub": true,
      "op": "retsub"
    },
    "304": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.set_poll",
      "params": {
        "title#0": "bytes",
        "choice1#0": "bytes",
        "choice2#0": "bytes",
        "choice3#0": "bytes",
        "start_date_unix#0": "uint64",
        "end_date_unix#0": "uint64"
      },
      "block": "set_poll",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "307": {
      "op": "txn Sender"
    },
    "309": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "311": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "312": {
      "error": "Only application creator can set up poll.",
      "op": "assert // Only application creator can set up poll.",
      "stack_out": []
    },
    "313": {
      "op": "frame_dig -6",
      "defined_out": [
        "title#0 (copy)"
      ],
      "stack_out": [
        "title#0 (copy)"
      ]
    },
    "315": {
      "op": "len",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "316": {
      "op": "pushint 118 // 118",
      "defined_out": [
        "118",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "118"
      ]
    },
    "318": {
      "op": "<=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "319": {
      "error": "Poll title size can not exceed 118 bytes of data per key-value.",
      "op": "assert // Poll title size can not exceed 118 bytes of data per key-value.",
      "stack_out": []
    },
    "320": {
      "op": "frame_dig -5",
      "defined_out": [
        "choice1#0 (copy)"
      ],
      "stack_out": [
        "choice1#0 (copy)"
      ]
    },
    "322": {
      "op": "len",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "323": {
      "op": "intc_3 // 116",
      "defined_out": [
        "116",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "116"
      ]
    },
    "324": {
      "op": "<=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "325": {
      "op": "bz set_poll_bool_false@4",
      "stack_out": []
    },
    "328": {
      "op": "frame_dig -4"
    },
    "330": {
      "op": "len"
    },
    "331": {
      "op": "intc_3 // 116"
    },
    "332": {
      "op": "<="
    },
    "333": {
      "op": "bz set_poll_bool_false@4"
    },
    "336": {
      "op": "frame_dig -3"
    },
    "338": {
      "op": "len"
    },
    "339": {
      "op": "intc_3 // 116"
    },
    "340": {
      "op": "<="
    },
    "341": {
      "op": "bz set_poll_bool_false@4"
    },
    "344": {
      "op": "intc_0 // 1"
    },
    "345": {
      "block": "set_poll_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "Poll choice size cannot exceed 116 bytes of data per key-value.",
      "op": "assert // Poll choice size cannot exceed 116 bytes of data per key-value.",
      "defined_out": [],
      "stack_out": []
    },
    "346": {
      "op": "frame_dig -2",
      "defined_out": [
        "start_date_unix#0 (copy)"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)"
      ]
    },
    "348": {
      "op": "frame_dig -1",
      "defined_out": [
        "end_date_unix#0 (copy)",
        "start_date_unix#0 (copy)"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)",
        "end_date_unix#0 (copy)"
      ]
    },
    "350": {
      "op": "<",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "351": {
      "error": "Start date must be earlier than end date.",
      "op": "assert // Start date must be earlier than end date.",
      "stack_out": []
    },
    "352": {
      "op": "frame_dig -2",
      "stack_out": [
        "start_date_unix#0 (copy)"
      ]
    },
    "354": {
      "op": "pushint 259200 // 259200",
      "defined_out": [
        "259200",
        "start_date_unix#0 (copy)"
      ],
      "stack_out": [
        "start_date_unix#0 (copy)",
        "259200"
      ]
    },
    "358": {
      "op": "+",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "359": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "end_date_unix#0 (copy)"
      ]
    },
    "361": {
      "op": "<=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "362": {
      "error": "End date must be at least 3 days later than the start date.",
      "op": "assert // End date must be at least 3 days later than the start date.",
      "stack_out": []
    },
    "363": {
      "op": "frame_dig -1",
      "stack_out": [
        "end_date_unix#0 (copy)"
      ]
    },
    "365": {
      "op": "frame_dig -2",
      "stack_out": [
        "end_date_unix#0 (copy)",
        "start_date_unix#0 (copy)"
      ]
    },
    "367": {
      "op": "-",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "368": {
      "op": "pushint 1209600 // 1209600",
      "defined_out": [
        "1209600",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1209600"
      ]
    },
    "372": {
      "op": "<=",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "373": {
      "error": "Voting period can not exceed 14 days.",
      "op": "assert // Voting period can not exceed 14 days.",
      "stack_out": []
    },
    "374": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "375": {
      "op": "bytec_3 // \"poll_finalized\"",
      "defined_out": [
        "\"poll_finalized\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"poll_finalized\""
      ]
    },
    "376": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "377": {
      "error": "check self.poll_finalized exists",
      "op": "assert // check self.poll_finalized exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "378": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "379": {
      "error": "Poll can only be setup once.",
      "op": "assert // Poll can only be setup once.",
      "stack_out": []
    },
    "380": {
      "op": "pushbytes \"poll_title\"",
      "defined_out": [
        "\"poll_title\""
      ],
      "stack_out": [
        "\"poll_title\""
      ]
    },
    "392": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"poll_title\"",
        "title#0 (copy)"
      ],
      "stack_out": [
        "\"poll_title\"",
        "title#0 (copy)"
      ]
    },
    "394": {
      "op": "app_global_put",
      "stack_out": []
    },
    "395": {
      "op": "pushbytes \"poll_choice1\"",
      "defined_out": [
        "\"poll_choice1\""
      ],
      "stack_out": [
        "\"poll_choice1\""
      ]
    },
    "409": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"poll_choice1\"",
        "choice1#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice1\"",
        "choice1#0 (copy)"
      ]
    },
    "411": {
      "op": "app_global_put",
      "stack_out": []
    },
    "412": {
      "op": "pushbytes \"poll_choice2\"",
      "defined_out": [
        "\"poll_choice2\""
      ],
      "stack_out": [
        "\"poll_choice2\""
      ]
    },
    "426": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"poll_choice2\"",
        "choice2#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice2\"",
        "choice2#0 (copy)"
      ]
    },
    "428": {
      "op": "app_global_put",
      "stack_out": []
    },
    "429": {
      "op": "pushbytes \"poll_choice3\"",
      "defined_out": [
        "\"poll_choice3\""
      ],
      "stack_out": [
        "\"poll_choice3\""
      ]
    },
    "443": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"poll_choice3\"",
        "choice3#0 (copy)"
      ],
      "stack_out": [
        "\"poll_choice3\"",
        "choice3#0 (copy)"
      ]
    },
    "445": {
      "op": "app_global_put",
      "stack_out": []
    },
    "446": {
      "op": "pushbytes \"poll_start_date_unix\"",
      "defined_out": [
        "\"poll_start_date_unix\""
      ],
      "stack_out": [
        "\"poll_start_date_unix\""
      ]
    },
    "468": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"poll_start_date_unix\"",
        "start_date_unix#0 (copy)"
      ]
    },
    "470": {
      "op": "app_global_put",
      "stack_out": []
    },
    "471": {
      "op": "bytec 8 // \"poll_end_date_unix\"",
      "defined_out": [
        "\"poll_end_date_unix\""
      ],
      "stack_out": [
        "\"poll_end_date_unix\""
      ]
    },
    "473": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"poll_end_date_unix\"",
        "end_date_unix#0 (copy)"
      ]
    },
    "475": {
      "op": "app_global_put",
      "stack_out": []
    },
    "476": {
      "op": "bytec_3 // \"poll_finalized\"",
      "stack_out": [
        "\"poll_finalized\""
      ]
    },
    "477": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"poll_finalized\"",
        "1"
      ],
      "stack_out": [
        "\"poll_finalized\"",
        "1"
      ]
    },
    "478": {
      "op": "app_global_put",
      "stack_out": []
    },
    "479": {
      "retsub": true,
      "op": "retsub"
    },
    "480": {
      "block": "set_poll_bool_false@4",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "481": {
      "op": "b set_poll_bool_merge@5"
    },
    "484": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.fund_app_mbr",
      "params": {
        "mbr_pay#0": "uint64"
      },
      "block": "fund_app_mbr",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "487": {
      "op": "txn Sender"
    },
    "489": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "491": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "492": {
      "error": "Transaction sender address must match application creator address.",
      "op": "assert // Transaction sender address must match application creator address.",
      "stack_out": []
    },
    "493": {
      "op": "bytec_0 // 0x615f"
    },
    "494": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%3#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%3#0"
      ]
    },
    "496": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "497": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "498": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "500": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "501": {
      "error": "Transaction sender address already present in box a_.",
      "op": "assert // Transaction sender address already present in box a_.",
      "stack_out": []
    },
    "502": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbr_pay#0 (copy)"
      ],
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "504": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "506": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "508": {
      "op": "==",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "509": {
      "error": "MBR payment sender address must match appplication creator address.",
      "op": "assert // MBR payment sender address must match appplication creator address.",
      "stack_out": []
    },
    "510": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "512": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "514": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "516": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "517": {
      "error": "MBR payment reciever address must match application address.",
      "op": "assert // MBR payment reciever address must match application address.",
      "stack_out": []
    },
    "518": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "520": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "522": {
      "op": "intc_2 // 16900",
      "defined_out": [
        "16900",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "16900"
      ]
    },
    "523": {
      "op": ">=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "524": {
      "error": "MBR payment for box storage must meet the minimum requirement amount.",
      "op": "assert // MBR payment for box storage must meet the minimum requirement amount.",
      "stack_out": []
    },
    "525": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "527": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "529": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "530": {
      "op": "global MinBalance",
      "defined_out": [
        "tmp%16#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%16#0"
      ]
    },
    "532": {
      "op": "intc_2 // 16900",
      "stack_out": [
        "value%0#0",
        "tmp%16#0",
        "16900"
      ]
    },
    "533": {
      "op": "+",
      "defined_out": [
        "tmp%18#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%18#0"
      ]
    },
    "534": {
      "op": ">=",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "535": {
      "error": "Application address balance must be equal or greater than Global.min_balance + Box storage fee.",
      "op": "assert // Application address balance must be equal or greater than Global.min_balance + Box storage fee.",
      "stack_out": []
    },
    "536": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "538": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0"
      ]
    },
    "539": {
      "op": "bytec 8 // \"poll_end_date_unix\"",
      "defined_out": [
        "\"poll_end_date_unix\"",
        "0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0",
        "\"poll_end_date_unix\""
      ]
    },
    "541": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "542": {
      "error": "check self.poll_end_date_unix exists",
      "op": "assert // check self.poll_end_date_unix exists",
      "stack_out": [
        "tmp%20#0",
        "maybe_value%1#0"
      ]
    },
    "543": {
      "op": "<=",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "544": {
      "error": "Unable to fund app mbr if voting period is over.",
      "op": "assert // Unable to fund app mbr if voting period is over.",
      "stack_out": []
    },
    "545": {
      "op": "bytec_0 // 0x615f"
    },
    "546": {
      "op": "global CreatorAddress",
      "defined_out": [
        "0x615f",
        "tmp%22#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%22#0"
      ]
    },
    "548": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "549": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "550": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%2#0"
      ]
    },
    "552": {
      "op": "bnz fund_app_mbr_after_if_else@2",
      "stack_out": []
    },
    "555": {
      "op": "bytec_0 // 0x615f"
    },
    "556": {
      "op": "global CreatorAddress"
    },
    "558": {
      "op": "concat"
    },
    "559": {
      "op": "bytec 9 // 0x0000"
    },
    "561": {
      "op": "box_put"
    },
    "562": {
      "op": "intc_1 // 0"
    },
    "563": {
      "op": "bytec_1 // \"total_box_a_\""
    },
    "564": {
      "op": "app_global_get_ex"
    },
    "565": {
      "error": "check self.total_box_a_ exists",
      "op": "assert // check self.total_box_a_ exists"
    },
    "566": {
      "op": "intc_0 // 1"
    },
    "567": {
      "op": "+"
    },
    "568": {
      "op": "bytec_1 // \"total_box_a_\""
    },
    "569": {
      "op": "swap"
    },
    "570": {
      "op": "app_global_put"
    },
    "571": {
      "block": "fund_app_mbr_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "572": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.request_box_storage",
      "params": {
        "mbr_pay#0": "uint64"
      },
      "block": "request_box_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "575": {
      "op": "txn Sender"
    },
    "577": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "579": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "580": {
      "error": "Invalid sender address! Application creator address already present in box a_.",
      "op": "assert // Invalid sender address! Application creator address already present in box a_.",
      "stack_out": []
    },
    "581": {
      "op": "bytec_0 // 0x615f"
    },
    "582": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%3#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%3#0"
      ]
    },
    "584": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "585": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "586": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "588": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "589": {
      "error": "Transaction sender address must not be present in box a_.",
      "op": "assert // Transaction sender address must not be present in box a_.",
      "stack_out": []
    },
    "590": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbr_pay#0 (copy)"
      ],
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "592": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "594": {
      "op": "bytec_0 // 0x615f",
      "stack_out": [
        "tmp%6#0",
        "0x615f"
      ]
    },
    "595": {
      "op": "swap",
      "stack_out": [
        "0x615f",
        "tmp%6#0"
      ]
    },
    "596": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "597": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "598": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "600": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "601": {
      "error": "Box a_ payment sender address must not be present in box a_.",
      "op": "assert // Box a_ payment sender address must not be present in box a_.",
      "stack_out": []
    },
    "602": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "604": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "606": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "608": {
      "op": "==",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "609": {
      "error": "Box a_ payment reciever address must match application address.",
      "op": "assert // Box a_ payment reciever address must match application address.",
      "stack_out": []
    },
    "610": {
      "op": "frame_dig -1",
      "stack_out": [
        "mbr_pay#0 (copy)"
      ]
    },
    "612": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "614": {
      "op": "intc_2 // 16900",
      "defined_out": [
        "16900",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "16900"
      ]
    },
    "615": {
      "op": ">=",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "616": {
      "error": "Box a_ payment amount must be equal or greater than box _a fee.",
      "op": "assert // Box a_ payment amount must be equal or greater than box _a fee.",
      "stack_out": []
    },
    "617": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "619": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0"
      ]
    },
    "620": {
      "op": "bytec 8 // \"poll_end_date_unix\"",
      "defined_out": [
        "\"poll_end_date_unix\"",
        "0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "0",
        "\"poll_end_date_unix\""
      ]
    },
    "622": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "623": {
      "error": "check self.poll_end_date_unix exists",
      "op": "assert // check self.poll_end_date_unix exists",
      "stack_out": [
        "tmp%15#0",
        "maybe_value%2#0"
      ]
    },
    "624": {
      "op": "<=",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "625": {
      "error": "Unable to request box storage if voting period is over.",
      "op": "assert // Unable to request box storage if voting period is over.",
      "stack_out": []
    },
    "626": {
      "op": "bytec_0 // 0x615f"
    },
    "627": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%17#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%17#0"
      ]
    },
    "629": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "630": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "631": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%3#0"
      ]
    },
    "633": {
      "op": "bnz request_box_storage_after_if_else@2",
      "stack_out": []
    },
    "636": {
      "op": "bytec_0 // 0x615f"
    },
    "637": {
      "op": "txn Sender"
    },
    "639": {
      "op": "concat"
    },
    "640": {
      "op": "bytec 9 // 0x0000"
    },
    "642": {
      "op": "box_put"
    },
    "643": {
      "op": "intc_1 // 0"
    },
    "644": {
      "op": "bytec_1 // \"total_box_a_\""
    },
    "645": {
      "op": "app_global_get_ex"
    },
    "646": {
      "error": "check self.total_box_a_ exists",
      "op": "assert // check self.total_box_a_ exists"
    },
    "647": {
      "op": "intc_0 // 1"
    },
    "648": {
      "op": "+"
    },
    "649": {
      "op": "bytec_1 // \"total_box_a_\""
    },
    "650": {
      "op": "swap"
    },
    "651": {
      "op": "app_global_put"
    },
    "652": {
      "block": "request_box_storage_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "653": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.delete_box_storage",
      "params": {},
      "block": "delete_box_storage",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "656": {
      "op": "bytec_0 // 0x615f"
    },
    "657": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%0#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%0#0"
      ]
    },
    "659": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "660": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "661": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "663": {
      "error": "Transaction sender address must be present in box a_.",
      "op": "assert // Transaction sender address must be present in box a_.",
      "stack_out": []
    },
    "664": {
      "op": "itxn_begin"
    },
    "665": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "667": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "669": {
      "op": "pushbytes \"Account MBR refund for box storage deletion.\"",
      "defined_out": [
        "\"Account MBR refund for box storage deletion.\"",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "\"Account MBR refund for box storage deletion.\""
      ]
    },
    "715": {
      "op": "itxn_field Note",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "717": {
      "op": "pushint 15900 // 15900",
      "defined_out": [
        "15900",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "15900"
      ]
    },
    "720": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "722": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "724": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "726": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "727": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "729": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "731": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "733": {
      "op": "itxn_submit"
    },
    "734": {
      "op": "itxn Receiver"
    },
    "736": {
      "op": "itxn Sender"
    },
    "738": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "box_storage_del_refund_itxn.Sender#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "box_storage_del_refund_itxn.Sender#0",
        "tmp%4#0"
      ]
    },
    "740": {
      "op": "==",
      "defined_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "tmp%5#0"
      ]
    },
    "741": {
      "error": "Box storage deletion refund itxn sender address must match application address.",
      "op": "assert // Box storage deletion refund itxn sender address must match application address.",
      "stack_out": [
        "box_storage_del_refund_itxn.Receiver#0"
      ]
    },
    "742": {
      "op": "txn Sender",
      "defined_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "box_storage_del_refund_itxn.Receiver#0",
        "tmp%6#0"
      ]
    },
    "744": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "745": {
      "error": "Box storage deletion refund itxn reciever address must match transaction sender address.",
      "op": "assert // Box storage deletion refund itxn reciever address must match transaction sender address.",
      "stack_out": []
    },
    "746": {
      "op": "bytec_0 // 0x615f"
    },
    "747": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%8#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%8#0"
      ]
    },
    "749": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "750": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "751": {
      "op": "pop",
      "stack_out": []
    },
    "752": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "753": {
      "op": "bytec_1 // \"total_box_a_\"",
      "defined_out": [
        "\"total_box_a_\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_box_a_\""
      ]
    },
    "754": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "755": {
      "error": "check self.total_box_a_ exists",
      "op": "assert // check self.total_box_a_ exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "756": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "757": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "758": {
      "op": "bytec_1 // \"total_box_a_\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_box_a_\""
      ]
    },
    "759": {
      "op": "swap",
      "stack_out": [
        "\"total_box_a_\"",
        "new_state_value%0#0"
      ]
    },
    "760": {
      "op": "app_global_put",
      "stack_out": []
    },
    "761": {
      "retsub": true,
      "op": "retsub"
    },
    "762": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.submit_vote",
      "params": {
        "choice#0": "bytes"
      },
      "block": "submit_vote",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "765": {
      "op": "bytec_0 // 0x615f"
    },
    "766": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%0#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%0#0"
      ]
    },
    "768": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "769": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "770": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "772": {
      "error": "Transaction sender address must be present in box a_.",
      "op": "assert // Transaction sender address must be present in box a_.",
      "stack_out": []
    },
    "773": {
      "op": "bytec_0 // 0x615f"
    },
    "774": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%2#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%2#0"
      ]
    },
    "776": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "777": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "778": {
      "error": "check self.box_a_voter_data entry exists",
      "op": "assert // check self.box_a_voter_data entry exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "779": {
      "error": "Index access is out of bounds",
      "op": "extract 0 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "782": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "0x00"
      ]
    },
    "785": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "786": {
      "op": "bytec_0 // 0x615f"
    },
    "787": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "0x615f",
        "tmp%5#0"
      ]
    },
    "789": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "790": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "791": {
      "error": "check self.box_a_voter_data entry exists",
      "op": "assert // check self.box_a_voter_data entry exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%2#0"
      ]
    },
    "792": {
      "error": "Index access is out of bounds",
      "op": "extract 1 1 // on error: Index access is out of bounds",
      "defined_out": [
        "reinterpret_biguint%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "reinterpret_biguint%2#0"
      ]
    },
    "795": {
      "op": "pushbytes 0x00",
      "stack_out": [
        "tmp%4#0",
        "reinterpret_biguint%2#0",
        "0x00"
      ]
    },
    "798": {
      "op": "b==",
      "defined_out": [
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "799": {
      "op": "&&",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "800": {
      "error": "Transaction sender address already submitted a vote.",
      "op": "assert // Transaction sender address already submitted a vote.",
      "stack_out": []
    },
    "801": {
      "op": "frame_dig -1",
      "defined_out": [
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)"
      ]
    },
    "803": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "choice#0 (copy)",
        "0x01"
      ]
    },
    "806": {
      "op": "b==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "807": {
      "op": "bnz submit_vote_bool_true@3",
      "stack_out": []
    },
    "810": {
      "op": "frame_dig -1"
    },
    "812": {
      "op": "pushbytes 0x02"
    },
    "815": {
      "op": "b=="
    },
    "816": {
      "op": "bnz submit_vote_bool_true@3"
    },
    "819": {
      "op": "frame_dig -1"
    },
    "821": {
      "op": "pushbytes 0x03"
    },
    "824": {
      "op": "b=="
    },
    "825": {
      "op": "bz submit_vote_bool_false@4"
    },
    "828": {
      "block": "submit_vote_bool_true@3",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "829": {
      "block": "submit_vote_bool_merge@5",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "Invalid choice. Can only select choices 1, 2, 3.",
      "op": "assert // Invalid choice. Can only select choices 1, 2, 3.",
      "defined_out": [],
      "stack_out": []
    },
    "830": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "0x01"
      ]
    },
    "833": {
      "op": "frame_dig -1",
      "defined_out": [
        "0x01",
        "choice#0 (copy)"
      ],
      "stack_out": [
        "0x01",
        "choice#0 (copy)"
      ]
    },
    "835": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "836": {
      "op": "bytec_0 // 0x615f"
    },
    "837": {
      "op": "txn Sender",
      "defined_out": [
        "0x615f",
        "encoded_tuple_buffer%2#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "0x615f",
        "tmp%12#0"
      ]
    },
    "839": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%13#0"
      ]
    },
    "840": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "841": {
      "op": "box_put",
      "stack_out": []
    },
    "842": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "843": {
      "op": "itob",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "844": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%14#0",
        "choice#0 (copy)"
      ]
    },
    "846": {
      "op": "b==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "847": {
      "op": "bz submit_vote_else_body@7",
      "stack_out": []
    },
    "850": {
      "op": "intc_1 // 0"
    },
    "851": {
      "op": "bytec 4 // \"total_choice1\""
    },
    "853": {
      "op": "app_global_get_ex"
    },
    "854": {
      "error": "check self.total_choice1 exists",
      "op": "assert // check self.total_choice1 exists"
    },
    "855": {
      "op": "intc_0 // 1"
    },
    "856": {
      "op": "+"
    },
    "857": {
      "op": "bytec 4 // \"total_choice1\""
    },
    "859": {
      "op": "swap"
    },
    "860": {
      "op": "app_global_put"
    },
    "861": {
      "block": "submit_vote_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "862": {
      "op": "bytec 7 // \"total_votes\"",
      "defined_out": [
        "\"total_votes\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_votes\""
      ]
    },
    "864": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "865": {
      "error": "check self.total_votes exists",
      "op": "assert // check self.total_votes exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "866": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "1"
      ]
    },
    "867": {
      "op": "+",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "868": {
      "op": "bytec 7 // \"total_votes\"",
      "stack_out": [
        "new_state_value%3#0",
        "\"total_votes\""
      ]
    },
    "870": {
      "op": "swap",
      "stack_out": [
        "\"total_votes\"",
        "new_state_value%3#0"
      ]
    },
    "871": {
      "op": "app_global_put",
      "stack_out": []
    },
    "872": {
      "retsub": true,
      "op": "retsub"
    },
    "873": {
      "block": "submit_vote_else_body@7",
      "stack_in": [],
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "875": {
      "op": "itob",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "876": {
      "op": "frame_dig -1",
      "defined_out": [
        "choice#0 (copy)",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "choice#0 (copy)"
      ]
    },
    "878": {
      "op": "b==",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "879": {
      "op": "bz submit_vote_else_body@9",
      "stack_out": []
    },
    "882": {
      "op": "intc_1 // 0"
    },
    "883": {
      "op": "bytec 5 // \"total_choice2\""
    },
    "885": {
      "op": "app_global_get_ex"
    },
    "886": {
      "error": "check self.total_choice2 exists",
      "op": "assert // check self.total_choice2 exists"
    },
    "887": {
      "op": "intc_0 // 1"
    },
    "888": {
      "op": "+"
    },
    "889": {
      "op": "bytec 5 // \"total_choice2\""
    },
    "891": {
      "op": "swap"
    },
    "892": {
      "op": "app_global_put"
    },
    "893": {
      "op": "b submit_vote_after_if_else@11"
    },
    "896": {
      "block": "submit_vote_else_body@9",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "897": {
      "op": "bytec 6 // \"total_choice3\"",
      "defined_out": [
        "\"total_choice3\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_choice3\""
      ]
    },
    "899": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "900": {
      "error": "check self.total_choice3 exists",
      "op": "assert // check self.total_choice3 exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "901": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "1"
      ]
    },
    "902": {
      "op": "+",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "903": {
      "op": "bytec 6 // \"total_choice3\"",
      "stack_out": [
        "new_state_value%2#0",
        "\"total_choice3\""
      ]
    },
    "905": {
      "op": "swap",
      "stack_out": [
        "\"total_choice3\"",
        "new_state_value%2#0"
      ]
    },
    "906": {
      "op": "app_global_put",
      "stack_out": []
    },
    "907": {
      "op": "b submit_vote_after_if_else@11"
    },
    "910": {
      "block": "submit_vote_bool_false@4",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "911": {
      "op": "b submit_vote_bool_merge@5"
    },
    "914": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.cleanup_box_storage",
      "params": {
        "box_keys#0": "bytes"
      },
      "block": "cleanup_box_storage",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "917": {
      "op": "txn Sender"
    },
    "919": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "921": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "922": {
      "error": "Unauthorized address! Only application creator can cleanup box storage.",
      "op": "assert // Unauthorized address! Only application creator can cleanup box storage.",
      "stack_out": []
    },
    "923": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_keys#0 (copy)"
      ],
      "stack_out": [
        "box_keys#0 (copy)"
      ]
    },
    "925": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "box_keys#0 (copy)"
      ],
      "stack_out": [
        "box_keys#0 (copy)",
        "0"
      ]
    },
    "926": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "927": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "928": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0",
        "8"
      ]
    },
    "930": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "931": {
      "error": "Exceeded upper limit of boxes able to be deleted in a single application call transaction.",
      "op": "assert // Exceeded upper limit of boxes able to be deleted in a single application call transaction.",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "932": {
      "op": "intc_1 // 0",
      "defined_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "item_index_internal%0#0"
      ]
    },
    "933": {
      "block": "cleanup_box_storage_for_header@1",
      "stack_in": [
        "tmp%3#0",
        "item_index_internal%0#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "item_index_internal%0#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0"
      ]
    },
    "935": {
      "op": "frame_dig 0",
      "defined_out": [
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "item_index_internal%0#0",
        "item_index_internal%0#0",
        "tmp%3#0"
      ]
    },
    "937": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "item_index_internal%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "item_index_internal%0#0",
        "continue_looping%0#0"
      ]
    },
    "938": {
      "op": "bz cleanup_box_storage_after_for@4",
      "stack_out": [
        "tmp%3#0",
        "item_index_internal%0#0"
      ]
    },
    "941": {
      "op": "frame_dig -1"
    },
    "943": {
      "op": "extract 2 0"
    },
    "946": {
      "op": "frame_dig 1"
    },
    "948": {
      "op": "dup"
    },
    "949": {
      "op": "cover 2"
    },
    "951": {
      "op": "pushint 32 // 32"
    },
    "953": {
      "op": "*"
    },
    "954": {
      "op": "pushint 32 // 32"
    },
    "956": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds"
    },
    "957": {
      "op": "bytec_0 // 0x615f"
    },
    "958": {
      "op": "dig 1"
    },
    "960": {
      "op": "concat"
    },
    "961": {
      "op": "dup"
    },
    "962": {
      "op": "box_len"
    },
    "963": {
      "op": "bury 1"
    },
    "965": {
      "error": "Account address represented by box key must be present in box a_.",
      "op": "assert // Account address represented by box key must be present in box a_."
    },
    "966": {
      "op": "global CreatorAddress"
    },
    "968": {
      "op": "uncover 2"
    },
    "970": {
      "op": "!="
    },
    "971": {
      "error": "Account address represented by box key must match application creator address.",
      "op": "assert // Account address represented by box key must match application creator address."
    },
    "972": {
      "op": "box_del"
    },
    "973": {
      "op": "pop"
    },
    "974": {
      "op": "intc_1 // 0"
    },
    "975": {
      "op": "bytec_1 // \"total_box_a_\""
    },
    "976": {
      "op": "app_global_get_ex"
    },
    "977": {
      "error": "check self.total_box_a_ exists",
      "op": "assert // check self.total_box_a_ exists"
    },
    "978": {
      "op": "intc_0 // 1"
    },
    "979": {
      "op": "-"
    },
    "980": {
      "op": "bytec_1 // \"total_box_a_\""
    },
    "981": {
      "op": "swap"
    },
    "982": {
      "op": "app_global_put"
    },
    "983": {
      "op": "intc_1 // 0"
    },
    "984": {
      "op": "bytec_2 // \"total_cleaned_box_a_\""
    },
    "985": {
      "op": "app_global_get_ex"
    },
    "986": {
      "error": "check self.total_cleaned_box_a_ exists",
      "op": "assert // check self.total_cleaned_box_a_ exists"
    },
    "987": {
      "op": "intc_0 // 1"
    },
    "988": {
      "op": "+"
    },
    "989": {
      "op": "bytec_2 // \"total_cleaned_box_a_\""
    },
    "990": {
      "op": "swap"
    },
    "991": {
      "op": "app_global_put"
    },
    "992": {
      "op": "intc_0 // 1"
    },
    "993": {
      "op": "+"
    },
    "994": {
      "op": "frame_bury 1"
    },
    "996": {
      "op": "b cleanup_box_storage_for_header@1"
    },
    "999": {
      "block": "cleanup_box_storage_after_for@4",
      "stack_in": [
        "tmp%3#0",
        "item_index_internal%0#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1000": {
      "subroutine": "smart_contracts.open_ballot.contract.OpenBallot.terminate",
      "params": {},
      "block": "terminate",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1003": {
      "op": "intc 6 // TMPL_DELETABLE",
      "defined_out": [
        "TMPL_DELETABLE"
      ],
      "stack_out": [
        "TMPL_DELETABLE"
      ]
    },
    "1005": {
      "error": "Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "op": "assert // Template variable 'DELETABLE' needs to be 'True' at deploy-time.",
      "stack_out": []
    },
    "1006": {
      "op": "txn Sender"
    },
    "1008": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1010": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1011": {
      "error": "Unauthorized address! Only application creator can delete the smart contract.",
      "op": "assert // Unauthorized address! Only application creator can delete the smart contract.",
      "stack_out": []
    },
    "1012": {
      "op": "bytec_0 // 0x615f"
    },
    "1013": {
      "op": "global CreatorAddress",
      "defined_out": [
        "0x615f",
        "tmp%4#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%4#0"
      ]
    },
    "1015": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1016": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1017": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1019": {
      "error": "Transaction sender address must be present in box a_.",
      "op": "assert // Transaction sender address must be present in box a_.",
      "stack_out": []
    },
    "1020": {
      "op": "bytec_0 // 0x615f"
    },
    "1021": {
      "op": "global CreatorAddress",
      "defined_out": [
        "0x615f",
        "tmp%6#0"
      ],
      "stack_out": [
        "0x615f",
        "tmp%6#0"
      ]
    },
    "1023": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1024": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1025": {
      "op": "pop",
      "stack_out": []
    },
    "1026": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1027": {
      "op": "bytec_1 // \"total_box_a_\"",
      "defined_out": [
        "\"total_box_a_\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_box_a_\""
      ]
    },
    "1028": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1029": {
      "error": "check self.total_box_a_ exists",
      "op": "assert // check self.total_box_a_ exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1030": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "1031": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1032": {
      "op": "bytec_1 // \"total_box_a_\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"total_box_a_\""
      ]
    },
    "1033": {
      "op": "swap",
      "stack_out": [
        "\"total_box_a_\"",
        "new_state_value%0#0"
      ]
    },
    "1034": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1035": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1036": {
      "op": "bytec_2 // \"total_cleaned_box_a_\"",
      "defined_out": [
        "\"total_cleaned_box_a_\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_cleaned_box_a_\""
      ]
    },
    "1037": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1038": {
      "error": "check self.total_cleaned_box_a_ exists",
      "op": "assert // check self.total_cleaned_box_a_ exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1039": {
      "op": "intc_2 // 16900",
      "defined_out": [
        "16900",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "16900"
      ]
    },
    "1040": {
      "op": "*",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1041": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "1000"
      ]
    },
    "1043": {
      "op": "-",
      "defined_out": [
        "purge_refund_amount#0"
      ],
      "stack_out": [
        "purge_refund_amount#0"
      ]
    },
    "1044": {
      "op": "itxn_begin"
    },
    "1045": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "purge_refund_amount#0"
      ],
      "stack_out": [
        "purge_refund_amount#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1047": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "purge_refund_amount#0"
      ],
      "stack_out": [
        "purge_refund_amount#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "1049": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "purge_refund_amount#0"
      ],
      "stack_out": [
        "purge_refund_amount#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "1050": {
      "op": "pushbytes \"Creator claims box storage MBR purge refund.\"",
      "defined_out": [
        "\"Creator claims box storage MBR purge refund.\"",
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "purge_refund_amount#0"
      ],
      "stack_out": [
        "purge_refund_amount#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0",
        "\"Creator claims box storage MBR purge refund.\""
      ]
    },
    "1096": {
      "op": "itxn_field Note",
      "stack_out": [
        "purge_refund_amount#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "1098": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": [
        "purge_refund_amount#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "1100": {
      "op": "uncover 2",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "purge_refund_amount#0"
      ]
    },
    "1102": {
      "op": "itxn_field Amount",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "1104": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1106": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "1108": {
      "op": "intc_0 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "1109": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1111": {
      "op": "intc 4 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "1113": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1115": {
      "op": "itxn_submit"
    },
    "1116": {
      "op": "itxn Receiver"
    },
    "1118": {
      "op": "itxn Sender"
    },
    "1120": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "creator_app_mbr_refund_itxn.Receiver#0",
        "creator_app_mbr_refund_itxn.Sender#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "creator_app_mbr_refund_itxn.Receiver#0",
        "creator_app_mbr_refund_itxn.Sender#0",
        "tmp%11#0"
      ]
    },
    "1122": {
      "op": "==",
      "defined_out": [
        "creator_app_mbr_refund_itxn.Receiver#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "creator_app_mbr_refund_itxn.Receiver#0",
        "tmp%12#0"
      ]
    },
    "1123": {
      "error": "Creator app MBR refund itxn sender address must match application address.",
      "op": "assert // Creator app MBR refund itxn sender address must match application address.",
      "stack_out": [
        "creator_app_mbr_refund_itxn.Receiver#0"
      ]
    },
    "1124": {
      "op": "global CreatorAddress",
      "defined_out": [
        "creator_app_mbr_refund_itxn.Receiver#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "creator_app_mbr_refund_itxn.Receiver#0",
        "tmp%13#0"
      ]
    },
    "1126": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1127": {
      "error": "Creator app MBR refund itxn reciever address must match application creator address.",
      "op": "assert // Creator app MBR refund itxn reciever address must match application creator address.",
      "stack_out": []
    },
    "1128": {
      "op": "bytec_2 // \"total_cleaned_box_a_\"",
      "stack_out": [
        "\"total_cleaned_box_a_\""
      ]
    },
    "1129": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"total_cleaned_box_a_\"",
        "0"
      ]
    },
    "1130": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1131": {
      "retsub": true,
      "op": "retsub"
    }
  }
}