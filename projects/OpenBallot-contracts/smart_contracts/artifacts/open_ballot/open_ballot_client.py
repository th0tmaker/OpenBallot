# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "generate()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "global_storage_mbr(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "local_storage_mbr(account,pay)void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "opt_out(account)void": {
            "call_config": {
                "close_out": "CALL"
            }
        },
        "set_vote_dates(string,uint64,string,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "submit_vote(account,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "terminate()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5hcHByb3ZhbF9wcm9ncmFtOgogICAgaW50Y2Jsb2NrIDAgMSAyIDEwMDAKICAgIGJ5dGVjYmxvY2sgInZvdGVfY2hvaWNlIiAidG90YWxfYWNjb3VudHNfb3B0ZWRfaW4iICJ2b3RlX2RhdGVzX2ZpbmFsIiAiY2hvaWNlMV92b3RlX2NvdW50IiAiY2hvaWNlMl92b3RlX2NvdW50IiAiY2hvaWNlM192b3RlX2NvdW50IiAidG90YWxfdm90ZV9jb3VudCIgInZvdGVfc3RhdHVzIiAidm90ZV9lbmRfZGF0ZV91bml4IiAidm90ZV9zdGFydF9kYXRlX3VuaXgiCiAgICBjYWxsc3ViIF9fcHV5YV9hcmM0X3JvdXRlcl9fCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5fX3B1eWFfYXJjNF9yb3V0ZXJfXygpIC0+IHVpbnQ2NDoKX19wdXlhX2FyYzRfcm91dGVyX186CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTkKICAgIC8vIGNsYXNzIE9wZW5CYWxsb3QoQVJDNENvbnRyYWN0KToKICAgIHByb3RvIDAgMQogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IF9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTIKICAgIHB1c2hieXRlc3MgMHg1YmUyMTlmMCAweGY5NzQ0NzI0IDB4NmY4YWE4ODggMHhiM2ZiMjc1YiAweGIxYjI4ZDc1IDB4NGFiZmNkZjMgMHg1ZmYxNmRhNCAvLyBtZXRob2QgImdlbmVyYXRlKCl2b2lkIiwgbWV0aG9kICJnbG9iYWxfc3RvcmFnZV9tYnIocGF5KXZvaWQiLCBtZXRob2QgImxvY2FsX3N0b3JhZ2VfbWJyKGFjY291bnQscGF5KXZvaWQiLCBtZXRob2QgIm9wdF9vdXQoYWNjb3VudCl2b2lkIiwgbWV0aG9kICJzZXRfdm90ZV9kYXRlcyhzdHJpbmcsdWludDY0LHN0cmluZyx1aW50NjQpdm9pZCIsIG1ldGhvZCAic3VibWl0X3ZvdGUoYWNjb3VudCx1aW50NjQpdm9pZCIsIG1ldGhvZCAidGVybWluYXRlKCl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggX19wdXlhX2FyYzRfcm91dGVyX19fZ2VuZXJhdGVfcm91dGVAMiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19nbG9iYWxfc3RvcmFnZV9tYnJfcm91dGVAMyBfX3B1eWFfYXJjNF9yb3V0ZXJfX19sb2NhbF9zdG9yYWdlX21icl9yb3V0ZUA0IF9fcHV5YV9hcmM0X3JvdXRlcl9fX29wdF9vdXRfcm91dGVANSBfX3B1eWFfYXJjNF9yb3V0ZXJfX19zZXRfdm90ZV9kYXRlc19yb3V0ZUA2IF9fcHV5YV9hcmM0X3JvdXRlcl9fX3N1Ym1pdF92b3RlX3JvdXRlQDcgX19wdXlhX2FyYzRfcm91dGVyX19fdGVybWluYXRlX3JvdXRlQDgKICAgIGludGNfMCAvLyAwCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2dlbmVyYXRlX3JvdXRlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NjEtNjIKICAgIC8vICMgRGVmaW5lIGFiaW1ldGhvZCB0aGF0IGNyZWF0ZXMgdGhlIHNtYXJ0IGNvbnRyYWN0IEFwcAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0icmVxdWlyZSIpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgY2FsbHN1YiBnZW5lcmF0ZQogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fZ2xvYmFsX3N0b3JhZ2VfbWJyX3JvdXRlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6ODUtODYKICAgIC8vICMgRGVmaW5lIGFiaW1ldGhvZCB0aGF0IGFsbG93cyB0aGUgY3JlYXRvciB0byB1c2UgZ2xvYmFsIHN0b3JhZ2UgYnkgcGF5aW5nIGEgTUJSIGNvc3QKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxOQogICAgLy8gY2xhc3MgT3BlbkJhbGxvdChBUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6ODUtODYKICAgIC8vICMgRGVmaW5lIGFiaW1ldGhvZCB0aGF0IGFsbG93cyB0aGUgY3JlYXRvciB0byB1c2UgZ2xvYmFsIHN0b3JhZ2UgYnkgcGF5aW5nIGEgTUJSIGNvc3QKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGdsb2JhbF9zdG9yYWdlX21icgogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fbG9jYWxfc3RvcmFnZV9tYnJfcm91dGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMDItMTAzCiAgICAvLyAjIERlZmluZSBhYmltZXRob2QgdGhhdCBhbGxvd3MgYW55IHVzZXIgdG8gb3B0IGluIHRvIHRoZSBzbWFydCBjb250cmFjdCdzIGxvY2FsIHN0b3JhZ2UgYnkgcGF5aW5nIGEgTUJSIGNvc3QKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiT3B0SW4iXSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMSAvLyBPcHRJbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE9wdEluCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxOQogICAgLy8gY2xhc3MgT3BlbkJhbGxvdChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18xIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEwMi0xMDMKICAgIC8vICMgRGVmaW5lIGFiaW1ldGhvZCB0aGF0IGFsbG93cyBhbnkgdXNlciB0byBvcHQgaW4gdG8gdGhlIHNtYXJ0IGNvbnRyYWN0J3MgbG9jYWwgc3RvcmFnZSBieSBwYXlpbmcgYSBNQlIgY29zdAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJPcHRJbiJdKQogICAgY2FsbHN1YiBsb2NhbF9zdG9yYWdlX21icgogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fb3B0X291dF9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEzMC0xMzEKICAgIC8vICMgRGVmaW5lIGFiaW1ldGhvZCB0aGF0IGFsbG93cyBhbnkgdXNlciB0byBvcHQgb3V0IG9mIHRoZSBzbWFydCBjb250cmFjdCdzIGxvY2FsIHN0b3JhZ2UgdmlhIHRoZSAnY2xvc2Ugb3V0JyBtZXRob2QKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiQ2xvc2VPdXQiXSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludGNfMiAvLyBDbG9zZU91dAogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IENsb3NlT3V0CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxOQogICAgLy8gY2xhc3MgT3BlbkJhbGxvdChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMzAtMTMxCiAgICAvLyAjIERlZmluZSBhYmltZXRob2QgdGhhdCBhbGxvd3MgYW55IHVzZXIgdG8gb3B0IG91dCBvZiB0aGUgc21hcnQgY29udHJhY3QncyBsb2NhbCBzdG9yYWdlIHZpYSB0aGUgJ2Nsb3NlIG91dCcgbWV0aG9kCiAgICAvLyBAYXJjNC5hYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bIkNsb3NlT3V0Il0pCiAgICBjYWxsc3ViIG9wdF9vdXQKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX3NldF92b3RlX2RhdGVzX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTY3LTE2OAogICAgLy8gIyBEZWZpbmUgYWJpbWV0aG9kIHRoYXQgYWxsb3dzIHRoZSBjcmVhdG9yIHRvIHNldCB0aGUgdm90ZSBkYXRlcwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE5CiAgICAvLyBjbGFzcyBPcGVuQmFsbG90KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNjctMTY4CiAgICAvLyAjIERlZmluZSBhYmltZXRob2QgdGhhdCBhbGxvd3MgdGhlIGNyZWF0b3IgdG8gc2V0IHRoZSB2b3RlIGRhdGVzCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBzZXRfdm90ZV9kYXRlcwogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fc3VibWl0X3ZvdGVfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMTUtMjE2CiAgICAvLyAjIERlZmluZSBhYmltZXRob2QgdGhhdCBhbGxvd3MgYW55IHVzZXIgdG8gc3VibWl0IHRoZWlyIHZvdGUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTkKICAgIC8vIGNsYXNzIE9wZW5CYWxsb3QoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjE1LTIxNgogICAgLy8gIyBEZWZpbmUgYWJpbWV0aG9kIHRoYXQgYWxsb3dzIGFueSB1c2VyIHRvIHN1Ym1pdCB0aGVpciB2b3RlCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc3VibWl0X3ZvdGUKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX3Rlcm1pbmF0ZV9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI2MC0yNjEKICAgIC8vICMgRGVmaW5lIGFiaW1ldGhvZCB0aGF0IGFsbG93cyB0aGUgY3JlYXRvciB0byBkZWxldGUgQXBwIGFuZCBnZXQgdGhlaXIgZ2xvYmFsIHNjaGVtYSBNQlIgY29zdCByZWZ1bmRlZAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJEZWxldGVBcHBsaWNhdGlvbiJdKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCiAgICA9PQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgRGVsZXRlQXBwbGljYXRpb24KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiB0ZXJtaW5hdGUKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2FmdGVyX2lmX2Vsc2VAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTkKICAgIC8vIGNsYXNzIE9wZW5CYWxsb3QoQVJDNENvbnRyYWN0KToKICAgIGludGNfMCAvLyAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5nZW5lcmF0ZSgpIC0+IHZvaWQ6CmdlbmVyYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjYxLTYzCiAgICAvLyAjIERlZmluZSBhYmltZXRob2QgdGhhdCBjcmVhdGVzIHRoZSBzbWFydCBjb250cmFjdCBBcHAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChjcmVhdGU9InJlcXVpcmUiKQogICAgLy8gZGVmIGdlbmVyYXRlKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo2NgogICAgLy8gVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NjQtNjcKICAgIC8vICMgTWFrZSBuZWNlc3NhcnkgYXNzZXJ0aW9ucyB0byB2ZXJpZnkgdHJhbnNhY3Rpb24gcmVxdWlyZW1lbnRzCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgLy8gKSwgIlRyYW5zYWN0aW9uIHNlbmRlciBtdXN0IG1hdGNoIGNyZWF0b3IgYWRkcmVzcy4iCiAgICBhc3NlcnQgLy8gVHJhbnNhY3Rpb24gc2VuZGVyIG11c3QgbWF0Y2ggY3JlYXRvciBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjY5LTcwCiAgICAvLyAjIEdsb2JhbCBzdG9yYWdlIHZhcmlhYmxlIGFzc2lnbm1lbnRzCiAgICAvLyBzZWxmLnZvdGVfZGF0ZXNfZmluYWwgPSBVSW50NjQoMCkKICAgIGJ5dGVjXzIgLy8gInZvdGVfZGF0ZXNfZmluYWwiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo3MgogICAgLy8gc2VsZi50b3RhbF9hY2NvdW50c19vcHRlZF9pbiA9IFVJbnQ2NCgwKQogICAgYnl0ZWNfMSAvLyAidG90YWxfYWNjb3VudHNfb3B0ZWRfaW4iCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo3NAogICAgLy8gc2VsZi5jaG9pY2UxX3ZvdGVfY291bnQgPSBVSW50NjQoMCkKICAgIGJ5dGVjXzMgLy8gImNob2ljZTFfdm90ZV9jb3VudCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5Ojc1CiAgICAvLyBzZWxmLmNob2ljZTJfdm90ZV9jb3VudCA9IFVJbnQ2NCgwKQogICAgYnl0ZWMgNCAvLyAiY2hvaWNlMl92b3RlX2NvdW50IgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NzYKICAgIC8vIHNlbGYuY2hvaWNlM192b3RlX2NvdW50ID0gVUludDY0KDApCiAgICBieXRlYyA1IC8vICJjaG9pY2UzX3ZvdGVfY291bnQiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo3NwogICAgLy8gc2VsZi50b3RhbF92b3RlX2NvdW50ID0gVUludDY0KDApCiAgICBieXRlYyA2IC8vICJ0b3RhbF92b3RlX2NvdW50IgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6ODIKICAgIC8vIEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2lkLmlkLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECiAgICBpdG9iCiAgICBwdXNoYnl0ZXMgIkdlbmVyYXRpb24gbWV0aG9kIHN1Y2Nlc3NmdWwgZm9yIEFwcCBJRDogIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NzktODMKICAgIC8vICMgTG9nIGluZm8gb24tY2hhaW4KICAgIC8vIGxvZygKICAgIC8vICAgICAiR2VuZXJhdGlvbiBtZXRob2Qgc3VjY2Vzc2Z1bCBmb3IgQXBwIElEOiAiLAogICAgLy8gICAgIEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2lkLmlkLAogICAgLy8gKQogICAgbG9nCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5nbG9iYWxfc3RvcmFnZV9tYnIobWJyX3BheTogdWludDY0KSAtPiB2b2lkOgpnbG9iYWxfc3RvcmFnZV9tYnI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6ODUtODcKICAgIC8vICMgRGVmaW5lIGFiaW1ldGhvZCB0aGF0IGFsbG93cyB0aGUgY3JlYXRvciB0byB1c2UgZ2xvYmFsIHN0b3JhZ2UgYnkgcGF5aW5nIGEgTUJSIGNvc3QKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBkZWYgZ2xvYmFsX3N0b3JhZ2VfbWJyKHNlbGYsIG1icl9wYXk6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6ODgtODkKICAgIC8vICMgTWFrZSBuZWNlc3NhcnkgYXNzZXJ0aW9ucyB0byB2ZXJpZnkgdHJhbnNhY3Rpb24gcmVxdWlyZW1lbnRzCiAgICAvLyBhc3NlcnQgbWJyX3BheS5hbW91bnQgPT0gc2VsZi5jYWxjX21icigKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6OTAKICAgIC8vIG51bV9ieXRlcz1VSW50NjQoMCksIG51bV91aW50PVVJbnQ2NCg4KSAgIyBDYWxjIE1CUiBmb3IgdXNpbmcgZ2xvYmFsIHNjaGVtYQogICAgaW50Y18wIC8vIDAKICAgIHB1c2hpbnQgOCAvLyA4CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6ODgtOTEKICAgIC8vICMgTWFrZSBuZWNlc3NhcnkgYXNzZXJ0aW9ucyB0byB2ZXJpZnkgdHJhbnNhY3Rpb24gcmVxdWlyZW1lbnRzCiAgICAvLyBhc3NlcnQgbWJyX3BheS5hbW91bnQgPT0gc2VsZi5jYWxjX21icigKICAgIC8vICAgICBudW1fYnl0ZXM9VUludDY0KDApLCBudW1fdWludD1VSW50NjQoOCkgICMgQ2FsYyBNQlIgZm9yIHVzaW5nIGdsb2JhbCBzY2hlbWEKICAgIC8vICksICJNQlIgcGF5bWVudCBtdXN0IG1lZXQgdGhlIG1pbmltdW0gcmVxdWlyZW1lbnQgYW1vdW50LiIKICAgIGNhbGxzdWIgY2FsY19tYnIKICAgID09CiAgICBhc3NlcnQgLy8gTUJSIHBheW1lbnQgbXVzdCBtZWV0IHRoZSBtaW5pbXVtIHJlcXVpcmVtZW50IGFtb3VudC4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo5MwogICAgLy8gbWJyX3BheS5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo5Mi05NAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBtYnJfcGF5LnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICAvLyApLCAiTUJSIHBheW1lbnQgc2VuZGVyIG11c3QgbWF0Y2ggdGhlIEFwcCBjcmVhdG9yIGFjY291bnQuIgogICAgYXNzZXJ0IC8vIE1CUiBwYXltZW50IHNlbmRlciBtdXN0IG1hdGNoIHRoZSBBcHAgY3JlYXRvciBhY2NvdW50LgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5Ojk2CiAgICAvLyBtYnJfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5Ojk1LTk3CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIG1icl9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgIk1CUiBwYXltZW50IHJlY2lldmVyIG11c3QgYmUgdGhlIEFwcCBhZGRyZXNzLiIKICAgIGFzc2VydCAvLyBNQlIgcGF5bWVudCByZWNpZXZlciBtdXN0IGJlIHRoZSBBcHAgYWRkcmVzcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo5OS0xMDAKICAgIC8vICMgTG9nIGluZm8gb24tY2hhaW4KICAgIC8vIGxvZygiR2xvYmFsIFN0YXRlIHN1Y2Nlc3NmdWxseSBmdW5kZWQgYnkgYWNjb3VudCBhZGRyZXNzOiAiLCBUeG4uc2VuZGVyKQogICAgcHVzaGJ5dGVzICJHbG9iYWwgU3RhdGUgc3VjY2Vzc2Z1bGx5IGZ1bmRlZCBieSBhY2NvdW50IGFkZHJlc3M6ICIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgbG9nCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5jYWxjX21icihudW1fYnl0ZXM6IHVpbnQ2NCwgbnVtX3VpbnQ6IHVpbnQ2NCkgLT4gdWludDY0OgpjYWxjX21icjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0Ny00OQogICAgLy8gIyBEZWZpbmUgc3Vicm91dGluZSB0aGF0IGNhbGN1bGF0ZXMgdGhlIG1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudCB0b3RhbCBjb3N0CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGNhbGNfbWJyKHNlbGYsIG51bV9ieXRlczogVUludDY0LCBudW1fdWludDogVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo1MQogICAgLy8gYnl0ZV9mZWUgPSBVSW50NjQoNTBfMDAwKSAgIyBCeXRlIHNsaWNlIGZlZSBmb3Iga2V5LXZhbHVlIHBhaXIKICAgIHB1c2hpbnQgNTAwMDAgLy8gNTAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo1NC01NQogICAgLy8gIyBNdWx0aXBseSByZXNwZWN0aXZlIGZlZSBjb3N0IHdpdGggdGhlIG51bWJlciBvZiBrZXktdmFsdWUgcGFpcnMgaW4gZWFjaCBzY2hlbWEgdG8gZ2V0IHRvdGFsIGZlZSBhbW91bnQKICAgIC8vIHRvdGFsX2J5dGVfZmVlID0gYnl0ZV9mZWUgKiBudW1fYnl0ZXMKICAgIGZyYW1lX2RpZyAtMgogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjUyCiAgICAvLyB1aW50X2ZlZSA9IFVJbnQ2NCgyOF81MDApICAjIFVpbnQgZmVlIGZvciBrZXktdmFsdWUgcGFpcgogICAgcHVzaGludCAyODUwMCAvLyAyODUwMAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjU2CiAgICAvLyB0b3RhbF91aW50X2ZlZSA9IHVpbnRfZmVlICogbnVtX3VpbnQKICAgIGZyYW1lX2RpZyAtMQogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjU4LTU5CiAgICAvLyAjIFJldHVybiB0aGUgbWluaW11bSBiYWxhbmNlIHJlcXVpcmVtZW50IHRvdGFsIGNvc3QKICAgIC8vIHJldHVybiBHbG9iYWwubWluX2JhbGFuY2UgKyBiYXNlX2ZlZSArIHRvdGFsX2J5dGVfZmVlICsgdG90YWxfdWludF9mZWUKICAgIGdsb2JhbCBNaW5CYWxhbmNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NTAKICAgIC8vIGJhc2VfZmVlID0gVUludDY0KDEwMF8wMDApICAjIEJhc2UgZmVlCiAgICBwdXNoaW50IDEwMDAwMCAvLyAxMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo1OC01OQogICAgLy8gIyBSZXR1cm4gdGhlIG1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudCB0b3RhbCBjb3N0CiAgICAvLyByZXR1cm4gR2xvYmFsLm1pbl9iYWxhbmNlICsgYmFzZV9mZWUgKyB0b3RhbF9ieXRlX2ZlZSArIHRvdGFsX3VpbnRfZmVlCiAgICArCiAgICB1bmNvdmVyIDIKICAgICsKICAgICsKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5vcGVuX2JhbGxvdC5jb250cmFjdC5PcGVuQmFsbG90LmxvY2FsX3N0b3JhZ2VfbWJyKGFjY291bnQ6IGJ5dGVzLCBtYnJfcGF5OiB1aW50NjQpIC0+IHZvaWQ6CmxvY2FsX3N0b3JhZ2VfbWJyOgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEwMi0xMDYKICAgIC8vICMgRGVmaW5lIGFiaW1ldGhvZCB0aGF0IGFsbG93cyBhbnkgdXNlciB0byBvcHQgaW4gdG8gdGhlIHNtYXJ0IGNvbnRyYWN0J3MgbG9jYWwgc3RvcmFnZSBieSBwYXlpbmcgYSBNQlIgY29zdAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJPcHRJbiJdKQogICAgLy8gZGVmIGxvY2FsX3N0b3JhZ2VfbWJyKAogICAgLy8gICAgIHNlbGYsIGFjY291bnQ6IEFjY291bnQsIG1icl9wYXk6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMDctMTA4CiAgICAvLyAjIE1ha2UgbmVjZXNzYXJ5IGFzc2VydGlvbnMgdG8gdmVyaWZ5IHRyYW5zYWN0aW9uIHJlcXVpcmVtZW50cwogICAgLy8gYXNzZXJ0IG1icl9wYXkuYW1vdW50ID09IHNlbGYuY2FsY19tYnIoCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEwOQogICAgLy8gbnVtX2J5dGVzPVVJbnQ2NCgwKSwgbnVtX3VpbnQ9VUludDY0KDIpICAjIENhbGMgTUJSIGZvciB1c2luZyBsb2NhbCBzY2hlbWEKICAgIGludGNfMCAvLyAwCiAgICBpbnRjXzIgLy8gMgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEwNy0xMTAKICAgIC8vICMgTWFrZSBuZWNlc3NhcnkgYXNzZXJ0aW9ucyB0byB2ZXJpZnkgdHJhbnNhY3Rpb24gcmVxdWlyZW1lbnRzCiAgICAvLyBhc3NlcnQgbWJyX3BheS5hbW91bnQgPT0gc2VsZi5jYWxjX21icigKICAgIC8vICAgICBudW1fYnl0ZXM9VUludDY0KDApLCBudW1fdWludD1VSW50NjQoMikgICMgQ2FsYyBNQlIgZm9yIHVzaW5nIGxvY2FsIHNjaGVtYQogICAgLy8gKSwgIk1CUiBwYXltZW50IG11c3QgbWVldCB0aGUgbWluaW11bSByZXF1aXJlbWVudCBhbW91bnQuIgogICAgY2FsbHN1YiBjYWxjX21icgogICAgPT0KICAgIGFzc2VydCAvLyBNQlIgcGF5bWVudCBtdXN0IG1lZXQgdGhlIG1pbmltdW0gcmVxdWlyZW1lbnQgYW1vdW50LgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjExMgogICAgLy8gbWJyX3BheS5zZW5kZXIgPT0gYWNjb3VudAogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTZW5kZXIKICAgIGZyYW1lX2RpZyAtMgogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMTEtMTEzCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIG1icl9wYXkuc2VuZGVyID09IGFjY291bnQKICAgIC8vICksICJNQlIgcGF5bWVudCBzZW5kZXIgbXVzdCBtYXRjaCB0aGUgYWNjb3VudCBvcHRpbmcgaW4uIgogICAgYXNzZXJ0IC8vIE1CUiBwYXltZW50IHNlbmRlciBtdXN0IG1hdGNoIHRoZSBhY2NvdW50IG9wdGluZyBpbi4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMTUKICAgIC8vIG1icl9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTE0LTExNgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBtYnJfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksICJNQlIgcGF5bWVudCByZWNpZXZlciBtdXN0IGJlIHRoZSBBcHAgYWRkcmVzcy4iCiAgICBhc3NlcnQgLy8gTUJSIHBheW1lbnQgcmVjaWV2ZXIgbXVzdCBiZSB0aGUgQXBwIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTE4LTExOQogICAgLy8gIyBDaGFuZ2UgbG9jYWwgc3RhdGUgdmFyICdzZWxmLmxvY2FsX3ZvdGVfc3RhdHVzJyAoc3BlY2lmaWMgdG8gYWNjb3VudCkgdmFsdWUgZnJvbSAnTm9uZScgdG8gJzAnCiAgICAvLyBzZWxmLmxvY2FsX3ZvdGVfc3RhdHVzW2FjY291bnRdID0gVUludDY0KDApCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ5dGVjIDcgLy8gInZvdGVfc3RhdHVzIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9sb2NhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMjEtMTIyCiAgICAvLyAjIENoYW5nZSBsb2NhbCBzdGF0ZSB2YXIgJ3NlbGYubG9jYWxfdm90ZV9jaG9pY2UnIChzcGVjaWZpYyB0byBhY2NvdW50KSB2YWx1ZSBmcm9tICdOb25lJyB0byAnMCcKICAgIC8vIHNlbGYubG9jYWxfdm90ZV9jaG9pY2VbYWNjb3VudF0gPSBVSW50NjQoMCkKICAgIGZyYW1lX2RpZyAtMgogICAgYnl0ZWNfMCAvLyAidm90ZV9jaG9pY2UiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2xvY2FsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEyNC0xMjUKICAgIC8vICMgSW5jcmVtZW50IGNvdW50IGZvciB0b3RhbCBhY2NvdW50cyBvcHRlZCBpbgogICAgLy8gc2VsZi50b3RhbF9hY2NvdW50c19vcHRlZF9pbiArPSBVSW50NjQoMSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJ0b3RhbF9hY2NvdW50c19vcHRlZF9pbiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbF9hY2NvdW50c19vcHRlZF9pbiBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlY18xIC8vICJ0b3RhbF9hY2NvdW50c19vcHRlZF9pbiIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTI3LTEyOAogICAgLy8gIyBMb2cgaW5mbyBvbi1jaGFpbgogICAgLy8gbG9nKCJMb2NhbCBTdGF0ZSBzdWNjZXNzZnVsbHkgZnVuZGVkIGJ5IGFjY291bnQgYWRkcmVzczogIiwgVHhuLnNlbmRlcikKICAgIHB1c2hieXRlcyAiTG9jYWwgU3RhdGUgc3VjY2Vzc2Z1bGx5IGZ1bmRlZCBieSBhY2NvdW50IGFkZHJlc3M6ICIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgbG9nCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5vcHRfb3V0KGFjY291bnQ6IGJ5dGVzKSAtPiB2b2lkOgpvcHRfb3V0OgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEzMC0xMzIKICAgIC8vICMgRGVmaW5lIGFiaW1ldGhvZCB0aGF0IGFsbG93cyBhbnkgdXNlciB0byBvcHQgb3V0IG9mIHRoZSBzbWFydCBjb250cmFjdCdzIGxvY2FsIHN0b3JhZ2UgdmlhIHRoZSAnY2xvc2Ugb3V0JyBtZXRob2QKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiQ2xvc2VPdXQiXSkKICAgIC8vIGRlZiBvcHRfb3V0KHNlbGYsIGFjY291bnQ6IEFjY291bnQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMzMtMTM2CiAgICAvLyAjIE1ha2UgbmVjZXNzYXJ5IGFzc2VydGlvbnMgdG8gdmVyaWZ5IHRyYW5zYWN0aW9uIHJlcXVpcmVtZW50cwogICAgLy8gYXNzZXJ0IGFjY291bnQuaXNfb3B0ZWRfaW4oCiAgICAvLyAgICAgQXBwbGljYXRpb24oR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25faWQuaWQpCiAgICAvLyApLCAiQWNjb3VudCBtdXN0IGZpcnN0IGJlIG9wdGVkLWluIHRvIEFwcCBjbGllbnQgaW4gb3JkZXIgdG8gY2xvc2Ugb3V0LiIKICAgIGZyYW1lX2RpZyAtMQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEzNQogICAgLy8gQXBwbGljYXRpb24oR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25faWQuaWQpCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMzMtMTM2CiAgICAvLyAjIE1ha2UgbmVjZXNzYXJ5IGFzc2VydGlvbnMgdG8gdmVyaWZ5IHRyYW5zYWN0aW9uIHJlcXVpcmVtZW50cwogICAgLy8gYXNzZXJ0IGFjY291bnQuaXNfb3B0ZWRfaW4oCiAgICAvLyAgICAgQXBwbGljYXRpb24oR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25faWQuaWQpCiAgICAvLyApLCAiQWNjb3VudCBtdXN0IGZpcnN0IGJlIG9wdGVkLWluIHRvIEFwcCBjbGllbnQgaW4gb3JkZXIgdG8gY2xvc2Ugb3V0LiIKICAgIGFwcF9vcHRlZF9pbgogICAgYXNzZXJ0IC8vIEFjY291bnQgbXVzdCBmaXJzdCBiZSBvcHRlZC1pbiB0byBBcHAgY2xpZW50IGluIG9yZGVyIHRvIGNsb3NlIG91dC4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMzkKICAgIC8vIGFjY291bnQuaXNfb3B0ZWRfaW4oQXBwbGljYXRpb24oR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25faWQuaWQpKQogICAgZnJhbWVfZGlnIC0xCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKICAgIGFwcF9vcHRlZF9pbgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEzOS0xNDAKICAgIC8vIGFjY291bnQuaXNfb3B0ZWRfaW4oQXBwbGljYXRpb24oR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25faWQuaWQpKQogICAgLy8gYW5kIHNlbGYubG9jYWxfdm90ZV9jaG9pY2VbYWNjb3VudF0gPT0gVUludDY0KDApCiAgICBieiBvcHRfb3V0X29yX2NvbnRkQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNDAKICAgIC8vIGFuZCBzZWxmLmxvY2FsX3ZvdGVfY2hvaWNlW2FjY291bnRdID09IFVJbnQ2NCgwKQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAidm90ZV9jaG9pY2UiCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5sb2NhbF92b3RlX2Nob2ljZSBleGlzdHMgZm9yIGFjY291bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMzktMTQwCiAgICAvLyBhY2NvdW50LmlzX29wdGVkX2luKEFwcGxpY2F0aW9uKEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2lkLmlkKSkKICAgIC8vIGFuZCBzZWxmLmxvY2FsX3ZvdGVfY2hvaWNlW2FjY291bnRdID09IFVJbnQ2NCgwKQogICAgYnogb3B0X291dF9ib29sX3RydWVANQoKb3B0X291dF9vcl9jb250ZEAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE0MgogICAgLy8gYWNjb3VudC5pc19vcHRlZF9pbihBcHBsaWNhdGlvbihHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9pZC5pZCkpCiAgICBmcmFtZV9kaWcgLTEKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAogICAgYXBwX29wdGVkX2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTQyLTE0NAogICAgLy8gYWNjb3VudC5pc19vcHRlZF9pbihBcHBsaWNhdGlvbihHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9pZC5pZCkpCiAgICAvLyBhbmQgc2VsZi5sb2NhbF92b3RlX2Nob2ljZVthY2NvdW50XSAhPSBVSW50NjQoMCkKICAgIC8vIGFuZCBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCA+IHNlbGYudm90ZV9lbmRfZGF0ZV91bml4CiAgICBieiBvcHRfb3V0X2Jvb2xfZmFsc2VANgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE0MwogICAgLy8gYW5kIHNlbGYubG9jYWxfdm90ZV9jaG9pY2VbYWNjb3VudF0gIT0gVUludDY0KDApCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJ2b3RlX2Nob2ljZSIKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmxvY2FsX3ZvdGVfY2hvaWNlIGV4aXN0cyBmb3IgYWNjb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE0Mi0xNDQKICAgIC8vIGFjY291bnQuaXNfb3B0ZWRfaW4oQXBwbGljYXRpb24oR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25faWQuaWQpKQogICAgLy8gYW5kIHNlbGYubG9jYWxfdm90ZV9jaG9pY2VbYWNjb3VudF0gIT0gVUludDY0KDApCiAgICAvLyBhbmQgR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgPiBzZWxmLnZvdGVfZW5kX2RhdGVfdW5peAogICAgYnogb3B0X291dF9ib29sX2ZhbHNlQDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNDQKICAgIC8vIGFuZCBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCA+IHNlbGYudm90ZV9lbmRfZGF0ZV91bml4CiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgOCAvLyAidm90ZV9lbmRfZGF0ZV91bml4IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnZvdGVfZW5kX2RhdGVfdW5peCBleGlzdHMKICAgID4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNDItMTQ0CiAgICAvLyBhY2NvdW50LmlzX29wdGVkX2luKEFwcGxpY2F0aW9uKEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2lkLmlkKSkKICAgIC8vIGFuZCBzZWxmLmxvY2FsX3ZvdGVfY2hvaWNlW2FjY291bnRdICE9IFVJbnQ2NCgwKQogICAgLy8gYW5kIEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wID4gc2VsZi52b3RlX2VuZF9kYXRlX3VuaXgKICAgIGJ6IG9wdF9vdXRfYm9vbF9mYWxzZUA2CgpvcHRfb3V0X2Jvb2xfdHJ1ZUA1OgogICAgaW50Y18xIC8vIDEKICAgIGIgb3B0X291dF9ib29sX21lcmdlQDcKCm9wdF9vdXRfYm9vbF9mYWxzZUA2OgogICAgaW50Y18wIC8vIDAKCm9wdF9vdXRfYm9vbF9tZXJnZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEzOC0xNDUKICAgIC8vIGFzc2VydCAoICAjIEFjY291bnQgaXMgb3B0ZWQtaW4gYnV0IGhhc24ndCB2b3RlZCB5ZXQKICAgIC8vICAgICBhY2NvdW50LmlzX29wdGVkX2luKEFwcGxpY2F0aW9uKEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2lkLmlkKSkKICAgIC8vICAgICBhbmQgc2VsZi5sb2NhbF92b3RlX2Nob2ljZVthY2NvdW50XSA9PSBVSW50NjQoMCkKICAgIC8vICkgb3IgKCAgIyBBY2NvdW50IGlzIG9wdGVkLWluIGFuZCBoYXMgdm90ZWQgYW5kIHZvdGluZyBwZXJpb2QgaXMgb3ZlcgogICAgLy8gICAgIGFjY291bnQuaXNfb3B0ZWRfaW4oQXBwbGljYXRpb24oR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25faWQuaWQpKQogICAgLy8gICAgIGFuZCBzZWxmLmxvY2FsX3ZvdGVfY2hvaWNlW2FjY291bnRdICE9IFVJbnQ2NCgwKQogICAgLy8gICAgIGFuZCBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCA+IHNlbGYudm90ZV9lbmRfZGF0ZV91bml4CiAgICAvLyApLCAiUmVxdWlyZW1lbnRzIGZvciBvcHRpbmctb3V0IG9mIEFwcCBjbGllbnQgYXJlIGluc3VmZmljaWVudC4iCiAgICBhc3NlcnQgLy8gUmVxdWlyZW1lbnRzIGZvciBvcHRpbmctb3V0IG9mIEFwcCBjbGllbnQgYXJlIGluc3VmZmljaWVudC4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNDctMTQ4CiAgICAvLyAjIERlbGV0ZSB0aGUgdXNlcidzIGxvY2FsIHN0b3JhZ2UKICAgIC8vIGRlbCBzZWxmLmxvY2FsX3ZvdGVfc3RhdHVzW2FjY291bnRdCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ5dGVjIDcgLy8gInZvdGVfc3RhdHVzIgogICAgYXBwX2xvY2FsX2RlbAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE0OQogICAgLy8gZGVsIHNlbGYubG9jYWxfdm90ZV9jaG9pY2VbYWNjb3VudF0KICAgIGZyYW1lX2RpZyAtMQogICAgYnl0ZWNfMCAvLyAidm90ZV9jaG9pY2UiCiAgICBhcHBfbG9jYWxfZGVsCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTUxLTE1MgogICAgLy8gIyBEZWNyZWFzZSB0aGUgdG90YWwgY291bnQgb2Ygb3B0ZWQtaW4gYWNjb3VudHMKICAgIC8vIHNlbGYudG90YWxfYWNjb3VudHNfb3B0ZWRfaW4gLT0gVUludDY0KDEpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAidG90YWxfYWNjb3VudHNfb3B0ZWRfaW4iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudG90YWxfYWNjb3VudHNfb3B0ZWRfaW4gZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgYnl0ZWNfMSAvLyAidG90YWxfYWNjb3VudHNfb3B0ZWRfaW4iCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE1Ni0xNjIKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1hY2NvdW50LAogICAgLy8gICAgIGFtb3VudD1zZWxmLmNhbGNfbWJyKG51bV9ieXRlcz1VSW50NjQoMCksIG51bV91aW50PVVJbnQ2NCgyKSkgLSBtaW5fdHhuX2ZlZSwKICAgIC8vICAgICBzZW5kZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBmZWU9bWluX3R4bl9mZWUsCiAgICAvLyAgICAgbm90ZT0iTUJSIHJlZnVuZCBmb3IgY2xvc2luZyBvdXQuIiwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNTgKICAgIC8vIGFtb3VudD1zZWxmLmNhbGNfbWJyKG51bV9ieXRlcz1VSW50NjQoMCksIG51bV91aW50PVVJbnQ2NCgyKSkgLSBtaW5fdHhuX2ZlZSwKICAgIGludGNfMCAvLyAwCiAgICBpbnRjXzIgLy8gMgogICAgY2FsbHN1YiBjYWxjX21icgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE1NC0xNTUKICAgIC8vICMgU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uIChhY2NvdW50IGdldHMgdGhlaXIgbWJyIHBheW1lbnQgcmVmdW5kZWQpCiAgICAvLyBtaW5fdHhuX2ZlZSA9IFVJbnQ2NCgxMDAwKQogICAgaW50Y18zIC8vIDEwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNTgKICAgIC8vIGFtb3VudD1zZWxmLmNhbGNfbWJyKG51bV9ieXRlcz1VSW50NjQoMCksIG51bV91aW50PVVJbnQ2NCgyKSkgLSBtaW5fdHhuX2ZlZSwKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNTkKICAgIC8vIHNlbmRlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNjEKICAgIC8vIG5vdGU9Ik1CUiByZWZ1bmQgZm9yIGNsb3Npbmcgb3V0LiIsCiAgICBwdXNoYnl0ZXMgIk1CUiByZWZ1bmQgZm9yIGNsb3Npbmcgb3V0LiIKICAgIGl0eG5fZmllbGQgTm90ZQogICAgaXR4bl9maWVsZCBTZW5kZXIKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBmcmFtZV9kaWcgLTEKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNTYKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIGludGNfMSAvLyBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNTQtMTU1CiAgICAvLyAjIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbiAoYWNjb3VudCBnZXRzIHRoZWlyIG1iciBwYXltZW50IHJlZnVuZGVkKQogICAgLy8gbWluX3R4bl9mZWUgPSBVSW50NjQoMTAwMCkKICAgIGludGNfMyAvLyAxMDAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE1Ni0xNjIKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1hY2NvdW50LAogICAgLy8gICAgIGFtb3VudD1zZWxmLmNhbGNfbWJyKG51bV9ieXRlcz1VSW50NjQoMCksIG51bV91aW50PVVJbnQ2NCgyKSkgLSBtaW5fdHhuX2ZlZSwKICAgIC8vICAgICBzZW5kZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBmZWU9bWluX3R4bl9mZWUsCiAgICAvLyAgICAgbm90ZT0iTUJSIHJlZnVuZCBmb3IgY2xvc2luZyBvdXQuIiwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTY0LTE2NQogICAgLy8gIyBMb2cgaW5mbyBvbi1jaGFpbgogICAgLy8gbG9nKCJDbG9zZS1vdXQgbWV0aG9kIHN1Y2Nlc3NmdWwgZm9yIGFjY291bnQgYWRkcmVzczogIiwgYWNjb3VudCkKICAgIHB1c2hieXRlcyAiQ2xvc2Utb3V0IG1ldGhvZCBzdWNjZXNzZnVsIGZvciBhY2NvdW50IGFkZHJlc3M6ICIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBsb2cKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5vcGVuX2JhbGxvdC5jb250cmFjdC5PcGVuQmFsbG90LnNldF92b3RlX2RhdGVzKHZvdGVfc3RhcnRfZGF0ZV9zdHI6IGJ5dGVzLCB2b3RlX3N0YXJ0X2RhdGVfdW5peDogdWludDY0LCB2b3RlX2VuZF9kYXRlX3N0cjogYnl0ZXMsIHZvdGVfZW5kX2RhdGVfdW5peDogdWludDY0KSAtPiB2b2lkOgpzZXRfdm90ZV9kYXRlczoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNjctMTc1CiAgICAvLyAjIERlZmluZSBhYmltZXRob2QgdGhhdCBhbGxvd3MgdGhlIGNyZWF0b3IgdG8gc2V0IHRoZSB2b3RlIGRhdGVzCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gZGVmIHNldF92b3RlX2RhdGVzKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgdm90ZV9zdGFydF9kYXRlX3N0cjogU3RyaW5nLAogICAgLy8gICAgIHZvdGVfc3RhcnRfZGF0ZV91bml4OiBVSW50NjQsCiAgICAvLyAgICAgdm90ZV9lbmRfZGF0ZV9zdHI6IFN0cmluZywKICAgIC8vICAgICB2b3RlX2VuZF9kYXRlX3VuaXg6IFVJbnQ2NCwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDQgMAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE3OAogICAgLy8gVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTc2LTE3OQogICAgLy8gIyBNYWtlIG5lY2Vzc2FyeSBhc3NlcnRpb25zIHRvIHZlcmlmeSB0cmFuc2FjdGlvbiByZXF1aXJlbWVudHMKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICAvLyApLCAiT25seSBBcHAgY3JlYXRvciBjYW4gc2V0IHZvdGUgZGF0ZXMuIgogICAgYXNzZXJ0IC8vIE9ubHkgQXBwIGNyZWF0b3IgY2FuIHNldCB2b3RlIGRhdGVzLgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE5MQogICAgLy8gdm90ZV9zdGFydF9kYXRlX3VuaXggPCB2b3RlX2VuZF9kYXRlX3VuaXgKICAgIGZyYW1lX2RpZyAtMwogICAgZnJhbWVfZGlnIC0xCiAgICA8CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTkwLTE5MgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICB2b3RlX3N0YXJ0X2RhdGVfdW5peCA8IHZvdGVfZW5kX2RhdGVfdW5peAogICAgLy8gKSwgIlN0YXJ0IGRhdGUgbXVzdCBiZSBlYXJsaWVyIHRoYW4gZW5kIGRhdGUuIgogICAgYXNzZXJ0IC8vIFN0YXJ0IGRhdGUgbXVzdCBiZSBlYXJsaWVyIHRoYW4gZW5kIGRhdGUuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTk0LTE5NgogICAgLy8gYXNzZXJ0IHZvdGVfZW5kX2RhdGVfdW5peCA+PSB2b3RlX3N0YXJ0X2RhdGVfdW5peCArIFVJbnQ2NCgKICAgIC8vICAgICAzICogMjQgKiA2MCAqIDYwCiAgICAvLyApLCAiRW5kIGRhdGUgbXVzdCBiZSBhdCBsZWFzdCAzIGRheXMgbGF0ZXIgdGhhbiB0aGUgc3RhcnQgZGF0ZS4iCiAgICBmcmFtZV9kaWcgLTMKICAgIHB1c2hpbnQgMjU5MjAwIC8vIDI1OTIwMAogICAgKwogICAgZnJhbWVfZGlnIC0xCiAgICA8PQogICAgYXNzZXJ0IC8vIEVuZCBkYXRlIG11c3QgYmUgYXQgbGVhc3QgMyBkYXlzIGxhdGVyIHRoYW4gdGhlIHN0YXJ0IGRhdGUuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTk4CiAgICAvLyBhc3NlcnQgdm90ZV9lbmRfZGF0ZV91bml4IC0gdm90ZV9zdGFydF9kYXRlX3VuaXggPD0gVUludDY0KAogICAgZnJhbWVfZGlnIC0xCiAgICBmcmFtZV9kaWcgLTMKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxOTgtMjAwCiAgICAvLyBhc3NlcnQgdm90ZV9lbmRfZGF0ZV91bml4IC0gdm90ZV9zdGFydF9kYXRlX3VuaXggPD0gVUludDY0KAogICAgLy8gICAgIDE0ICogMjQgKiA2MCAqIDYwCiAgICAvLyApLCAiVm90aW5nIHBlcmlvZCBjYW4gbm90IGV4Y2VlZCAxNCBkYXlzLiIKICAgIHB1c2hpbnQgMTIwOTYwMCAvLyAxMjA5NjAwCiAgICA8PQogICAgYXNzZXJ0IC8vIFZvdGluZyBwZXJpb2QgY2FuIG5vdCBleGNlZWQgMTQgZGF5cy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMDIKICAgIC8vIGFzc2VydCBzZWxmLnZvdGVfZGF0ZXNfZmluYWwgPT0gVUludDY0KDApLCAiVm90ZSBkYXRlcyBjYW4gb25seSBiZSBzZXQgb25jZS4iCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAidm90ZV9kYXRlc19maW5hbCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi52b3RlX2RhdGVzX2ZpbmFsIGV4aXN0cwogICAgIQogICAgYXNzZXJ0IC8vIFZvdGUgZGF0ZXMgY2FuIG9ubHkgYmUgc2V0IG9uY2UuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjA0LTIwNQogICAgLy8gIyBHZXQgYW5kIHN0b3JlIHZvdGUgZGF0ZXMgaW4gdW5peCBpbnQgZm9ybWF0CiAgICAvLyBzZWxmLnZvdGVfc3RhcnRfZGF0ZV91bml4ID0gdm90ZV9zdGFydF9kYXRlX3VuaXgKICAgIGJ5dGVjIDkgLy8gInZvdGVfc3RhcnRfZGF0ZV91bml4IgogICAgZnJhbWVfZGlnIC0zCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjIwNgogICAgLy8gc2VsZi52b3RlX2VuZF9kYXRlX3VuaXggPSB2b3RlX2VuZF9kYXRlX3VuaXgKICAgIGJ5dGVjIDggLy8gInZvdGVfZW5kX2RhdGVfdW5peCIKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMDgtMjA5CiAgICAvLyAjIE1ha2Ugdm90ZSBkYXRlcyBmaW5hbAogICAgLy8gc2VsZi52b3RlX2RhdGVzX2ZpbmFsID0gVUludDY0KDEpCiAgICBieXRlY18yIC8vICJ2b3RlX2RhdGVzX2ZpbmFsIgogICAgaW50Y18xIC8vIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjExLTIxMgogICAgLy8gIyBMb2cgaW5mbyBvbi1jaGFpbgogICAgLy8gbG9nKCJWb3RlIHN0YXJ0IGRhdGU6ICIsIHZvdGVfc3RhcnRfZGF0ZV9zdHIpCiAgICBwdXNoYnl0ZXMgIlZvdGUgc3RhcnQgZGF0ZTogIgogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIGxvZwogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjIxMwogICAgLy8gbG9nKCJWb3RlIGVuZCBkYXRlOiAiLCB2b3RlX2VuZF9kYXRlX3N0cikKICAgIHB1c2hieXRlcyAiVm90ZSBlbmQgZGF0ZTogIgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGxvZwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLm9wZW5fYmFsbG90LmNvbnRyYWN0Lk9wZW5CYWxsb3Quc3VibWl0X3ZvdGUoYWNjb3VudDogYnl0ZXMsIGNob2ljZTogdWludDY0KSAtPiB2b2lkOgpzdWJtaXRfdm90ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMTUtMjE3CiAgICAvLyAjIERlZmluZSBhYmltZXRob2QgdGhhdCBhbGxvd3MgYW55IHVzZXIgdG8gc3VibWl0IHRoZWlyIHZvdGUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHN1Ym1pdF92b3RlKHNlbGYsIGFjY291bnQ6IEFjY291bnQsIGNob2ljZTogVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjE4LTIyMQogICAgLy8gIyBNYWtlIG5lY2Vzc2FyeSBhc3NlcnRpb25zIHRvIHZlcmlmeSB0cmFuc2FjdGlvbiByZXF1aXJlbWVudHMKICAgIC8vIGFzc2VydCBhY2NvdW50LmlzX29wdGVkX2luKAogICAgLy8gICAgIEFwcGxpY2F0aW9uKEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2lkLmlkKQogICAgLy8gKSwgIkFjY291bnQgbXVzdCBiZSBvcHRlZC1pbiBiZWZvcmUgdm90aW5nLiIKICAgIGZyYW1lX2RpZyAtMgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjIyMAogICAgLy8gQXBwbGljYXRpb24oR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25faWQuaWQpCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMTgtMjIxCiAgICAvLyAjIE1ha2UgbmVjZXNzYXJ5IGFzc2VydGlvbnMgdG8gdmVyaWZ5IHRyYW5zYWN0aW9uIHJlcXVpcmVtZW50cwogICAgLy8gYXNzZXJ0IGFjY291bnQuaXNfb3B0ZWRfaW4oCiAgICAvLyAgICAgQXBwbGljYXRpb24oR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25faWQuaWQpCiAgICAvLyApLCAiQWNjb3VudCBtdXN0IGJlIG9wdGVkLWluIGJlZm9yZSB2b3RpbmcuIgogICAgYXBwX29wdGVkX2luCiAgICBhc3NlcnQgLy8gQWNjb3VudCBtdXN0IGJlIG9wdGVkLWluIGJlZm9yZSB2b3RpbmcuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjI0CiAgICAvLyBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCA+IHNlbGYudm90ZV9zdGFydF9kYXRlX3VuaXgKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA5IC8vICJ2b3RlX3N0YXJ0X2RhdGVfdW5peCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi52b3RlX3N0YXJ0X2RhdGVfdW5peCBleGlzdHMKICAgID4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMjMtMjI1CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wID4gc2VsZi52b3RlX3N0YXJ0X2RhdGVfdW5peAogICAgLy8gKSwgIlZvdGluZyBwZXJpb2QgaGFzIG5vdCBzdGFydGVkIHlldC4iCiAgICBhc3NlcnQgLy8gVm90aW5nIHBlcmlvZCBoYXMgbm90IHN0YXJ0ZWQgeWV0LgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjIyOAogICAgLy8gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgPCBzZWxmLnZvdGVfZW5kX2RhdGVfdW5peAogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDggLy8gInZvdGVfZW5kX2RhdGVfdW5peCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi52b3RlX2VuZF9kYXRlX3VuaXggZXhpc3RzCiAgICA8CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjI3LTIyOQogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCA8IHNlbGYudm90ZV9lbmRfZGF0ZV91bml4CiAgICAvLyApLCAiVm90aW5nIHBlcmlvZCBoYXMgZW5kZWQuIgogICAgYXNzZXJ0IC8vIFZvdGluZyBwZXJpb2QgaGFzIGVuZGVkLgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjIzMQogICAgLy8gYXNzZXJ0IHNlbGYubG9jYWxfdm90ZV9jaG9pY2VbYWNjb3VudF0gPT0gVUludDY0KAogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAidm90ZV9jaG9pY2UiCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5sb2NhbF92b3RlX2Nob2ljZSBleGlzdHMgZm9yIGFjY291bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMzEtMjMzCiAgICAvLyBhc3NlcnQgc2VsZi5sb2NhbF92b3RlX2Nob2ljZVthY2NvdW50XSA9PSBVSW50NjQoCiAgICAvLyAgICAgMAogICAgLy8gKSwgIlRoaXMgYWNjb3VudCBhbHJlYWR5IHN1Ym1pdHRlZCBhIHZvdGUuIgogICAgIQogICAgYXNzZXJ0IC8vIFRoaXMgYWNjb3VudCBhbHJlYWR5IHN1Ym1pdHRlZCBhIHZvdGUuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjM2CiAgICAvLyBjaG9pY2UgPT0gVUludDY0KDEpIG9yIGNob2ljZSA9PSBVSW50NjQoMikgb3IgY2hvaWNlID09IFVJbnQ2NCgzKQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGR1cAogICAgYm56IHN1Ym1pdF92b3RlX2Jvb2xfdHJ1ZUAzCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMiAvLyAyCiAgICA9PQogICAgYm56IHN1Ym1pdF92b3RlX2Jvb2xfdHJ1ZUAzCiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgYnogc3VibWl0X3ZvdGVfYm9vbF9mYWxzZUA0CgpzdWJtaXRfdm90ZV9ib29sX3RydWVAMzoKICAgIGludGNfMSAvLyAxCiAgICBiIHN1Ym1pdF92b3RlX2Jvb2xfbWVyZ2VANQoKc3VibWl0X3ZvdGVfYm9vbF9mYWxzZUA0OgogICAgaW50Y18wIC8vIDAKCnN1Ym1pdF92b3RlX2Jvb2xfbWVyZ2VANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMzUtMjM3CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIGNob2ljZSA9PSBVSW50NjQoMSkgb3IgY2hvaWNlID09IFVJbnQ2NCgyKSBvciBjaG9pY2UgPT0gVUludDY0KDMpCiAgICAvLyApLCAiSW52YWxpZCBjaG9pY2UuIENhbiBvbmx5IGNob29zZSBiZXR3ZWVuIGNob2ljZXMgMSwgMiwgMy4iCiAgICBhc3NlcnQgLy8gSW52YWxpZCBjaG9pY2UuIENhbiBvbmx5IGNob29zZSBiZXR3ZWVuIGNob2ljZXMgMSwgMiwgMy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMzktMjQwCiAgICAvLyAjIE1hcmsgdGhlIGFjY291bnQgYXMgaGF2aW5nIHZvdGVkCiAgICAvLyBzZWxmLmxvY2FsX3ZvdGVfc3RhdHVzW2FjY291bnRdID0gVUludDY0KDEpCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ5dGVjIDcgLy8gInZvdGVfc3RhdHVzIgogICAgaW50Y18xIC8vIDEKICAgIGFwcF9sb2NhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyNDItMjQzCiAgICAvLyAjIEluY3JlbWVudCBjb3VudCBmb3IgdG90YWwgdm90ZXMKICAgIC8vIHNlbGYudG90YWxfdm90ZV9jb3VudCArPSBVSW50NjQoMSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA2IC8vICJ0b3RhbF92b3RlX2NvdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsX3ZvdGVfY291bnQgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgYnl0ZWMgNiAvLyAidG90YWxfdm90ZV9jb3VudCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjQ1LTI0NgogICAgLy8gIyBVcGRhdGUgdm90ZSB0YWxseQogICAgLy8gaWYgY2hvaWNlID09IFVJbnQ2NCgxKToKICAgIGZyYW1lX2RpZyAwCiAgICBieiBzdWJtaXRfdm90ZV9lbHNlX2JvZHlANwogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI0NwogICAgLy8gc2VsZi5jaG9pY2UxX3ZvdGVfY291bnQgKz0gVUludDY0KDEpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiY2hvaWNlMV92b3RlX2NvdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNob2ljZTFfdm90ZV9jb3VudCBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlY18zIC8vICJjaG9pY2UxX3ZvdGVfY291bnQiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI0OAogICAgLy8gc2VsZi5sb2NhbF92b3RlX2Nob2ljZVthY2NvdW50XSA9IFVJbnQ2NCgxKQogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlY18wIC8vICJ2b3RlX2Nob2ljZSIKICAgIGludGNfMSAvLyAxCiAgICBhcHBfbG9jYWxfcHV0CiAgICBiIHN1Ym1pdF92b3RlX2FmdGVyX2lmX2Vsc2VAMTEKCnN1Ym1pdF92b3RlX2Vsc2VfYm9keUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI0OQogICAgLy8gZWxpZiBjaG9pY2UgPT0gVUludDY0KDIpOgogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzIgLy8gMgogICAgPT0KICAgIGJ6IHN1Ym1pdF92b3RlX2Vsc2VfYm9keUA5CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjUwCiAgICAvLyBzZWxmLmNob2ljZTJfdm90ZV9jb3VudCArPSBVSW50NjQoMSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJjaG9pY2UyX3ZvdGVfY291bnQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuY2hvaWNlMl92b3RlX2NvdW50IGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ5dGVjIDQgLy8gImNob2ljZTJfdm90ZV9jb3VudCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjUxCiAgICAvLyBzZWxmLmxvY2FsX3ZvdGVfY2hvaWNlW2FjY291bnRdID0gVUludDY0KDIpCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ5dGVjXzAgLy8gInZvdGVfY2hvaWNlIgogICAgaW50Y18yIC8vIDIKICAgIGFwcF9sb2NhbF9wdXQKICAgIGIgc3VibWl0X3ZvdGVfYWZ0ZXJfaWZfZWxzZUAxMQoKc3VibWl0X3ZvdGVfZWxzZV9ib2R5QDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjUzCiAgICAvLyBzZWxmLmNob2ljZTNfdm90ZV9jb3VudCArPSBVSW50NjQoMSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA1IC8vICJjaG9pY2UzX3ZvdGVfY291bnQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuY2hvaWNlM192b3RlX2NvdW50IGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ5dGVjIDUgLy8gImNob2ljZTNfdm90ZV9jb3VudCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjU0CiAgICAvLyBzZWxmLmxvY2FsX3ZvdGVfY2hvaWNlW2FjY291bnRdID0gVUludDY0KDMpCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ5dGVjXzAgLy8gInZvdGVfY2hvaWNlIgogICAgcHVzaGludCAzIC8vIDMKICAgIGFwcF9sb2NhbF9wdXQKCnN1Ym1pdF92b3RlX2FmdGVyX2lmX2Vsc2VAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjU2LTI1NwogICAgLy8gIyBMb2cgaW5mbyBvbi1jaGFpbgogICAgLy8gbG9nKCJWb3RlIHN1Ym1pdHRlZCBzdWNjZXNzZnVsbHkgZm9yIGFjY291bnQgYWRkcmVzczogIiwgYWNjb3VudCkKICAgIHB1c2hieXRlcyAiVm90ZSBzdWJtaXR0ZWQgc3VjY2Vzc2Z1bGx5IGZvciBhY2NvdW50IGFkZHJlc3M6ICIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyNTgKICAgIC8vIGxvZygiVm90ZSBzdWJtaXR0ZWQgZm9yIGNob2ljZSBudW1iZXI6ICIsIGNob2ljZSkKICAgIGZyYW1lX2RpZyAtMQogICAgaXRvYgogICAgcHVzaGJ5dGVzICJWb3RlIHN1Ym1pdHRlZCBmb3IgY2hvaWNlIG51bWJlcjogIgogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5vcGVuX2JhbGxvdC5jb250cmFjdC5PcGVuQmFsbG90LnRlcm1pbmF0ZSgpIC0+IHZvaWQ6CnRlcm1pbmF0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyNjAtMjYyCiAgICAvLyAjIERlZmluZSBhYmltZXRob2QgdGhhdCBhbGxvd3MgdGhlIGNyZWF0b3IgdG8gZGVsZXRlIEFwcCBhbmQgZ2V0IHRoZWlyIGdsb2JhbCBzY2hlbWEgTUJSIGNvc3QgcmVmdW5kZWQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiRGVsZXRlQXBwbGljYXRpb24iXSkKICAgIC8vIGRlZiB0ZXJtaW5hdGUoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI2NQogICAgLy8gVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjYzLTI2NgogICAgLy8gIyBNYWtlIG5lY2Vzc2FyeSBhc3NlcnRpb25zIHRvIHZlcmlmeSB0cmFuc2FjdGlvbiByZXF1aXJlbWVudHMKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICAvLyApLCAiT25seSBBcHAgY3JlYXRvciBjYW4gdGVybWluYXRlIHRoZSBBcHAuIgogICAgYXNzZXJ0IC8vIE9ubHkgQXBwIGNyZWF0b3IgY2FuIHRlcm1pbmF0ZSB0aGUgQXBwLgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI3MC0yNzYKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgLy8gICAgIGFtb3VudD1zZWxmLmNhbGNfbWJyKG51bV9ieXRlcz1VSW50NjQoMCksIG51bV91aW50PVVJbnQ2NCg4KSkgLSBtaW5fdHhuX2ZlZSwKICAgIC8vICAgICBzZW5kZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBmZWU9bWluX3R4bl9mZWUsCiAgICAvLyAgICAgbm90ZT0iTUJSIHJlZnVuZCBmb3IgZGVsZXRpbmcgQXBwLiIsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjcxCiAgICAvLyByZWNlaXZlcj1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjcyCiAgICAvLyBhbW91bnQ9c2VsZi5jYWxjX21icihudW1fYnl0ZXM9VUludDY0KDApLCBudW1fdWludD1VSW50NjQoOCkpIC0gbWluX3R4bl9mZWUsCiAgICBpbnRjXzAgLy8gMAogICAgcHVzaGludCA4IC8vIDgKICAgIGNhbGxzdWIgY2FsY19tYnIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyNjgtMjY5CiAgICAvLyAjIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbiAoY3JlYXRvciBnZXRzIHRoZWlyIG1iciBwYXltZW50IHJlZnVuZGVkKQogICAgLy8gbWluX3R4bl9mZWUgPSBVSW50NjQoMTAwMCkKICAgIGludGNfMyAvLyAxMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjcyCiAgICAvLyBhbW91bnQ9c2VsZi5jYWxjX21icihudW1fYnl0ZXM9VUludDY0KDApLCBudW1fdWludD1VSW50NjQoOCkpIC0gbWluX3R4bl9mZWUsCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjczCiAgICAvLyBzZW5kZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6Mjc1CiAgICAvLyBub3RlPSJNQlIgcmVmdW5kIGZvciBkZWxldGluZyBBcHAuIiwKICAgIHB1c2hieXRlcyAiTUJSIHJlZnVuZCBmb3IgZGVsZXRpbmcgQXBwLiIKICAgIGl0eG5fZmllbGQgTm90ZQogICAgaXR4bl9maWVsZCBTZW5kZXIKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjcwCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICBpbnRjXzEgLy8gcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjY4LTI2OQogICAgLy8gIyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24gKGNyZWF0b3IgZ2V0cyB0aGVpciBtYnIgcGF5bWVudCByZWZ1bmRlZCkKICAgIC8vIG1pbl90eG5fZmVlID0gVUludDY0KDEwMDApCiAgICBpbnRjXzMgLy8gMTAwMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyNzAtMjc2CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIC8vICAgICBhbW91bnQ9c2VsZi5jYWxjX21icihudW1fYnl0ZXM9VUludDY0KDApLCBudW1fdWludD1VSW50NjQoOCkpIC0gbWluX3R4bl9mZWUsCiAgICAvLyAgICAgc2VuZGVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgZmVlPW1pbl90eG5fZmVlLAogICAgLy8gICAgIG5vdGU9Ik1CUiByZWZ1bmQgZm9yIGRlbGV0aW5nIEFwcC4iLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyODEKICAgIC8vIEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2lkLmlkLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECiAgICBpdG9iCiAgICBwdXNoYnl0ZXMgIlRlcm1pbmF0aW9uIG1ldGhvZCBzdWNjZXNzZnVsIGZvciBBcHAgSUQ6ICIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI3OC0yODIKICAgIC8vICMgTG9nIGluZm8gb24tY2hhaW4KICAgIC8vIGxvZygKICAgIC8vICAgICAiVGVybWluYXRpb24gbWV0aG9kIHN1Y2Nlc3NmdWwgZm9yIEFwcCBJRDogIiwKICAgIC8vICAgICBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9pZC5pZCwKICAgIC8vICkKICAgIGxvZwogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 8
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 2
        }
    },
    "schema": {
        "global": {
            "declared": {
                "choice1_vote_count": {
                    "type": "uint64",
                    "key": "choice1_vote_count"
                },
                "choice2_vote_count": {
                    "type": "uint64",
                    "key": "choice2_vote_count"
                },
                "choice3_vote_count": {
                    "type": "uint64",
                    "key": "choice3_vote_count"
                },
                "total_accounts_opted_in": {
                    "type": "uint64",
                    "key": "total_accounts_opted_in"
                },
                "total_vote_count": {
                    "type": "uint64",
                    "key": "total_vote_count"
                },
                "vote_dates_final": {
                    "type": "uint64",
                    "key": "vote_dates_final"
                },
                "vote_end_date_unix": {
                    "type": "uint64",
                    "key": "vote_end_date_unix"
                },
                "vote_start_date_unix": {
                    "type": "uint64",
                    "key": "vote_start_date_unix"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "local_vote_choice": {
                    "type": "uint64",
                    "key": "vote_choice",
                    "descr": "Account vote choice (based on UInt64 corresponding w/ choice)"
                },
                "local_vote_status": {
                    "type": "uint64",
                    "key": "vote_status",
                    "descr": "Account vote status ('0' = not voted, '1' = voted)"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "OpenBallot",
        "methods": [
            {
                "name": "generate",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "global_storage_mbr",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "local_storage_mbr",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    },
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "opt_out",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_vote_dates",
                "args": [
                    {
                        "type": "string",
                        "name": "vote_start_date_str"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_start_date_unix"
                    },
                    {
                        "type": "string",
                        "name": "vote_end_date_str"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_end_date_unix"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "submit_vote",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    },
                    {
                        "type": "uint64",
                        "name": "choice"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "terminate",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class DeployCreate(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


@dataclasses.dataclass(kw_only=True)
class Deploy(algokit_utils.DeployCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class GlobalStorageMbrArgs(_ArgsBase[None]):
    mbr_pay: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "global_storage_mbr(pay)void"


@dataclasses.dataclass(kw_only=True)
class SetVoteDatesArgs(_ArgsBase[None]):
    vote_start_date_str: str
    vote_start_date_unix: int
    vote_end_date_str: str
    vote_end_date_unix: int

    @staticmethod
    def method() -> str:
        return "set_vote_dates(string,uint64,string,uint64)void"


@dataclasses.dataclass(kw_only=True)
class SubmitVoteArgs(_ArgsBase[None]):
    account: str | bytes
    choice: int

    @staticmethod
    def method() -> str:
        return "submit_vote(account,uint64)void"


@dataclasses.dataclass(kw_only=True)
class GenerateArgs(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "generate()void"


@dataclasses.dataclass(kw_only=True)
class TerminateArgs(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "terminate()void"


@dataclasses.dataclass(kw_only=True)
class LocalStorageMbrArgs(_ArgsBase[None]):
    account: str | bytes
    mbr_pay: TransactionWithSigner

    @staticmethod
    def method() -> str:
        return "local_storage_mbr(account,pay)void"


@dataclasses.dataclass(kw_only=True)
class OptOutArgs(_ArgsBase[None]):
    account: str | bytes

    @staticmethod
    def method() -> str:
        return "opt_out(account)void"


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.choice1_vote_count = typing.cast(int, data.get(b"choice1_vote_count"))
        self.choice2_vote_count = typing.cast(int, data.get(b"choice2_vote_count"))
        self.choice3_vote_count = typing.cast(int, data.get(b"choice3_vote_count"))
        self.total_accounts_opted_in = typing.cast(int, data.get(b"total_accounts_opted_in"))
        self.total_vote_count = typing.cast(int, data.get(b"total_vote_count"))
        self.vote_dates_final = typing.cast(int, data.get(b"vote_dates_final"))
        self.vote_end_date_unix = typing.cast(int, data.get(b"vote_end_date_unix"))
        self.vote_start_date_unix = typing.cast(int, data.get(b"vote_start_date_unix"))


class LocalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.local_vote_choice = typing.cast(int, data.get(b"vote_choice"))
        """Account vote choice (based on UInt64 corresponding w/ choice)"""
        self.local_vote_status = typing.cast(int, data.get(b"vote_status"))
        """Account vote status ('0' = not voted, '1' = voted)"""


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def global_storage_mbr(
        self,
        *,
        mbr_pay: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `global_storage_mbr(pay)void` ABI method
        
        :param TransactionWithSigner mbr_pay: The `mbr_pay` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GlobalStorageMbrArgs(
            mbr_pay=mbr_pay,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def set_vote_dates(
        self,
        *,
        vote_start_date_str: str,
        vote_start_date_unix: int,
        vote_end_date_str: str,
        vote_end_date_unix: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `set_vote_dates(string,uint64,string,uint64)void` ABI method
        
        :param str vote_start_date_str: The `vote_start_date_str` ABI parameter
        :param int vote_start_date_unix: The `vote_start_date_unix` ABI parameter
        :param str vote_end_date_str: The `vote_end_date_str` ABI parameter
        :param int vote_end_date_unix: The `vote_end_date_unix` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SetVoteDatesArgs(
            vote_start_date_str=vote_start_date_str,
            vote_start_date_unix=vote_start_date_unix,
            vote_end_date_str=vote_end_date_str,
            vote_end_date_unix=vote_end_date_unix,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def submit_vote(
        self,
        *,
        account: str | bytes,
        choice: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `submit_vote(account,uint64)void` ABI method
        
        :param str | bytes account: The `account` ABI parameter
        :param int choice: The `choice` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SubmitVoteArgs(
            account=account,
            choice=choice,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_generate(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `generate()void` ABI method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = GenerateArgs()
        self.app_client.compose_create(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return self

    def delete_terminate(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `terminate()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = TerminateArgs()
        self.app_client.compose_delete(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def opt_in_local_storage_mbr(
        self,
        *,
        account: str | bytes,
        mbr_pay: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `local_storage_mbr(account,pay)void` ABI method
        
        :param str | bytes account: The `account` ABI parameter
        :param TransactionWithSigner mbr_pay: The `mbr_pay` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = LocalStorageMbrArgs(
            account=account,
            mbr_pay=mbr_pay,
        )
        self.app_client.compose_opt_in(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def close_out_opt_out(
        self,
        *,
        account: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `opt_out(account)void` ABI method
        
        :param str | bytes account: The `account` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = OptOutArgs(
            account=account,
        )
        self.app_client.compose_close_out(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class OpenBallotClient:
    """A class for interacting with the OpenBallot app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        OpenBallotClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_global_state(self) -> GlobalState:
        """Returns the application's global state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_global_state(raw=True))
        return GlobalState(state)

    def get_local_state(self, account: str | None = None) -> LocalState:
        """Returns the application's local state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_local_state(account, raw=True))
        return LocalState(state)

    def global_storage_mbr(
        self,
        *,
        mbr_pay: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `global_storage_mbr(pay)void` ABI method
        
        :param TransactionWithSigner mbr_pay: The `mbr_pay` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = GlobalStorageMbrArgs(
            mbr_pay=mbr_pay,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def set_vote_dates(
        self,
        *,
        vote_start_date_str: str,
        vote_start_date_unix: int,
        vote_end_date_str: str,
        vote_end_date_unix: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `set_vote_dates(string,uint64,string,uint64)void` ABI method
        
        :param str vote_start_date_str: The `vote_start_date_str` ABI parameter
        :param int vote_start_date_unix: The `vote_start_date_unix` ABI parameter
        :param str vote_end_date_str: The `vote_end_date_str` ABI parameter
        :param int vote_end_date_unix: The `vote_end_date_unix` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SetVoteDatesArgs(
            vote_start_date_str=vote_start_date_str,
            vote_start_date_unix=vote_start_date_unix,
            vote_end_date_str=vote_end_date_str,
            vote_end_date_unix=vote_end_date_unix,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def submit_vote(
        self,
        *,
        account: str | bytes,
        choice: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `submit_vote(account,uint64)void` ABI method
        
        :param str | bytes account: The `account` ABI parameter
        :param int choice: The `choice` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SubmitVoteArgs(
            account=account,
            choice=choice,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_generate(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `generate()void` ABI method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = GenerateArgs()
        result = self.app_client.create(
            call_abi_method=args.method(),
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
            **_as_dict(args, convert_all=True),
        )
        return result

    def delete_terminate(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `terminate()void` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = TerminateArgs()
        result = self.app_client.delete(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def opt_in_local_storage_mbr(
        self,
        *,
        account: str | bytes,
        mbr_pay: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `local_storage_mbr(account,pay)void` ABI method
        
        :param str | bytes account: The `account` ABI parameter
        :param TransactionWithSigner mbr_pay: The `mbr_pay` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = LocalStorageMbrArgs(
            account=account,
            mbr_pay=mbr_pay,
        )
        result = self.app_client.opt_in(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def close_out_opt_out(
        self,
        *,
        account: str | bytes,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `opt_out(account)void` ABI method
        
        :param str | bytes account: The `account` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = OptOutArgs(
            account=account,
        )
        result = self.app_client.close_out(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate[GenerateArgs],
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: Deploy[TerminateArgs],
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param DeployCreate[GenerateArgs] create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param Deploy[TerminateArgs] delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
