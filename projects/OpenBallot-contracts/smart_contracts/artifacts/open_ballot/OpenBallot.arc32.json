{
    "hints": {
        "generate()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "get_version_unix()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fund_app_mbr(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "request_box_storage(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "submit_vote(uint8)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_box_storage()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "purge_box_storage(address[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "terminate()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5hcHByb3ZhbF9wcm9ncmFtOgogICAgaW50Y2Jsb2NrIDEgMCAxMDAwIDExNiBUTVBMX1ZFUlNJT05fVU5JWCBUTVBMX0RFTEVUQUJMRQogICAgYnl0ZWNibG9jayAweDYxNWYgInRvdGFsX3B1cmdlZF9ib3hfYV8iICJwb2xsX2ZpbmFsaXplZCIgInRvdGFsX2Nob2ljZTEiICJ0b3RhbF9jaG9pY2UyIiAidG90YWxfY2hvaWNlMyIgInRvdGFsX3ZvdGVzIiAicG9sbF9lbmRfZGF0ZV91bml4IiAweDAwMDAKICAgIGNhbGxzdWIgX19wdXlhX2FyYzRfcm91dGVyX18KICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5vcGVuX2JhbGxvdC5jb250cmFjdC5PcGVuQmFsbG90Ll9fcHV5YV9hcmM0X3JvdXRlcl9fKCkgLT4gdWludDY0OgpfX3B1eWFfYXJjNF9yb3V0ZXJfXzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyNQogICAgLy8gY2xhc3MgT3BlbkJhbGxvdChBUkM0Q29udHJhY3QpOgogICAgcHJvdG8gMCAxCiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogX19wdXlhX2FyYzRfcm91dGVyX19fYWZ0ZXJfaWZfZWxzZUAxNAogICAgcHVzaGJ5dGVzcyAweDViZTIxOWYwIDB4ODFlMTY1OGYgMHhlNmJmNGYyMyAweGZlN2I2ZTM5IDB4OGMyZWNmMjIgMHg3NjFkZDBmYSAweDZlMGI4M2I5IDB4YmRlZmRmNDUgMHg1ZmYxNmRhNCAvLyBtZXRob2QgImdlbmVyYXRlKCl2b2lkIiwgbWV0aG9kICJnZXRfdmVyc2lvbl91bml4KCl1aW50NjQiLCBtZXRob2QgInNldF9wb2xsKGJ5dGVbXSxieXRlW10sYnl0ZVtdLGJ5dGVbXSx1aW50NjQsdWludDY0KXZvaWQiLCBtZXRob2QgImZ1bmRfYXBwX21icihwYXkpdm9pZCIsIG1ldGhvZCAicmVxdWVzdF9ib3hfc3RvcmFnZShwYXkpdm9pZCIsIG1ldGhvZCAic3VibWl0X3ZvdGUodWludDgpdm9pZCIsIG1ldGhvZCAiZGVsZXRlX2JveF9zdG9yYWdlKCl2b2lkIiwgbWV0aG9kICJwdXJnZV9ib3hfc3RvcmFnZShhZGRyZXNzW10pdm9pZCIsIG1ldGhvZCAidGVybWluYXRlKCl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggX19wdXlhX2FyYzRfcm91dGVyX19fZ2VuZXJhdGVfcm91dGVAMiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19nZXRfdmVyc2lvbl91bml4X3JvdXRlQDMgX19wdXlhX2FyYzRfcm91dGVyX19fc2V0X3BvbGxfcm91dGVANCBfX3B1eWFfYXJjNF9yb3V0ZXJfX19mdW5kX2FwcF9tYnJfcm91dGVANSBfX3B1eWFfYXJjNF9yb3V0ZXJfX19yZXF1ZXN0X2JveF9zdG9yYWdlX3JvdXRlQDYgX19wdXlhX2FyYzRfcm91dGVyX19fc3VibWl0X3ZvdGVfcm91dGVANyBfX3B1eWFfYXJjNF9yb3V0ZXJfX19kZWxldGVfYm94X3N0b3JhZ2Vfcm91dGVAOCBfX3B1eWFfYXJjNF9yb3V0ZXJfX19wdXJnZV9ib3hfc3RvcmFnZV9yb3V0ZUA5IF9fcHV5YV9hcmM0X3JvdXRlcl9fX3Rlcm1pbmF0ZV9yb3V0ZUAxMAogICAgaW50Y18xIC8vIDAKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fZ2VuZXJhdGVfcm91dGVAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMDQtMTA1CiAgICAvLyAjIENhbGwgdGhlICdDcmVhdGUnIGFiaW1ldGhvZCB0aGF0IGdlbmVyYXRlcyB0aGUgc21hcnQgY29udHJhY3QgY2xpZW50IGFuZCBpbml0aWFsaXplcyBnbG9iYWwgc3RvcmFnZSBpbnQgdmFyaWFibGVzCiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBjYWxsc3ViIGdlbmVyYXRlCiAgICBpbnRjXzAgLy8gMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19nZXRfdmVyc2lvbl91bml4X3JvdXRlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTI5LTEzMAogICAgLy8gIyBSZXRyaWV2ZSB0aGUgdmVyc2lvbiBvZiB0aGUgc21hcnQgY29udHJhY3QgaW4gYW4gVW5peCBmb3JtYXQgdGltZXN0YW1wCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfdmVyc2lvbl91bml4CiAgICBpdG9iCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX3NldF9wb2xsX3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTM0LTEzNQogICAgLy8gIyBFbmFibGUgYXBwbGljYXRpb24gY3JlYXRvciB0byBzZXQgdXAgcG9sbCBkYXRhIHZhbHVlcyBpbmNsdWRpbmcgdGl0bGUsIGNob2ljZXMsIGFuZCBkYXRlcwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyNQogICAgLy8gY2xhc3MgT3BlbkJhbGxvdChBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDUKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDYKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMzQtMTM1CiAgICAvLyAjIEVuYWJsZSBhcHBsaWNhdGlvbiBjcmVhdG9yIHRvIHNldCB1cCBwb2xsIGRhdGEgdmFsdWVzIGluY2x1ZGluZyB0aXRsZSwgY2hvaWNlcywgYW5kIGRhdGVzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc2V0X3BvbGwKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2Z1bmRfYXBwX21icl9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE5My0xOTQKICAgIC8vICMgRW5hYmxlIGFwcGxpY2F0aW9uIGNyZWF0b3IgdG8gZnVuZCBBcHAgYWRkcmVzcyBhbmQgY292ZXJzIGl0cyBHbG9iYWwgbWluaW11bSBiYWxhbmNlIGFuZCBCb3ggc3RvcmFnZSBNQlIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjUKICAgIC8vIGNsYXNzIE9wZW5CYWxsb3QoQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzAgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18wIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE5My0xOTQKICAgIC8vICMgRW5hYmxlIGFwcGxpY2F0aW9uIGNyZWF0b3IgdG8gZnVuZCBBcHAgYWRkcmVzcyBhbmQgY292ZXJzIGl0cyBHbG9iYWwgbWluaW11bSBiYWxhbmNlIGFuZCBCb3ggc3RvcmFnZSBNQlIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBmdW5kX2FwcF9tYnIKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX3JlcXVlc3RfYm94X3N0b3JhZ2Vfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMzMtMjM0CiAgICAvLyAjIEVuYWJsZSBhbnkgZWxpZ2libGUgYWNjb3VudCB0byByZXF1ZXN0IGJveCBzdG9yYWdlIGJ5IHBheWluZyBhIE1CUiBjb3N0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI1CiAgICAvLyBjbGFzcyBPcGVuQmFsbG90KEFSQzRDb250cmFjdCk6CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMCAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMzMtMjM0CiAgICAvLyAjIEVuYWJsZSBhbnkgZWxpZ2libGUgYWNjb3VudCB0byByZXF1ZXN0IGJveCBzdG9yYWdlIGJ5IHBheWluZyBhIE1CUiBjb3N0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgcmVxdWVzdF9ib3hfc3RvcmFnZQogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fc3VibWl0X3ZvdGVfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyNjYtMjY3CiAgICAvLyAjIEVuYWJsZSBhbnkgZWxpZ2libGUgYWNjb3VudCB0byBzdWJtaXQgYSB2b3RlCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI1CiAgICAvLyBjbGFzcyBPcGVuQmFsbG90KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjY2LTI2NwogICAgLy8gIyBFbmFibGUgYW55IGVsaWdpYmxlIGFjY291bnQgdG8gc3VibWl0IGEgdm90ZQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHN1Ym1pdF92b3RlCiAgICBpbnRjXzAgLy8gMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19kZWxldGVfYm94X3N0b3JhZ2Vfcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozMjEtMzIyCiAgICAvLyAjIEVuYWJsZSBhbnkgZWxpZ2JsZSBhY2NvdW50IHRvIGRlbGV0ZSB0aGVpciBib3ggc3RvcmFnZSBhbmQgZ2V0IHRoZWlyIE1CUiBwYXltZW50IHJlZnVuZGVkCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBkZWxldGVfYm94X3N0b3JhZ2UKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX3B1cmdlX2JveF9zdG9yYWdlX3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzU5LTM2MAogICAgLy8gIyBFbmFibGUgYXBwbGljYXRpb24gY3JlYXRvciB0byBleGVjdXRlIGJveCBzdG9yYWdlIHB1cmdlLCB0aGlzIGRlbGV0ZXMgYW55IGJveGVzIG5vdCBkZWxldGVkIGJ5IG90aGVyIGFjY291bnRzCiAgICAvLyBAYXJjNC5hYmltZXRob2QgICMgTk9URTogQ2FuIGFsc28gdXNlIGFyYzQuU3RhdGljQXJyYXlbYXJjNC5BZGRyZXNzLCB0LkxpdGVyYWxbOF1dIHRvIGVuZm9yY2Ugc3RyaWN0IHNpemUgb2YgOAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjUKICAgIC8vIGNsYXNzIE9wZW5CYWxsb3QoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozNTktMzYwCiAgICAvLyAjIEVuYWJsZSBhcHBsaWNhdGlvbiBjcmVhdG9yIHRvIGV4ZWN1dGUgYm94IHN0b3JhZ2UgcHVyZ2UsIHRoaXMgZGVsZXRlcyBhbnkgYm94ZXMgbm90IGRlbGV0ZWQgYnkgb3RoZXIgYWNjb3VudHMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCAgIyBOT1RFOiBDYW4gYWxzbyB1c2UgYXJjNC5TdGF0aWNBcnJheVthcmM0LkFkZHJlc3MsIHQuTGl0ZXJhbFs4XV0gdG8gZW5mb3JjZSBzdHJpY3Qgc2l6ZSBvZiA4CiAgICBjYWxsc3ViIHB1cmdlX2JveF9zdG9yYWdlCiAgICBpbnRjXzAgLy8gMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX190ZXJtaW5hdGVfcm91dGVAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzkzLTM5NAogICAgLy8gIyBBbGxvdyBhcHBsaWNhdGlvbiBjcmVhdG9yIHRvIGRlbGV0ZSB0aGUgc21hcnQgY29udHJhY3QgY2xpZW50LCBkZWNyZWFzZSB0aGVpciBNQlIgYmFsYW5jZSArIGFueSByZW1haW5pbmcgYm94IE1CUgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0iZGlzYWxsb3ciLCBhbGxvd19hY3Rpb25zPVsiRGVsZXRlQXBwbGljYXRpb24iXSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIHB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IERlbGV0ZUFwcGxpY2F0aW9uCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdGVybWluYXRlCiAgICBpbnRjXzAgLy8gMQogICAgcmV0c3ViCgpfX3B1eWFfYXJjNF9yb3V0ZXJfX19hZnRlcl9pZl9lbHNlQDE0OgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI1CiAgICAvLyBjbGFzcyBPcGVuQmFsbG90KEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzEgLy8gMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLm9wZW5fYmFsbG90LmNvbnRyYWN0Lk9wZW5CYWxsb3QuZ2VuZXJhdGUoKSAtPiB2b2lkOgpnZW5lcmF0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMDQtMTA2CiAgICAvLyAjIENhbGwgdGhlICdDcmVhdGUnIGFiaW1ldGhvZCB0aGF0IGdlbmVyYXRlcyB0aGUgc21hcnQgY29udHJhY3QgY2xpZW50IGFuZCBpbml0aWFsaXplcyBnbG9iYWwgc3RvcmFnZSBpbnQgdmFyaWFibGVzCiAgICAvLyBAYXJjNC5hYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIC8vIGRlZiBnZW5lcmF0ZShzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTA5CiAgICAvLyBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMDctMTEwCiAgICAvLyAjIE1ha2UgbmVjZXNzYXJ5IGFzc2VydGlvbnMgdG8gdmVyaWZ5IHRyYW5zYWN0aW9uIHJlcXVpcmVtZW50cwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIC8vICksICJUcmFuc2FjdGlvbiBzZW5kZXIgYWRkcmVzcyBtdXN0IG1hdGNoIGFwcGxpY2F0aW9uIGNyZWF0b3IgYWRkcmVzcy4iCiAgICBhc3NlcnQgLy8gVHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBjcmVhdG9yIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTEyCiAgICAvLyBhc3NlcnQgR2xvYmFsLmNyZWF0b3JfYWRkcmVzcy5iYWxhbmNlID49ICgKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMTMKICAgIC8vIEdsb2JhbC5taW5fYmFsYW5jZQogICAgZ2xvYmFsIE1pbkJhbGFuY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMTUKICAgIC8vIG51bV9ieXRlcz1VSW50NjQoNCksIG51bV91aW50PVVJbnQ2NCg4KQogICAgcHVzaGludHMgNCA4IC8vIDQsIDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMTQtMTE2CiAgICAvLyArIHNlbGYuY2FsY19zY2hlbWFfbWJyKAogICAgLy8gICAgIG51bV9ieXRlcz1VSW50NjQoNCksIG51bV91aW50PVVJbnQ2NCg4KQogICAgLy8gKSAgIyBHbG9iYWwgc2NoZW1hIE1CUjogMC4xIChHbG9iYWwubWluX2JhbGFuY2UpICsgMC40MjggQUxHTyAoR2xvYmFsIHNjaGVtYSkKICAgIGNhbGxzdWIgY2FsY19zY2hlbWFfbWJyCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTEzLTExNgogICAgLy8gR2xvYmFsLm1pbl9iYWxhbmNlCiAgICAvLyArIHNlbGYuY2FsY19zY2hlbWFfbWJyKAogICAgLy8gICAgIG51bV9ieXRlcz1VSW50NjQoNCksIG51bV91aW50PVVJbnQ2NCg4KQogICAgLy8gKSAgIyBHbG9iYWwgc2NoZW1hIE1CUjogMC4xIChHbG9iYWwubWluX2JhbGFuY2UpICsgMC40MjggQUxHTyAoR2xvYmFsIHNjaGVtYSkKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMTItMTE2CiAgICAvLyBhc3NlcnQgR2xvYmFsLmNyZWF0b3JfYWRkcmVzcy5iYWxhbmNlID49ICgKICAgIC8vICAgICBHbG9iYWwubWluX2JhbGFuY2UKICAgIC8vICAgICArIHNlbGYuY2FsY19zY2hlbWFfbWJyKAogICAgLy8gICAgICAgICBudW1fYnl0ZXM9VUludDY0KDQpLCBudW1fdWludD1VSW50NjQoOCkKICAgIC8vICAgICApICAjIEdsb2JhbCBzY2hlbWEgTUJSOiAwLjEgKEdsb2JhbC5taW5fYmFsYW5jZSkgKyAwLjQyOCBBTEdPIChHbG9iYWwgc2NoZW1hKQogICAgPj0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMTItMTE3CiAgICAvLyBhc3NlcnQgR2xvYmFsLmNyZWF0b3JfYWRkcmVzcy5iYWxhbmNlID49ICgKICAgIC8vICAgICBHbG9iYWwubWluX2JhbGFuY2UKICAgIC8vICAgICArIHNlbGYuY2FsY19zY2hlbWFfbWJyKAogICAgLy8gICAgICAgICBudW1fYnl0ZXM9VUludDY0KDQpLCBudW1fdWludD1VSW50NjQoOCkKICAgIC8vICAgICApICAjIEdsb2JhbCBzY2hlbWEgTUJSOiAwLjEgKEdsb2JhbC5taW5fYmFsYW5jZSkgKyAwLjQyOCBBTEdPIChHbG9iYWwgc2NoZW1hKQogICAgLy8gKSwgIkFwcGxpY2F0aW9uIGNyZWF0b3IgYWRkcmVzcyBiYWxhbmNlIG11c3QgYmUgZXF1YWwgb3IgZ3JlYXRlciB0aGFuIEdsb2JhbC5taW5fYmFsYW5jZSArIEdsb2JhbCBzY2hlbWEgTUJSLiIKICAgIGFzc2VydCAvLyBBcHBsaWNhdGlvbiBjcmVhdG9yIGFkZHJlc3MgYmFsYW5jZSBtdXN0IGJlIGVxdWFsIG9yIGdyZWF0ZXIgdGhhbiBHbG9iYWwubWluX2JhbGFuY2UgKyBHbG9iYWwgc2NoZW1hIE1CUi4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMTktMTIwCiAgICAvLyAjIEluaXRpYWxpemUgR2xvYmFsIHN0b3JhZ2Ugd2l0aCBkZWZhdWx0IHZhbHVlIGFzc2lnbm1lbnRzCiAgICAvLyBzZWxmLnBvbGxfZmluYWxpemVkID0gVUludDY0KDApCiAgICBieXRlY18yIC8vICJwb2xsX2ZpbmFsaXplZCIKICAgIGludGNfMSAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEyMgogICAgLy8gc2VsZi50b3RhbF9jaG9pY2UxID0gVUludDY0KDApCiAgICBieXRlY18zIC8vICJ0b3RhbF9jaG9pY2UxIgogICAgaW50Y18xIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTIzCiAgICAvLyBzZWxmLnRvdGFsX2Nob2ljZTIgPSBVSW50NjQoMCkKICAgIGJ5dGVjIDQgLy8gInRvdGFsX2Nob2ljZTIiCiAgICBpbnRjXzEgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMjQKICAgIC8vIHNlbGYudG90YWxfY2hvaWNlMyA9IFVJbnQ2NCgwKQogICAgYnl0ZWMgNSAvLyAidG90YWxfY2hvaWNlMyIKICAgIGludGNfMSAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEyNQogICAgLy8gc2VsZi50b3RhbF92b3RlcyA9IFVJbnQ2NCgwKQogICAgYnl0ZWMgNiAvLyAidG90YWxfdm90ZXMiCiAgICBpbnRjXzEgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMjcKICAgIC8vIHNlbGYudG90YWxfcHVyZ2VkX2JveF9hXyA9IFVJbnQ2NCgwKQogICAgYnl0ZWNfMSAvLyAidG90YWxfcHVyZ2VkX2JveF9hXyIKICAgIGludGNfMSAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLm9wZW5fYmFsbG90LmNvbnRyYWN0Lk9wZW5CYWxsb3QuY2FsY19zY2hlbWFfbWJyKG51bV9ieXRlczogdWludDY0LCBudW1fdWludDogdWludDY0KSAtPiB1aW50NjQ6CmNhbGNfc2NoZW1hX21icjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo2MS02MwogICAgLy8gIyBDYWxjdWxhdGUgdGhlIEdsb2JhbCBhbmQgTG9jYWwgc2NoZW1hIG1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudCB0b3RhbCBjb3N0IGZvciB0aGUgc21hcnQgY29udHJhY3QKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgY2FsY19zY2hlbWFfbWJyKHNlbGYsIG51bV9ieXRlczogVUludDY0LCBudW1fdWludDogVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo2NwogICAgLy8gYnl0ZV9mZWUgPSBVSW50NjQoNTBfMDAwKSAgIyBCeXRlIHNsaWNlIGZlZSBmb3Iga2V5LXZhbHVlIHBhaXIgKDI1XzAwMCArIDI1XzAwMCkKICAgIHB1c2hpbnQgNTAwMDAgLy8gNTAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo3MC03MQogICAgLy8gIyBNdWx0aXBseSByZXNwZWN0aXZlIGZlZSBjb3N0IHdpdGggdGhlIG51bWJlciBvZiBrZXktdmFsdWUgcGFpcnMgaW4gZWFjaCBzY2hlbWEgdG8gZ2V0IHRvdGFsIGZlZSBhbW91bnQKICAgIC8vIHRvdGFsX2J5dGVfZmVlID0gYnl0ZV9mZWUgKiBudW1fYnl0ZXMKICAgIGZyYW1lX2RpZyAtMgogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjY4CiAgICAvLyB1aW50X2ZlZSA9IFVJbnQ2NCgyOF81MDApICAjIFVJbnQ2NCBmZWUgZm9yIGtleS12YWx1ZSBwYWlyICgyNV8wMDAgKyAzXzUwMCkKICAgIHB1c2hpbnQgMjg1MDAgLy8gMjg1MDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo3MgogICAgLy8gdG90YWxfdWludF9mZWUgPSB1aW50X2ZlZSAqIG51bV91aW50CiAgICBmcmFtZV9kaWcgLTEKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo2NS02NgogICAgLy8gIyBTY2hlbWEgaW5kaXZpZHVhbCBmZWVzCiAgICAvLyBiYXNlX2ZlZSA9IFVJbnQ2NCgxMDBfMDAwKSAgIyBCYXNlIGZlZSAoMTAwXzAwMCAqICgxICsgRXh0cmFQcm9ncmFtUGFnZXMpKQogICAgcHVzaGludCAxMDAwMDAgLy8gMTAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NzQtNzUKICAgIC8vICMgUmV0dXJuIHRoZSBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQgdG90YWwgY29zdAogICAgLy8gcmV0dXJuIGJhc2VfZmVlICsgdG90YWxfYnl0ZV9mZWUgKyB0b3RhbF91aW50X2ZlZQogICAgdW5jb3ZlciAyCiAgICArCiAgICArCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5nZXRfdmVyc2lvbl91bml4KCkgLT4gdWludDY0OgpnZXRfdmVyc2lvbl91bml4OgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEyOS0xMzEKICAgIC8vICMgUmV0cmlldmUgdGhlIHZlcnNpb24gb2YgdGhlIHNtYXJ0IGNvbnRyYWN0IGluIGFuIFVuaXggZm9ybWF0IHRpbWVzdGFtcAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgZ2V0X3ZlcnNpb25fdW5peChzZWxmKSAtPiBVSW50NjQ6CiAgICBwcm90byAwIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMzIKICAgIC8vIHJldHVybiBUZW1wbGF0ZVZhcltVSW50NjRdKCJWRVJTSU9OX1VOSVgiKQogICAgaW50YyA0IC8vIFRNUExfVkVSU0lPTl9VTklYCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5zZXRfcG9sbCh0aXRsZTogYnl0ZXMsIGNob2ljZTE6IGJ5dGVzLCBjaG9pY2UyOiBieXRlcywgY2hvaWNlMzogYnl0ZXMsIHN0YXJ0X2RhdGVfdW5peDogdWludDY0LCBlbmRfZGF0ZV91bml4OiB1aW50NjQpIC0+IHZvaWQ6CnNldF9wb2xsOgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjEzNC0xNDQKICAgIC8vICMgRW5hYmxlIGFwcGxpY2F0aW9uIGNyZWF0b3IgdG8gc2V0IHVwIHBvbGwgZGF0YSB2YWx1ZXMgaW5jbHVkaW5nIHRpdGxlLCBjaG9pY2VzLCBhbmQgZGF0ZXMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHNldF9wb2xsKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgdGl0bGU6IEJ5dGVzLAogICAgLy8gICAgIGNob2ljZTE6IEJ5dGVzLAogICAgLy8gICAgIGNob2ljZTI6IEJ5dGVzLAogICAgLy8gICAgIGNob2ljZTM6IEJ5dGVzLAogICAgLy8gICAgIHN0YXJ0X2RhdGVfdW5peDogVUludDY0LAogICAgLy8gICAgIGVuZF9kYXRlX3VuaXg6IFVJbnQ2NCwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDYgMAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE0NwogICAgLy8gVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTQ1LTE0OAogICAgLy8gIyBNYWtlIG5lY2Vzc2FyeSBhc3NlcnRpb25zIHRvIHZlcmlmeSB0cmFuc2FjdGlvbiByZXF1aXJlbWVudHMKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICAvLyApLCAiT25seSBhcHBsaWNhdGlvbiBjcmVhdG9yIGNhbiBzZXQgdXAgcG9sbC4iCiAgICBhc3NlcnQgLy8gT25seSBhcHBsaWNhdGlvbiBjcmVhdG9yIGNhbiBzZXQgdXAgcG9sbC4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNTAKICAgIC8vIGFzc2VydCB0aXRsZS5sZW5ndGggPD0gVUludDY0KAogICAgZnJhbWVfZGlnIC02CiAgICBsZW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNTAtMTUyCiAgICAvLyBhc3NlcnQgdGl0bGUubGVuZ3RoIDw9IFVJbnQ2NCgKICAgIC8vICAgICAxMTgKICAgIC8vICksICJQb2xsIHRpdGxlIHNpemUgY2FuIG5vdCBleGNlZWQgMTE4IGJ5dGVzIG9mIGRhdGEgcGVyIGtleS12YWx1ZS4iCiAgICBwdXNoaW50IDExOCAvLyAxMTgKICAgIDw9CiAgICBhc3NlcnQgLy8gUG9sbCB0aXRsZSBzaXplIGNhbiBub3QgZXhjZWVkIDExOCBieXRlcyBvZiBkYXRhIHBlciBrZXktdmFsdWUuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTU1CiAgICAvLyBjaG9pY2UxLmxlbmd0aCA8PSBVSW50NjQoMTE2KQogICAgZnJhbWVfZGlnIC01CiAgICBsZW4KICAgIGludGNfMyAvLyAxMTYKICAgIDw9CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTU1LTE1NwogICAgLy8gY2hvaWNlMS5sZW5ndGggPD0gVUludDY0KDExNikKICAgIC8vIGFuZCBjaG9pY2UyLmxlbmd0aCA8PSBVSW50NjQoMTE2KQogICAgLy8gYW5kIGNob2ljZTMubGVuZ3RoIDw9IFVJbnQ2NCgxMTYpCiAgICBieiBzZXRfcG9sbF9ib29sX2ZhbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNTYKICAgIC8vIGFuZCBjaG9pY2UyLmxlbmd0aCA8PSBVSW50NjQoMTE2KQogICAgZnJhbWVfZGlnIC00CiAgICBsZW4KICAgIGludGNfMyAvLyAxMTYKICAgIDw9CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTU1LTE1NwogICAgLy8gY2hvaWNlMS5sZW5ndGggPD0gVUludDY0KDExNikKICAgIC8vIGFuZCBjaG9pY2UyLmxlbmd0aCA8PSBVSW50NjQoMTE2KQogICAgLy8gYW5kIGNob2ljZTMubGVuZ3RoIDw9IFVJbnQ2NCgxMTYpCiAgICBieiBzZXRfcG9sbF9ib29sX2ZhbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNTcKICAgIC8vIGFuZCBjaG9pY2UzLmxlbmd0aCA8PSBVSW50NjQoMTE2KQogICAgZnJhbWVfZGlnIC0zCiAgICBsZW4KICAgIGludGNfMyAvLyAxMTYKICAgIDw9CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTU1LTE1NwogICAgLy8gY2hvaWNlMS5sZW5ndGggPD0gVUludDY0KDExNikKICAgIC8vIGFuZCBjaG9pY2UyLmxlbmd0aCA8PSBVSW50NjQoMTE2KQogICAgLy8gYW5kIGNob2ljZTMubGVuZ3RoIDw9IFVJbnQ2NCgxMTYpCiAgICBieiBzZXRfcG9sbF9ib29sX2ZhbHNlQDQKICAgIGludGNfMCAvLyAxCiAgICBiIHNldF9wb2xsX2Jvb2xfbWVyZ2VANQoKc2V0X3BvbGxfYm9vbF9mYWxzZUA0OgogICAgaW50Y18xIC8vIDAKCnNldF9wb2xsX2Jvb2xfbWVyZ2VANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNTQtMTU4CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIGNob2ljZTEubGVuZ3RoIDw9IFVJbnQ2NCgxMTYpCiAgICAvLyAgICAgYW5kIGNob2ljZTIubGVuZ3RoIDw9IFVJbnQ2NCgxMTYpCiAgICAvLyAgICAgYW5kIGNob2ljZTMubGVuZ3RoIDw9IFVJbnQ2NCgxMTYpCiAgICAvLyApLCAiUG9sbCBjaG9pY2Ugc2l6ZSBjYW5ub3QgZXhjZWVkIDExNiBieXRlcyBvZiBkYXRhIHBlciBrZXktdmFsdWUuIgogICAgYXNzZXJ0IC8vIFBvbGwgY2hvaWNlIHNpemUgY2Fubm90IGV4Y2VlZCAxMTYgYnl0ZXMgb2YgZGF0YSBwZXIga2V5LXZhbHVlLgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE2OQogICAgLy8gc3RhcnRfZGF0ZV91bml4IDwgZW5kX2RhdGVfdW5peAogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIDwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxNjgtMTcwCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIHN0YXJ0X2RhdGVfdW5peCA8IGVuZF9kYXRlX3VuaXgKICAgIC8vICksICJTdGFydCBkYXRlIG11c3QgYmUgZWFybGllciB0aGFuIGVuZCBkYXRlLiIKICAgIGFzc2VydCAvLyBTdGFydCBkYXRlIG11c3QgYmUgZWFybGllciB0aGFuIGVuZCBkYXRlLgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE3Mi0xNzQKICAgIC8vIGFzc2VydCBlbmRfZGF0ZV91bml4ID49IHN0YXJ0X2RhdGVfdW5peCArIFVJbnQ2NCgKICAgIC8vICAgICAzICogMjQgKiA2MCAqIDYwCiAgICAvLyApLCAiRW5kIGRhdGUgbXVzdCBiZSBhdCBsZWFzdCAzIGRheXMgbGF0ZXIgdGhhbiB0aGUgc3RhcnQgZGF0ZS4iCiAgICBmcmFtZV9kaWcgLTIKICAgIHB1c2hpbnQgMjU5MjAwIC8vIDI1OTIwMAogICAgKwogICAgZnJhbWVfZGlnIC0xCiAgICA8PQogICAgYXNzZXJ0IC8vIEVuZCBkYXRlIG11c3QgYmUgYXQgbGVhc3QgMyBkYXlzIGxhdGVyIHRoYW4gdGhlIHN0YXJ0IGRhdGUuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTc2CiAgICAvLyBhc3NlcnQgZW5kX2RhdGVfdW5peCAtIHN0YXJ0X2RhdGVfdW5peCA8PSBVSW50NjQoCiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2RpZyAtMgogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE3Ni0xNzgKICAgIC8vIGFzc2VydCBlbmRfZGF0ZV91bml4IC0gc3RhcnRfZGF0ZV91bml4IDw9IFVJbnQ2NCgKICAgIC8vICAgICAxNCAqIDI0ICogNjAgKiA2MAogICAgLy8gKSwgIlZvdGluZyBwZXJpb2QgY2FuIG5vdCBleGNlZWQgMTQgZGF5cy4iCiAgICBwdXNoaW50IDEyMDk2MDAgLy8gMTIwOTYwMAogICAgPD0KICAgIGFzc2VydCAvLyBWb3RpbmcgcGVyaW9kIGNhbiBub3QgZXhjZWVkIDE0IGRheXMuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTgwCiAgICAvLyBhc3NlcnQgc2VsZi5wb2xsX2ZpbmFsaXplZCA9PSBVSW50NjQoMCksICJQb2xsIGNhbiBvbmx5IGJlIHNldHVwIG9uY2UuIgogICAgaW50Y18xIC8vIDAKICAgIGJ5dGVjXzIgLy8gInBvbGxfZmluYWxpemVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnBvbGxfZmluYWxpemVkIGV4aXN0cwogICAgIQogICAgYXNzZXJ0IC8vIFBvbGwgY2FuIG9ubHkgYmUgc2V0dXAgb25jZS4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxODItMTgzCiAgICAvLyAjIFVwZGF0ZSBnbG9iYWwgc3RhdGUga2V5cyB3aXRoIG5ldyB2YWx1ZXMKICAgIC8vIHNlbGYucG9sbF90aXRsZSA9IHRpdGxlCiAgICBwdXNoYnl0ZXMgInBvbGxfdGl0bGUiCiAgICBmcmFtZV9kaWcgLTYKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTg0CiAgICAvLyBzZWxmLnBvbGxfY2hvaWNlMSA9IGNob2ljZTEKICAgIHB1c2hieXRlcyAicG9sbF9jaG9pY2UxIgogICAgZnJhbWVfZGlnIC01CiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE4NQogICAgLy8gc2VsZi5wb2xsX2Nob2ljZTIgPSBjaG9pY2UyCiAgICBwdXNoYnl0ZXMgInBvbGxfY2hvaWNlMiIKICAgIGZyYW1lX2RpZyAtNAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxODYKICAgIC8vIHNlbGYucG9sbF9jaG9pY2UzID0gY2hvaWNlMwogICAgcHVzaGJ5dGVzICJwb2xsX2Nob2ljZTMiCiAgICBmcmFtZV9kaWcgLTMKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTg3CiAgICAvLyBzZWxmLnBvbGxfc3RhcnRfZGF0ZV91bml4ID0gc3RhcnRfZGF0ZV91bml4CiAgICBwdXNoYnl0ZXMgInBvbGxfc3RhcnRfZGF0ZV91bml4IgogICAgZnJhbWVfZGlnIC0yCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE4OAogICAgLy8gc2VsZi5wb2xsX2VuZF9kYXRlX3VuaXggPSBlbmRfZGF0ZV91bml4CiAgICBieXRlYyA3IC8vICJwb2xsX2VuZF9kYXRlX3VuaXgiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTkwLTE5MQogICAgLy8gIyBGaW5hbGl6ZSBwb2xsIChlbnN1cmVzIHBvbGwgY2FuIG9ubHkgYmUgc2V0IG9uY2UpCiAgICAvLyBzZWxmLnBvbGxfZmluYWxpemVkID0gVUludDY0KDEpCiAgICBieXRlY18yIC8vICJwb2xsX2ZpbmFsaXplZCIKICAgIGludGNfMCAvLyAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLm9wZW5fYmFsbG90LmNvbnRyYWN0Lk9wZW5CYWxsb3QuZnVuZF9hcHBfbWJyKG1icl9wYXk6IHVpbnQ2NCkgLT4gdm9pZDoKZnVuZF9hcHBfbWJyOgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE5My0xOTUKICAgIC8vICMgRW5hYmxlIGFwcGxpY2F0aW9uIGNyZWF0b3IgdG8gZnVuZCBBcHAgYWRkcmVzcyBhbmQgY292ZXJzIGl0cyBHbG9iYWwgbWluaW11bSBiYWxhbmNlIGFuZCBCb3ggc3RvcmFnZSBNQlIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGZ1bmRfYXBwX21icihzZWxmLCBtYnJfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbikgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjE5OAogICAgLy8gVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MTk2LTE5OQogICAgLy8gIyBNYWtlIG5lY2Vzc2FyeSBhc3NlcnRpb25zIHRvIHZlcmlmeSB0cmFuc2FjdGlvbiByZXF1aXJlbWVudHMKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICAvLyApLCAiVHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBjcmVhdG9yIGFkZHJlc3MuIgogICAgYXNzZXJ0IC8vIFRyYW5zYWN0aW9uIHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggYXBwbGljYXRpb24gY3JlYXRvciBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjIwMgogICAgLy8gVHhuLnNlbmRlciBub3QgaW4gc2VsZi5ib3hfYV92b3Rlcl9kYXRhCiAgICBieXRlY18wIC8vIDB4NjE1ZgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgICEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMDEtMjAzCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIFR4bi5zZW5kZXIgbm90IGluIHNlbGYuYm94X2Ffdm90ZXJfZGF0YQogICAgLy8gKSwgIlRyYW5zYWN0aW9uIHNlbmRlciBhZGRyZXNzIGFscmVhZHkgcHJlc2VudCBpbiBib3ggYV8uIgogICAgYXNzZXJ0IC8vIFRyYW5zYWN0aW9uIHNlbmRlciBhZGRyZXNzIGFscmVhZHkgcHJlc2VudCBpbiBib3ggYV8uCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjA2CiAgICAvLyBtYnJfcGF5LnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjIwNS0yMDcKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgbWJyX3BheS5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgLy8gKSwgIk1CUiBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3QgbWF0Y2ggYXBwcGxpY2F0aW9uIGNyZWF0b3IgYWRkcmVzcy4iCiAgICBhc3NlcnQgLy8gTUJSIHBheW1lbnQgc2VuZGVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBwbGljYXRpb24gY3JlYXRvciBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjIxMAogICAgLy8gbWJyX3BheS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMDktMjExCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIG1icl9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgLy8gKSwgIk1CUiBwYXltZW50IHJlY2lldmVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLiIKICAgIGFzc2VydCAvLyBNQlIgcGF5bWVudCByZWNpZXZlciBhZGRyZXNzIG11c3QgbWF0Y2ggYXBwbGljYXRpb24gYWRkcmVzcy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMTQKICAgIC8vIG1icl9wYXkuYW1vdW50CiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjIxNQogICAgLy8gPj0gc2VsZi5jYWxjX2JveF9zdG9yYWdlX21icigpICAjIEJveCBTdG9yYWdlIE1CUjogMC4wMTY5IEFMR08KICAgIGNhbGxzdWIgY2FsY19ib3hfc3RvcmFnZV9tYnIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMTQtMjE1CiAgICAvLyBtYnJfcGF5LmFtb3VudAogICAgLy8gPj0gc2VsZi5jYWxjX2JveF9zdG9yYWdlX21icigpICAjIEJveCBTdG9yYWdlIE1CUjogMC4wMTY5IEFMR08KICAgID49CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjEzLTIxNgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBtYnJfcGF5LmFtb3VudAogICAgLy8gICAgID49IHNlbGYuY2FsY19ib3hfc3RvcmFnZV9tYnIoKSAgIyBCb3ggU3RvcmFnZSBNQlI6IDAuMDE2OSBBTEdPCiAgICAvLyApLCAiTUJSIHBheW1lbnQgZm9yIGJveCBzdG9yYWdlIG11c3QgbWVldCB0aGUgbWluaW11bSByZXF1aXJlbWVudCBhbW91bnQuIgogICAgYXNzZXJ0IC8vIE1CUiBwYXltZW50IGZvciBib3ggc3RvcmFnZSBtdXN0IG1lZXQgdGhlIG1pbmltdW0gcmVxdWlyZW1lbnQgYW1vdW50LgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjIxOAogICAgLy8gYXNzZXJ0IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MuYmFsYW5jZSA+PSAoCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMTkKICAgIC8vIEdsb2JhbC5taW5fYmFsYW5jZSArIHNlbGYuY2FsY19ib3hfc3RvcmFnZV9tYnIoKQogICAgZ2xvYmFsIE1pbkJhbGFuY2UKICAgIGNhbGxzdWIgY2FsY19ib3hfc3RvcmFnZV9tYnIKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMTgtMjE5CiAgICAvLyBhc3NlcnQgR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcy5iYWxhbmNlID49ICgKICAgIC8vICAgICBHbG9iYWwubWluX2JhbGFuY2UgKyBzZWxmLmNhbGNfYm94X3N0b3JhZ2VfbWJyKCkKICAgID49CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjE4LTIyMAogICAgLy8gYXNzZXJ0IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MuYmFsYW5jZSA+PSAoCiAgICAvLyAgICAgR2xvYmFsLm1pbl9iYWxhbmNlICsgc2VsZi5jYWxjX2JveF9zdG9yYWdlX21icigpCiAgICAvLyApLCAiQXBwbGljYXRpb24gYWRkcmVzcyBiYWxhbmNlIG11c3QgYmUgZXF1YWwgb3IgZ3JlYXRlciB0aGFuIEdsb2JhbC5taW5fYmFsYW5jZSArIEJveCBzdG9yYWdlIGZlZS4iCiAgICBhc3NlcnQgLy8gQXBwbGljYXRpb24gYWRkcmVzcyBiYWxhbmNlIG11c3QgYmUgZXF1YWwgb3IgZ3JlYXRlciB0aGFuIEdsb2JhbC5taW5fYmFsYW5jZSArIEJveCBzdG9yYWdlIGZlZS4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMjMKICAgIC8vIEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wIDw9IHNlbGYucG9sbF9lbmRfZGF0ZV91bml4CiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWMgNyAvLyAicG9sbF9lbmRfZGF0ZV91bml4IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnBvbGxfZW5kX2RhdGVfdW5peCBleGlzdHMKICAgIDw9CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjIyLTIyNAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCA8PSBzZWxmLnBvbGxfZW5kX2RhdGVfdW5peAogICAgLy8gKSwgIlVuYWJsZSB0byBmdW5kIGFwcCBtYnIgaWYgdm90aW5nIHBlcmlvZCBpcyBvdmVyLiIKICAgIGFzc2VydCAvLyBVbmFibGUgdG8gZnVuZCBhcHAgbWJyIGlmIHZvdGluZyBwZXJpb2QgaXMgb3Zlci4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMjYtMjI4CiAgICAvLyAjIENoZWNrIGlmIHZvdGVyIGRhdGEgYm94IGRvZXNuJ3QgYWxyZWFkeSBleGlzdCwgaWYgbm90IChGYWxzZSkgdGhlbiBjcmVhdGUgbmV3IG9uZQogICAgLy8gIyBpZiBub3Qgc2VsZi5ib3hfYV92b3Rlcl9kYXRhLm1heWJlKFR4bi5zZW5kZXIpWzFdOiA8LSBUaGlzIHdvcmtzIHRvbyBpZiBjb3B5KCkgdXNlZAogICAgLy8gaWYgR2xvYmFsLmNyZWF0b3JfYWRkcmVzcyBub3QgaW4gc2VsZi5ib3hfYV92b3Rlcl9kYXRhOgogICAgYnl0ZWNfMCAvLyAweDYxNWYKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgY29uY2F0CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJueiBmdW5kX2FwcF9tYnJfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjI5CiAgICAvLyBzZWxmLmJveF9hX3ZvdGVyX2RhdGFbR2xvYmFsLmNyZWF0b3JfYWRkcmVzc10gPSBWb3RlckRhdGEoCiAgICBieXRlY18wIC8vIDB4NjE1ZgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyMjktMjMxCiAgICAvLyBzZWxmLmJveF9hX3ZvdGVyX2RhdGFbR2xvYmFsLmNyZWF0b3JfYWRkcmVzc10gPSBWb3RlckRhdGEoCiAgICAvLyAgICAgYXJjNC5VSW50OCgwKSwgYXJjNC5VSW50OCgwKQogICAgLy8gKQogICAgYnl0ZWMgOCAvLyAweDAwMDAKICAgIGJveF9wdXQKCmZ1bmRfYXBwX21icl9hZnRlcl9pZl9lbHNlQDI6CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5jYWxjX2JveF9zdG9yYWdlX21icigpIC0+IHVpbnQ2NDoKY2FsY19ib3hfc3RvcmFnZV9tYnI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6OTItOTQKICAgIC8vICMgQ2FsY3VsYXRlIHRoZSBCb3ggc3RvcmFnZSBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQgdG90YWwgY29zdCBmb3IgdGhlIHNtYXJ0IGNvbnRyYWN0CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIGNhbGNfYm94X3N0b3JhZ2VfbWJyKHNlbGYpIC0+IFVJbnQ2NDoKICAgIHByb3RvIDAgMQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5Ojk4CiAgICAvLyBhcmM0LlVJbnQ4KDM0KSwgYXJjNC5VSW50OCgyKQogICAgcHVzaGJ5dGVzcyAweDIyIDB4MDIgLy8gMHgyMiwgMHgwMgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5Ojk2LTk5CiAgICAvLyAjIENhbGN1bGF0ZSBCb3ggQSBmZWUKICAgIC8vIGJveF9hXyA9IHNlbGYuY2FsY19zaW5nbGVfYm94X2ZlZSgKICAgIC8vICAgICBhcmM0LlVJbnQ4KDM0KSwgYXJjNC5VSW50OCgyKQogICAgLy8gKSAgIyBmZWU6IDAuMDE2OSBBTEdPCiAgICBjYWxsc3ViIGNhbGNfc2luZ2xlX2JveF9mZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToxMDEtMTAyCiAgICAvLyAjIFJldHVybiB0aGUgbWluaW11bSBiYWxhbmNlIHJlcXVpcmVtZW50IHRvdGFsIGNvc3QKICAgIC8vIHJldHVybiBib3hfYV8KICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5vcGVuX2JhbGxvdC5jb250cmFjdC5PcGVuQmFsbG90LmNhbGNfc2luZ2xlX2JveF9mZWUoa2V5X3NpemU6IGJ5dGVzLCB2YWx1ZV9zaXplOiBieXRlcykgLT4gdWludDY0OgpjYWxjX3NpbmdsZV9ib3hfZmVlOgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5Ojc3LTgxCiAgICAvLyAjIENhbGN1bGF0ZSBib3ggZmVlIGZvciBzaW5nbGUgYm94IHVuaXQKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgY2FsY19zaW5nbGVfYm94X2ZlZSgKICAgIC8vICAgICBzZWxmLCBrZXlfc2l6ZTogYXJjNC5VSW50OCwgdmFsdWVfc2l6ZTogYXJjNC5VSW50OAogICAgLy8gKSAtPiBVSW50NjQ6CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo4NgogICAgLy8ga2V5X3NpemUubmF0aXZlICsgdmFsdWVfc2l6ZS5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6ODUKICAgIC8vIHNpemVfZmVlID0gYXJjNC5VSW50MTYoNDAwKS5uYXRpdmUgKiAoCiAgICBwdXNoaW50IDQwMCAvLyA0MDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo4NS04NwogICAgLy8gc2l6ZV9mZWUgPSBhcmM0LlVJbnQxNig0MDApLm5hdGl2ZSAqICgKICAgIC8vICAgICBrZXlfc2l6ZS5uYXRpdmUgKyB2YWx1ZV9zaXplLm5hdGl2ZQogICAgLy8gKSAgIyBTaXplIGZlZSAoNDAwIHBlciBieXRlICogKGxlbihrZXkpK2xlbih2YWx1ZSkpKQogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5Ojg5LTkwCiAgICAvLyAjIFJldHVybiBzaW5nbGUgYm94IGZlZQogICAgLy8gcmV0dXJuIGJhc2VfZmVlLm5hdGl2ZSArIHNpemVfZmVlCiAgICBwdXNoaW50IDI1MDAgLy8gMjUwMAogICAgKwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLm9wZW5fYmFsbG90LmNvbnRyYWN0Lk9wZW5CYWxsb3QucmVxdWVzdF9ib3hfc3RvcmFnZShtYnJfcGF5OiB1aW50NjQpIC0+IHZvaWQ6CnJlcXVlc3RfYm94X3N0b3JhZ2U6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjMzLTIzNQogICAgLy8gIyBFbmFibGUgYW55IGVsaWdpYmxlIGFjY291bnQgdG8gcmVxdWVzdCBib3ggc3RvcmFnZSBieSBwYXlpbmcgYSBNQlIgY29zdAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgcmVxdWVzdF9ib3hfc3RvcmFnZShzZWxmLCBtYnJfcGF5OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbikgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjIzOAogICAgLy8gVHhuLnNlbmRlciAhPSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgICE9CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjM2LTIzOQogICAgLy8gIyBNYWtlIG5lY2Vzc2FyeSBhc3NlcnRpb25zIHRvIHZlcmlmeSB0cmFuc2FjdGlvbiByZXF1aXJlbWVudHMKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgVHhuLnNlbmRlciAhPSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICAvLyApLCAiSW52YWxpZCBzZW5kZXIgYWRkcmVzcyEgQXBwbGljYXRpb24gY3JlYXRvciBhZGRyZXNzIGNhbiBub3QgdXNlIHJlcXVlc3QgYm94IHN0b3JhZ2UgbWV0aG9kLiIKICAgIGFzc2VydCAvLyBJbnZhbGlkIHNlbmRlciBhZGRyZXNzISBBcHBsaWNhdGlvbiBjcmVhdG9yIGFkZHJlc3MgY2FuIG5vdCB1c2UgcmVxdWVzdCBib3ggc3RvcmFnZSBtZXRob2QuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjQyCiAgICAvLyBUeG4uc2VuZGVyIG5vdCBpbiBzZWxmLmJveF9hX3ZvdGVyX2RhdGEKICAgIGJ5dGVjXzAgLy8gMHg2MTVmCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgIQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI0MS0yNDMKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgVHhuLnNlbmRlciBub3QgaW4gc2VsZi5ib3hfYV92b3Rlcl9kYXRhCiAgICAvLyApLCAiVHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MgbXVzdCBub3QgYmUgcHJlc2VudCBpbiBib3ggYV8uIgogICAgYXNzZXJ0IC8vIFRyYW5zYWN0aW9uIHNlbmRlciBhZGRyZXNzIG11c3Qgbm90IGJlIHByZXNlbnQgaW4gYm94IGFfLgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI0NgogICAgLy8gbWJyX3BheS5zZW5kZXIgbm90IGluIHNlbGYuYm94X2Ffdm90ZXJfZGF0YQogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTZW5kZXIKICAgIGJ5dGVjXzAgLy8gMHg2MTVmCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgIQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI0NS0yNDcKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgbWJyX3BheS5zZW5kZXIgbm90IGluIHNlbGYuYm94X2Ffdm90ZXJfZGF0YQogICAgLy8gKSwgIkJveCBzdG9yYWdlIE1CUiBwYXltZW50IHNlbmRlciBhZGRyZXNzIG11c3Qgbm90IGJlIHByZXNlbnQgaW4gYm94IGFfLiIKICAgIGFzc2VydCAvLyBCb3ggc3RvcmFnZSBNQlIgcGF5bWVudCBzZW5kZXIgYWRkcmVzcyBtdXN0IG5vdCBiZSBwcmVzZW50IGluIGJveCBhXy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyNTAKICAgIC8vIG1icl9wYXkucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjQ5LTI1MQogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBtYnJfcGF5LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksICJCb3ggc3RvcmFnZSBNQlIgcGF5bWVudCByZWNpZXZlciBhZGRyZXNzIG11c3QgbWF0Y2ggYXBwbGljYXRpb24gYWRkcmVzcy4iCiAgICBhc3NlcnQgLy8gQm94IHN0b3JhZ2UgTUJSIHBheW1lbnQgcmVjaWV2ZXIgYWRkcmVzcyBtdXN0IG1hdGNoIGFwcGxpY2F0aW9uIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjU0CiAgICAvLyBtYnJfcGF5LmFtb3VudCA+PSBzZWxmLmNhbGNfYm94X3N0b3JhZ2VfbWJyKCkgICMgQm94IGFfIGZlZTogMC4wMTY5IEFMR08KICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQW1vdW50CiAgICBjYWxsc3ViIGNhbGNfYm94X3N0b3JhZ2VfbWJyCiAgICA+PQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI1My0yNTUKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgbWJyX3BheS5hbW91bnQgPj0gc2VsZi5jYWxjX2JveF9zdG9yYWdlX21icigpICAjIEJveCBhXyBmZWU6IDAuMDE2OSBBTEdPCiAgICAvLyApLCAiQm94IHN0b3JhZ2UgTUJSIHBheW1lbnQgYW1vdW50IG11c3QgYmUgZXF1YWwgb3IgZ3JlYXRlciB0aGFuIGJveCBfYSBmZWUuIgogICAgYXNzZXJ0IC8vIEJveCBzdG9yYWdlIE1CUiBwYXltZW50IGFtb3VudCBtdXN0IGJlIGVxdWFsIG9yIGdyZWF0ZXIgdGhhbiBib3ggX2EgZmVlLgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI1OAogICAgLy8gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgPD0gc2VsZi5wb2xsX2VuZF9kYXRlX3VuaXgKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGludGNfMSAvLyAwCiAgICBieXRlYyA3IC8vICJwb2xsX2VuZF9kYXRlX3VuaXgiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucG9sbF9lbmRfZGF0ZV91bml4IGV4aXN0cwogICAgPD0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyNTctMjU5CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wIDw9IHNlbGYucG9sbF9lbmRfZGF0ZV91bml4CiAgICAvLyApLCAiVW5hYmxlIHRvIHJlcXVlc3QgYm94IHN0b3JhZ2UgaWYgdm90aW5nIHBlcmlvZCBpcyBvdmVyLiIKICAgIGFzc2VydCAvLyBVbmFibGUgdG8gcmVxdWVzdCBib3ggc3RvcmFnZSBpZiB2b3RpbmcgcGVyaW9kIGlzIG92ZXIuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjYxLTI2MwogICAgLy8gIyBDaGVjayBpZiB2b3RlciBkYXRhIGJveCBkb2Vzbid0IGFscmVhZHkgZXhpc3QsIGlmIG5vdCAoRmFsc2UpIHRoZW4gY3JlYXRlIG5ldyBvbmUKICAgIC8vICMgaWYgbm90IHNlbGYuYm94X2Ffdm90ZXJfZGF0YS5tYXliZShUeG4uc2VuZGVyKVsxXTogPC0gVGhpcyB3b3JrcyB0b28gaWYgY29weSgpIHVzZWQKICAgIC8vIGlmIFR4bi5zZW5kZXIgbm90IGluIHNlbGYuYm94X2Ffdm90ZXJfZGF0YToKICAgIGJ5dGVjXzAgLy8gMHg2MTVmCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IHJlcXVlc3RfYm94X3N0b3JhZ2VfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjY0CiAgICAvLyBzZWxmLmJveF9hX3ZvdGVyX2RhdGFbVHhuLnNlbmRlcl0gPSBWb3RlckRhdGEoYXJjNC5VSW50OCgwKSwgYXJjNC5VSW50OCgwKSkKICAgIGJ5dGVjXzAgLy8gMHg2MTVmCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJ5dGVjIDggLy8gMHgwMDAwCiAgICBib3hfcHV0CgpyZXF1ZXN0X2JveF9zdG9yYWdlX2FmdGVyX2lmX2Vsc2VAMjoKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5vcGVuX2JhbGxvdC5jb250cmFjdC5PcGVuQmFsbG90LnN1Ym1pdF92b3RlKGNob2ljZTogYnl0ZXMpIC0+IHZvaWQ6CnN1Ym1pdF92b3RlOgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI2Ni0yNjgKICAgIC8vICMgRW5hYmxlIGFueSBlbGlnaWJsZSBhY2NvdW50IHRvIHN1Ym1pdCBhIHZvdGUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHN1Ym1pdF92b3RlKHNlbGYsIGNob2ljZTogYXJjNC5VSW50OCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI3MQogICAgLy8gVHhuLnNlbmRlciBpbiBzZWxmLmJveF9hX3ZvdGVyX2RhdGEKICAgIGJ5dGVjXzAgLy8gMHg2MTVmCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI2OS0yNzIKICAgIC8vICMgTWFrZSBuZWNlc3NhcnkgYXNzZXJ0aW9ucyB0byB2ZXJpZnkgdHJhbnNhY3Rpb24gcmVxdWlyZW1lbnRzCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIFR4bi5zZW5kZXIgaW4gc2VsZi5ib3hfYV92b3Rlcl9kYXRhCiAgICAvLyApLCAiVHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MgbXVzdCBiZSBwcmVzZW50IGluIGJveCBhXy4iCiAgICBhc3NlcnQgLy8gVHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MgbXVzdCBiZSBwcmVzZW50IGluIGJveCBhXy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyNzUKICAgIC8vIHNlbGYuYm94X2Ffdm90ZXJfZGF0YVtUeG4uc2VuZGVyXS52b3RlZCwKICAgIGJ5dGVjXzAgLy8gMHg2MTVmCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9hX3ZvdGVyX2RhdGEgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDAgMSAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyNzgKICAgIC8vIGFyYzQuVUludDgoMCksCiAgICBwdXNoYnl0ZXMgMHgwMAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI3NC0yODAKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc2VsZi5ib3hfYV92b3Rlcl9kYXRhW1R4bi5zZW5kZXJdLnZvdGVkLAogICAgLy8gICAgIHNlbGYuYm94X2Ffdm90ZXJfZGF0YVtUeG4uc2VuZGVyXS5jaG9pY2UsCiAgICAvLyApID09ICgKICAgIC8vICAgICBhcmM0LlVJbnQ4KDApLAogICAgLy8gICAgIGFyYzQuVUludDgoMCksCiAgICAvLyApLCAiVHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MgYWxyZWFkeSBzdWJtaXR0ZWQgYSB2b3RlLiIKICAgIGI9PQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI3NgogICAgLy8gc2VsZi5ib3hfYV92b3Rlcl9kYXRhW1R4bi5zZW5kZXJdLmNob2ljZSwKICAgIGJ5dGVjXzAgLy8gMHg2MTVmCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJveF9hX3ZvdGVyX2RhdGEgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDEgMSAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyNzkKICAgIC8vIGFyYzQuVUludDgoMCksCiAgICBwdXNoYnl0ZXMgMHgwMAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjI3NC0yODAKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc2VsZi5ib3hfYV92b3Rlcl9kYXRhW1R4bi5zZW5kZXJdLnZvdGVkLAogICAgLy8gICAgIHNlbGYuYm94X2Ffdm90ZXJfZGF0YVtUeG4uc2VuZGVyXS5jaG9pY2UsCiAgICAvLyApID09ICgKICAgIC8vICAgICBhcmM0LlVJbnQ4KDApLAogICAgLy8gICAgIGFyYzQuVUludDgoMCksCiAgICAvLyApLCAiVHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MgYWxyZWFkeSBzdWJtaXR0ZWQgYSB2b3RlLiIKICAgIGI9PQogICAgJiYKICAgIGFzc2VydCAvLyBUcmFuc2FjdGlvbiBzZW5kZXIgYWRkcmVzcyBhbHJlYWR5IHN1Ym1pdHRlZCBhIHZvdGUuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjgzCiAgICAvLyBjaG9pY2UgPT0gYXJjNC5VSW50OCgxKQogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoYnl0ZXMgMHgwMQogICAgYj09CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjgzLTI4NQogICAgLy8gY2hvaWNlID09IGFyYzQuVUludDgoMSkKICAgIC8vIG9yIGNob2ljZSA9PSBhcmM0LlVJbnQ4KDIpCiAgICAvLyBvciBjaG9pY2UgPT0gYXJjNC5VSW50OCgzKQogICAgYm56IHN1Ym1pdF92b3RlX2Jvb2xfdHJ1ZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6Mjg0CiAgICAvLyBvciBjaG9pY2UgPT0gYXJjNC5VSW50OCgyKQogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoYnl0ZXMgMHgwMgogICAgYj09CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjgzLTI4NQogICAgLy8gY2hvaWNlID09IGFyYzQuVUludDgoMSkKICAgIC8vIG9yIGNob2ljZSA9PSBhcmM0LlVJbnQ4KDIpCiAgICAvLyBvciBjaG9pY2UgPT0gYXJjNC5VSW50OCgzKQogICAgYm56IHN1Ym1pdF92b3RlX2Jvb2xfdHJ1ZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6Mjg1CiAgICAvLyBvciBjaG9pY2UgPT0gYXJjNC5VSW50OCgzKQogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoYnl0ZXMgMHgwMwogICAgYj09CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MjgzLTI4NQogICAgLy8gY2hvaWNlID09IGFyYzQuVUludDgoMSkKICAgIC8vIG9yIGNob2ljZSA9PSBhcmM0LlVJbnQ4KDIpCiAgICAvLyBvciBjaG9pY2UgPT0gYXJjNC5VSW50OCgzKQogICAgYnogc3VibWl0X3ZvdGVfYm9vbF9mYWxzZUA0CgpzdWJtaXRfdm90ZV9ib29sX3RydWVAMzoKICAgIGludGNfMCAvLyAxCiAgICBiIHN1Ym1pdF92b3RlX2Jvb2xfbWVyZ2VANQoKc3VibWl0X3ZvdGVfYm9vbF9mYWxzZUA0OgogICAgaW50Y18xIC8vIDAKCnN1Ym1pdF92b3RlX2Jvb2xfbWVyZ2VANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weToyODItMjg2CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIGNob2ljZSA9PSBhcmM0LlVJbnQ4KDEpCiAgICAvLyAgICAgb3IgY2hvaWNlID09IGFyYzQuVUludDgoMikKICAgIC8vICAgICBvciBjaG9pY2UgPT0gYXJjNC5VSW50OCgzKQogICAgLy8gKSwgIkludmFsaWQgY2hvaWNlLiBDYW4gb25seSBzZWxlY3QgY2hvaWNlcyAxLCAyLCAzLiIKICAgIGFzc2VydCAvLyBJbnZhbGlkIGNob2ljZS4gQ2FuIG9ubHkgc2VsZWN0IGNob2ljZXMgMSwgMiwgMy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozMDctMzA4CiAgICAvLyAjIFNldCBhY2NvdW50IHZvdGVyIGRhdGEKICAgIC8vIHNlbGYuYm94X2Ffdm90ZXJfZGF0YVtUeG4uc2VuZGVyXSA9IFZvdGVyRGF0YShhcmM0LlVJbnQ4KDEpLCBjaG9pY2UpCiAgICBwdXNoYnl0ZXMgMHgwMQogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGJ5dGVjXzAgLy8gMHg2MTVmCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozMTAtMzExCiAgICAvLyAjIFVwZGF0ZSB2b3RlIHRhbGx5CiAgICAvLyBpZiBjaG9pY2UgPT0gVUludDY0KDEpOgogICAgaW50Y18wIC8vIDEKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAtMQogICAgYj09CiAgICBieiBzdWJtaXRfdm90ZV9lbHNlX2JvZHlANwogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjMxMgogICAgLy8gc2VsZi50b3RhbF9jaG9pY2UxICs9IFVJbnQ2NCgxKQogICAgaW50Y18xIC8vIDAKICAgIGJ5dGVjXzMgLy8gInRvdGFsX2Nob2ljZTEiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudG90YWxfY2hvaWNlMSBleGlzdHMKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBieXRlY18zIC8vICJ0b3RhbF9jaG9pY2UxIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIGIgc3VibWl0X3ZvdGVfYWZ0ZXJfaWZfZWxzZUAxMQoKc3VibWl0X3ZvdGVfZWxzZV9ib2R5QDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzEzCiAgICAvLyBlbGlmIGNob2ljZSA9PSBVSW50NjQoMik6CiAgICBwdXNoaW50IDIgLy8gMgogICAgaXRvYgogICAgZnJhbWVfZGlnIC0xCiAgICBiPT0KICAgIGJ6IHN1Ym1pdF92b3RlX2Vsc2VfYm9keUA5CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzE0CiAgICAvLyBzZWxmLnRvdGFsX2Nob2ljZTIgKz0gVUludDY0KDEpCiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWMgNCAvLyAidG90YWxfY2hvaWNlMiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbF9jaG9pY2UyIGV4aXN0cwogICAgaW50Y18wIC8vIDEKICAgICsKICAgIGJ5dGVjIDQgLy8gInRvdGFsX2Nob2ljZTIiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgYiBzdWJtaXRfdm90ZV9hZnRlcl9pZl9lbHNlQDExCgpzdWJtaXRfdm90ZV9lbHNlX2JvZHlAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozMTYKICAgIC8vIHNlbGYudG90YWxfY2hvaWNlMyArPSBVSW50NjQoMSkKICAgIGludGNfMSAvLyAwCiAgICBieXRlYyA1IC8vICJ0b3RhbF9jaG9pY2UzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRvdGFsX2Nob2ljZTMgZXhpc3RzCiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgYnl0ZWMgNSAvLyAidG90YWxfY2hvaWNlMyIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CgpzdWJtaXRfdm90ZV9hZnRlcl9pZl9lbHNlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjMxOC0zMTkKICAgIC8vICMgSW5jcmVtZW50IGNvdW50IGZvciB0b3RhbCB2b3RlcwogICAgLy8gc2VsZi50b3RhbF92b3RlcyArPSBVSW50NjQoMSkKICAgIGludGNfMSAvLyAwCiAgICBieXRlYyA2IC8vICJ0b3RhbF92b3RlcyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbF92b3RlcyBleGlzdHMKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBieXRlYyA2IC8vICJ0b3RhbF92b3RlcyIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5kZWxldGVfYm94X3N0b3JhZ2UoKSAtPiB2b2lkOgpkZWxldGVfYm94X3N0b3JhZ2U6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzIxLTMyMwogICAgLy8gIyBFbmFibGUgYW55IGVsaWdibGUgYWNjb3VudCB0byBkZWxldGUgdGhlaXIgYm94IHN0b3JhZ2UgYW5kIGdldCB0aGVpciBNQlIgcGF5bWVudCByZWZ1bmRlZAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgZGVsZXRlX2JveF9zdG9yYWdlKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozMjYKICAgIC8vIFR4bi5zZW5kZXIgIT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICAhPQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjMyNC0zMjcKICAgIC8vICMgTWFrZSBuZWNlc3NhcnkgYXNzZXJ0aW9ucyB0byB2ZXJpZnkgdHJhbnNhY3Rpb24gcmVxdWlyZW1lbnRzCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIFR4bi5zZW5kZXIgIT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgLy8gKSwgIkludmFsaWQgc2VuZGVyIGFkZHJlc3MhIEFwcGxpY2F0aW9uIGNyZWF0b3IgbXVzdCBkZWxldGUgc21hcnQgY29udHJhY3QgdG8gZnJlZSB1cCB0aGVpciBib3ggc3RvcmFnZSBNQlIuIgogICAgYXNzZXJ0IC8vIEludmFsaWQgc2VuZGVyIGFkZHJlc3MhIEFwcGxpY2F0aW9uIGNyZWF0b3IgbXVzdCBkZWxldGUgc21hcnQgY29udHJhY3QgdG8gZnJlZSB1cCB0aGVpciBib3ggc3RvcmFnZSBNQlIuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzMwCiAgICAvLyBUeG4uc2VuZGVyIGluIHNlbGYuYm94X2Ffdm90ZXJfZGF0YQogICAgYnl0ZWNfMCAvLyAweDYxNWYKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzI5LTMzMQogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBUeG4uc2VuZGVyIGluIHNlbGYuYm94X2Ffdm90ZXJfZGF0YQogICAgLy8gKSwgIlRyYW5zYWN0aW9uIHNlbmRlciBhZGRyZXNzIG11c3QgYmUgcHJlc2VudCBpbiBib3ggYV8uIgogICAgYXNzZXJ0IC8vIFRyYW5zYWN0aW9uIHNlbmRlciBhZGRyZXNzIG11c3QgYmUgcHJlc2VudCBpbiBib3ggYV8uCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzM4LTMzOQogICAgLy8gIyBEZWxldGUgYm94IGtleSAoYWRkcmVzcykgZnJvbSBib3ggc3RvcmFnZSBhbmQgZGVjcmVtZW50IGJveCAnYV8nIHRvdGFsIGFtb3VudAogICAgLy8gZGVsIHNlbGYuYm94X2Ffdm90ZXJfZGF0YVtUeG4uc2VuZGVyXQogICAgYnl0ZWNfMCAvLyAweDYxNWYKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzQzLTM0OQogICAgLy8gYm94X3N0b3JhZ2VfZGVsX3JlZnVuZF9pdHhuID0gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHNlbmRlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIHJlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYW1vdW50PXNlbGYuY2FsY19ib3hfc3RvcmFnZV9tYnIoKSAtIG1pbl90eG5fZmVlLAogICAgLy8gICAgIGZlZT1taW5fdHhuX2ZlZSwKICAgIC8vICAgICBub3RlPSJBY2NvdW50IGdldHMgYXBwIGJveCBzdG9yYWdlIE1CUiAoMC4wMTY5IEFMR08pIHJlZnVuZGVkLiIsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzQ0CiAgICAvLyBzZW5kZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzQ1CiAgICAvLyByZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjM0NgogICAgLy8gYW1vdW50PXNlbGYuY2FsY19ib3hfc3RvcmFnZV9tYnIoKSAtIG1pbl90eG5fZmVlLAogICAgY2FsbHN1YiBjYWxjX2JveF9zdG9yYWdlX21icgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjM0MS0zNDIKICAgIC8vICMgU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uICh0cmFuc2FjdGlvbiBzZW5kZXIgZ2V0cyB0aGVpciBCb3ggc3RvcmFnZSBNQlIgcmVmdW5kZWQpCiAgICAvLyBtaW5fdHhuX2ZlZSA9IGFyYzQuVUludDE2KDEwMDApLm5hdGl2ZQogICAgaW50Y18yIC8vIDEwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozNDYKICAgIC8vIGFtb3VudD1zZWxmLmNhbGNfYm94X3N0b3JhZ2VfbWJyKCkgLSBtaW5fdHhuX2ZlZSwKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozNDgKICAgIC8vIG5vdGU9IkFjY291bnQgZ2V0cyBhcHAgYm94IHN0b3JhZ2UgTUJSICgwLjAxNjkgQUxHTykgcmVmdW5kZWQuIiwKICAgIHB1c2hieXRlcyAiQWNjb3VudCBnZXRzIGFwcCBib3ggc3RvcmFnZSBNQlIgKDAuMDE2OSBBTEdPKSByZWZ1bmRlZC4iCiAgICBpdHhuX2ZpZWxkIE5vdGUKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjM0MwogICAgLy8gYm94X3N0b3JhZ2VfZGVsX3JlZnVuZF9pdHhuID0gaXR4bi5QYXltZW50KAogICAgaW50Y18wIC8vIHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjM0MS0zNDIKICAgIC8vICMgU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uICh0cmFuc2FjdGlvbiBzZW5kZXIgZ2V0cyB0aGVpciBCb3ggc3RvcmFnZSBNQlIgcmVmdW5kZWQpCiAgICAvLyBtaW5fdHhuX2ZlZSA9IGFyYzQuVUludDE2KDEwMDApLm5hdGl2ZQogICAgaW50Y18yIC8vIDEwMDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzQzLTM0OQogICAgLy8gYm94X3N0b3JhZ2VfZGVsX3JlZnVuZF9pdHhuID0gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHNlbmRlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIHJlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYW1vdW50PXNlbGYuY2FsY19ib3hfc3RvcmFnZV9tYnIoKSAtIG1pbl90eG5fZmVlLAogICAgLy8gICAgIGZlZT1taW5fdHhuX2ZlZSwKICAgIC8vICAgICBub3RlPSJBY2NvdW50IGdldHMgYXBwIGJveCBzdG9yYWdlIE1CUiAoMC4wMTY5IEFMR08pIHJlZnVuZGVkLiIsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBSZWNlaXZlcgogICAgaXR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozNTIKICAgIC8vIGJveF9zdG9yYWdlX2RlbF9yZWZ1bmRfaXR4bi5zZW5kZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzUxLTM1MwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfc3RvcmFnZV9kZWxfcmVmdW5kX2l0eG4uc2VuZGVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksICJib3hfc3RvcmFnZV9kZWxfcmVmdW5kX2l0eG4gc2VuZGVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLiIKICAgIGFzc2VydCAvLyBib3hfc3RvcmFnZV9kZWxfcmVmdW5kX2l0eG4gc2VuZGVyIGFkZHJlc3MgbXVzdCBtYXRjaCBhcHBsaWNhdGlvbiBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjM1NgogICAgLy8gYm94X3N0b3JhZ2VfZGVsX3JlZnVuZF9pdHhuLnJlY2VpdmVyID09IFR4bi5zZW5kZXIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzU1LTM1NwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfc3RvcmFnZV9kZWxfcmVmdW5kX2l0eG4ucmVjZWl2ZXIgPT0gVHhuLnNlbmRlcgogICAgLy8gKSwgImJveF9zdG9yYWdlX2RlbF9yZWZ1bmRfaXR4biByZWNpZXZlciBhZGRyZXNzIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MuIgogICAgYXNzZXJ0IC8vIGJveF9zdG9yYWdlX2RlbF9yZWZ1bmRfaXR4biByZWNpZXZlciBhZGRyZXNzIG11c3QgbWF0Y2ggdHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MuCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5wdXJnZV9ib3hfc3RvcmFnZShib3hfa2V5czogYnl0ZXMpIC0+IHZvaWQ6CnB1cmdlX2JveF9zdG9yYWdlOgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjM1OS0zNjEKICAgIC8vICMgRW5hYmxlIGFwcGxpY2F0aW9uIGNyZWF0b3IgdG8gZXhlY3V0ZSBib3ggc3RvcmFnZSBwdXJnZSwgdGhpcyBkZWxldGVzIGFueSBib3hlcyBub3QgZGVsZXRlZCBieSBvdGhlciBhY2NvdW50cwogICAgLy8gQGFyYzQuYWJpbWV0aG9kICAjIE5PVEU6IENhbiBhbHNvIHVzZSBhcmM0LlN0YXRpY0FycmF5W2FyYzQuQWRkcmVzcywgdC5MaXRlcmFsWzhdXSB0byBlbmZvcmNlIHN0cmljdCBzaXplIG9mIDgKICAgIC8vIGRlZiBwdXJnZV9ib3hfc3RvcmFnZShzZWxmLCBib3hfa2V5czogYXJjNC5EeW5hbWljQXJyYXlbYXJjNC5BZGRyZXNzXSkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgcHVzaGJ5dGVzICIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzY0CiAgICAvLyBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozNjItMzY1CiAgICAvLyAjIE1ha2UgbmVjZXNzYXJ5IGFzc2VydGlvbnMgdG8gdmVyaWZ5IHRyYW5zYWN0aW9uIHJlcXVpcmVtZW50cwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIC8vICksICJVbmF1dGhvcml6ZWQgYWRkcmVzcyEgT25seSBhcHBsaWNhdGlvbiBjcmVhdG9yIGNhbiBwdXJnZSBib3ggc3RvcmFnZS4iCiAgICBhc3NlcnQgLy8gVW5hdXRob3JpemVkIGFkZHJlc3MhIE9ubHkgYXBwbGljYXRpb24gY3JlYXRvciBjYW4gcHVyZ2UgYm94IHN0b3JhZ2UuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzcyCiAgICAvLyBib3hfa2V5cy5sZW5ndGggPiAwIGFuZCBib3hfa2V5cy5sZW5ndGggPCA5CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZHVwCiAgICBieiBwdXJnZV9ib3hfc3RvcmFnZV9ib29sX2ZhbHNlQDMKICAgIGZyYW1lX2RpZyAxCiAgICBwdXNoaW50IDkgLy8gOQogICAgPAogICAgYnogcHVyZ2VfYm94X3N0b3JhZ2VfYm9vbF9mYWxzZUAzCiAgICBpbnRjXzAgLy8gMQogICAgYiBwdXJnZV9ib3hfc3RvcmFnZV9ib29sX21lcmdlQDQKCnB1cmdlX2JveF9zdG9yYWdlX2Jvb2xfZmFsc2VAMzoKICAgIGludGNfMSAvLyAwCgpwdXJnZV9ib3hfc3RvcmFnZV9ib29sX21lcmdlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzcxLTM3MwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfa2V5cy5sZW5ndGggPiAwIGFuZCBib3hfa2V5cy5sZW5ndGggPCA5CiAgICAvLyApLCAiVGhlIG51bWJlciBvZiBhZGRyZXNzZXMgcmVwcmVzZW50ZWQgYnkgYm94IGtleXMgYXJyYXkgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCBhbmQgbGVzc2VyIHRoYW4gOS4iCiAgICBhc3NlcnQgLy8gVGhlIG51bWJlciBvZiBhZGRyZXNzZXMgcmVwcmVzZW50ZWQgYnkgYm94IGtleXMgYXJyYXkgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCBhbmQgbGVzc2VyIHRoYW4gOS4KICAgIGludGNfMSAvLyAwCiAgICBmcmFtZV9idXJ5IDAKCnB1cmdlX2JveF9zdG9yYWdlX2Zvcl9oZWFkZXJANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozNzUtMzc2CiAgICAvLyAjIEl0ZXJhdGUgdGhyb3VnaCB0aGUgZHluYW1pYyBhcnJheSBvZiBhZGRyZXNzZXMgcmVwcmVzZW50aW5nIHRoZSBib3gga2V5CiAgICAvLyBmb3IgYm94X2tleSBpbiBib3hfa2V5czoKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgMQogICAgPAogICAgYnogcHVyZ2VfYm94X3N0b3JhZ2VfYWZ0ZXJfZm9yQDgKICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAyIDAKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgICoKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjM3OQogICAgLy8gYm94X2tleS5uYXRpdmUgaW4gc2VsZi5ib3hfYV92b3Rlcl9kYXRhCiAgICBieXRlY18wIC8vIDB4NjE1ZgogICAgZGlnIDEKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozNzctMzgwCiAgICAvLyAjIE1ha2UgbmVjZXNzYXJ5IGFzc2VydGlvbnMgdG8gdmVyaWZ5IHRyYW5zYWN0aW9uIHJlcXVpcmVtZW50cwogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfa2V5Lm5hdGl2ZSBpbiBzZWxmLmJveF9hX3ZvdGVyX2RhdGEKICAgIC8vICksICJBY2NvdW50IGFkZHJlc3MgcmVwcmVzZW50ZWQgaW4gYm94IGtleSBtdXN0IGJlIHByZXNlbnQgaW4gYm94IGFfLiIKICAgIGFzc2VydCAvLyBBY2NvdW50IGFkZHJlc3MgcmVwcmVzZW50ZWQgaW4gYm94IGtleSBtdXN0IGJlIHByZXNlbnQgaW4gYm94IGFfLgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjM4MwogICAgLy8gYm94X2tleS5uYXRpdmUgIT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICB1bmNvdmVyIDIKICAgICE9CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzgyLTM4NAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBib3hfa2V5Lm5hdGl2ZSAhPSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICAvLyApLCAiQWNjb3VudCBhZGRyZXNzIHJlcHJlc2VudGVkIGluIGJveCBrZXkgbXVzdCBub3QgbWF0Y2ggYXBwbGljYXRpb24gY3JlYXRvciBhZGRyZXNzLiIKICAgIGFzc2VydCAvLyBBY2NvdW50IGFkZHJlc3MgcmVwcmVzZW50ZWQgaW4gYm94IGtleSBtdXN0IG5vdCBtYXRjaCBhcHBsaWNhdGlvbiBjcmVhdG9yIGFkZHJlc3MuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6Mzg2LTM4OAogICAgLy8gZGVsIHNlbGYuYm94X2Ffdm90ZXJfZGF0YVsKICAgIC8vICAgICBib3hfa2V5Lm5hdGl2ZQogICAgLy8gXSAgIyBEZWxldGUgYm94IGtleSAoYWRkcmVzcykgZnJvbSBib3ggc3RvcmFnZQogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6Mzg5CiAgICAvLyBzZWxmLnRvdGFsX3B1cmdlZF9ib3hfYV8gKz0gVUludDY0KAogICAgaW50Y18xIC8vIDAKICAgIGJ5dGVjXzEgLy8gInRvdGFsX3B1cmdlZF9ib3hfYV8iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudG90YWxfcHVyZ2VkX2JveF9hXyBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozODktMzkxCiAgICAvLyBzZWxmLnRvdGFsX3B1cmdlZF9ib3hfYV8gKz0gVUludDY0KAogICAgLy8gICAgIDEKICAgIC8vICkgICMgSW5jcmVtZW50IGJveCAnYV8nIHB1cmdlZCB0b3RhbCBhbW91bnQKICAgIGludGNfMCAvLyAxCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6Mzg5CiAgICAvLyBzZWxmLnRvdGFsX3B1cmdlZF9ib3hfYV8gKz0gVUludDY0KAogICAgYnl0ZWNfMSAvLyAidG90YWxfcHVyZ2VkX2JveF9hXyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTozODktMzkxCiAgICAvLyBzZWxmLnRvdGFsX3B1cmdlZF9ib3hfYV8gKz0gVUludDY0KAogICAgLy8gICAgIDEKICAgIC8vICkgICMgSW5jcmVtZW50IGJveCAnYV8nIHB1cmdlZCB0b3RhbCBhbW91bnQKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAwCiAgICBiIHB1cmdlX2JveF9zdG9yYWdlX2Zvcl9oZWFkZXJANQoKcHVyZ2VfYm94X3N0b3JhZ2VfYWZ0ZXJfZm9yQDg6CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC50ZXJtaW5hdGUoKSAtPiB2b2lkOgp0ZXJtaW5hdGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6MzkzLTM5NQogICAgLy8gIyBBbGxvdyBhcHBsaWNhdGlvbiBjcmVhdG9yIHRvIGRlbGV0ZSB0aGUgc21hcnQgY29udHJhY3QgY2xpZW50LCBkZWNyZWFzZSB0aGVpciBNQlIgYmFsYW5jZSArIGFueSByZW1haW5pbmcgYm94IE1CUgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGNyZWF0ZT0iZGlzYWxsb3ciLCBhbGxvd19hY3Rpb25zPVsiRGVsZXRlQXBwbGljYXRpb24iXSkKICAgIC8vIGRlZiB0ZXJtaW5hdGUoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgaW50Y18xIC8vIDAKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjM5Ni0zOTkKICAgIC8vICMgTWFrZSBuZWNlc3NhcnkgYXNzZXJ0aW9ucyB0byB2ZXJpZnkgdHJhbnNhY3Rpb24gcmVxdWlyZW1lbnRzCiAgICAvLyBhc3NlcnQgVGVtcGxhdGVWYXJbVUludDY0XSgKICAgIC8vICAgICAiREVMRVRBQkxFIgogICAgLy8gKSwgIlRlbXBsYXRlIHZhcmlhYmxlICdERUxFVEFCTEUnIG5lZWRzIHRvIGJlICdUcnVlJyBhdCBkZXBsb3ktdGltZS4iCiAgICBpbnRjIDUgLy8gVE1QTF9ERUxFVEFCTEUKICAgIGFzc2VydCAvLyBUZW1wbGF0ZSB2YXJpYWJsZSAnREVMRVRBQkxFJyBuZWVkcyB0byBiZSAnVHJ1ZScgYXQgZGVwbG95LXRpbWUuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NDAyCiAgICAvLyBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0MDEtNDAzCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgLy8gKSwgIlVuYXV0aG9yaXplZCBhZGRyZXNzISBPbmx5IGFwcGxpY2F0aW9uIGNyZWF0b3IgY2FuIGRlbGV0ZSB0aGUgc21hcnQgY29udHJhY3QuIgogICAgYXNzZXJ0IC8vIFVuYXV0aG9yaXplZCBhZGRyZXNzISBPbmx5IGFwcGxpY2F0aW9uIGNyZWF0b3IgY2FuIGRlbGV0ZSB0aGUgc21hcnQgY29udHJhY3QuCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NDA2CiAgICAvLyBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzIGluIHNlbGYuYm94X2Ffdm90ZXJfZGF0YQogICAgYnl0ZWNfMCAvLyAweDYxNWYKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgY29uY2F0CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0MDUtNDA3CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MgaW4gc2VsZi5ib3hfYV92b3Rlcl9kYXRhCiAgICAvLyApLCAiVHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MgbXVzdCBiZSBwcmVzZW50IGluIGJveCBhXy4iCiAgICBhc3NlcnQgLy8gVHJhbnNhY3Rpb24gc2VuZGVyIGFkZHJlc3MgbXVzdCBiZSBwcmVzZW50IGluIGJveCBhXy4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0MTMKICAgIC8vIGRlbCBzZWxmLmJveF9hX3ZvdGVyX2RhdGFbCiAgICBieXRlY18wIC8vIDB4NjE1ZgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjQxNAogICAgLy8gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NDEzLTQxNQogICAgLy8gZGVsIHNlbGYuYm94X2Ffdm90ZXJfZGF0YVsKICAgIC8vICAgICBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICAvLyBdICAjIERlbGV0ZSBib3gga2V5IChjcmVhdG9yIGFkZHJlc3MpIGZyb20gYm94IHN0b3JhZ2UKICAgIGNvbmNhdAogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NDE5CiAgICAvLyBpZiBzZWxmLnRvdGFsX3B1cmdlZF9ib3hfYV8gPiBVSW50NjQoMCk6CiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWNfMSAvLyAidG90YWxfcHVyZ2VkX2JveF9hXyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbF9wdXJnZWRfYm94X2FfIGV4aXN0cwogICAgYnogdGVybWluYXRlX2Vsc2VfYm9keUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NDIwLTQzMgogICAgLy8gIyBFeGVjdXRlIGlubmVyIHRyYW5zYWN0aW9uIHBheW1lbnQgd2l0aCBwdXJnZSByZWZ1bmQgYW5kIGNsb3NlIHJlbWFpbmRlcgogICAgLy8gZGVsX2FwcF9yZWZ1bmRfaXR4biA9IGl0eG4uUGF5bWVudCgKICAgIC8vICAgICBzZW5kZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICByZWNlaXZlcj1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgLy8gICAgIGFtb3VudD0oCiAgICAvLyAgICAgICAgIHNlbGYudG90YWxfcHVyZ2VkX2JveF9hXyAqIHNlbGYuY2FsY19ib3hfc3RvcmFnZV9tYnIoKSAtIG1pbl90eG5fZmVlCiAgICAvLyAgICAgKSwKICAgIC8vICAgICBmZWU9bWluX3R4bl9mZWUsCiAgICAvLyAgICAgY2xvc2VfcmVtYWluZGVyX3RvPUdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsCiAgICAvLyAgICAgbm90ZT0oCiAgICAvLyAgICAgICAgICJDbG9zZWQgcmVtYWluZGVyIG9mIGFwcCBiYWxhbmNlICsgcHVyZ2VkIGJveCBzdG9yYWdlIGFtb3VudCB0byBDcmVhdG9yIGFmdGVyIGRlbGV0aW9uIG1ldGhvZC4iCiAgICAvLyAgICAgKSwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0MjIKICAgIC8vIHNlbmRlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0MjMKICAgIC8vIHJlY2VpdmVyPUdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0MjUKICAgIC8vIHNlbGYudG90YWxfcHVyZ2VkX2JveF9hXyAqIHNlbGYuY2FsY19ib3hfc3RvcmFnZV9tYnIoKSAtIG1pbl90eG5fZmVlCiAgICBpbnRjXzEgLy8gMAogICAgYnl0ZWNfMSAvLyAidG90YWxfcHVyZ2VkX2JveF9hXyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50b3RhbF9wdXJnZWRfYm94X2FfIGV4aXN0cwogICAgY2FsbHN1YiBjYWxjX2JveF9zdG9yYWdlX21icgogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjQxNy00MTgKICAgIC8vICMgRGVmaW5lIGZpbmFsIGNsb3NpbmcgYXBwIGJhbGFuY2UgcmVmdW5kIHRyYW5zYWN0aW9uCiAgICAvLyBtaW5fdHhuX2ZlZSA9IGFyYzQuVUludDE2KDEwMDApLm5hdGl2ZSAgIyBNaW5pbXVtIGFjY2VwdGFibGUgZmVlIGZvciB0cmFuc2FjdGlvbgogICAgaW50Y18yIC8vIDEwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0MjUKICAgIC8vIHNlbGYudG90YWxfcHVyZ2VkX2JveF9hXyAqIHNlbGYuY2FsY19ib3hfc3RvcmFnZV9tYnIoKSAtIG1pbl90eG5fZmVlCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NDI4CiAgICAvLyBjbG9zZV9yZW1haW5kZXJfdG89R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjQzMAogICAgLy8gIkNsb3NlZCByZW1haW5kZXIgb2YgYXBwIGJhbGFuY2UgKyBwdXJnZWQgYm94IHN0b3JhZ2UgYW1vdW50IHRvIENyZWF0b3IgYWZ0ZXIgZGVsZXRpb24gbWV0aG9kLiIKICAgIHB1c2hieXRlcyAiQ2xvc2VkIHJlbWFpbmRlciBvZiBhcHAgYmFsYW5jZSArIHB1cmdlZCBib3ggc3RvcmFnZSBhbW91bnQgdG8gQ3JlYXRvciBhZnRlciBkZWxldGlvbiBtZXRob2QuIgogICAgaXR4bl9maWVsZCBOb3RlCiAgICBpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjQyMC00MjEKICAgIC8vICMgRXhlY3V0ZSBpbm5lciB0cmFuc2FjdGlvbiBwYXltZW50IHdpdGggcHVyZ2UgcmVmdW5kIGFuZCBjbG9zZSByZW1haW5kZXIKICAgIC8vIGRlbF9hcHBfcmVmdW5kX2l0eG4gPSBpdHhuLlBheW1lbnQoCiAgICBpbnRjXzAgLy8gcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NDE3LTQxOAogICAgLy8gIyBEZWZpbmUgZmluYWwgY2xvc2luZyBhcHAgYmFsYW5jZSByZWZ1bmQgdHJhbnNhY3Rpb24KICAgIC8vIG1pbl90eG5fZmVlID0gYXJjNC5VSW50MTYoMTAwMCkubmF0aXZlICAjIE1pbmltdW0gYWNjZXB0YWJsZSBmZWUgZm9yIHRyYW5zYWN0aW9uCiAgICBpbnRjXzIgLy8gMTAwMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0MjAtNDMyCiAgICAvLyAjIEV4ZWN1dGUgaW5uZXIgdHJhbnNhY3Rpb24gcGF5bWVudCB3aXRoIHB1cmdlIHJlZnVuZCBhbmQgY2xvc2UgcmVtYWluZGVyCiAgICAvLyBkZWxfYXBwX3JlZnVuZF9pdHhuID0gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHNlbmRlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIHJlY2VpdmVyPUdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsCiAgICAvLyAgICAgYW1vdW50PSgKICAgIC8vICAgICAgICAgc2VsZi50b3RhbF9wdXJnZWRfYm94X2FfICogc2VsZi5jYWxjX2JveF9zdG9yYWdlX21icigpIC0gbWluX3R4bl9mZWUKICAgIC8vICAgICApLAogICAgLy8gICAgIGZlZT1taW5fdHhuX2ZlZSwKICAgIC8vICAgICBjbG9zZV9yZW1haW5kZXJfdG89R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIC8vICAgICBub3RlPSgKICAgIC8vICAgICAgICAgIkNsb3NlZCByZW1haW5kZXIgb2YgYXBwIGJhbGFuY2UgKyBwdXJnZWQgYm94IHN0b3JhZ2UgYW1vdW50IHRvIENyZWF0b3IgYWZ0ZXIgZGVsZXRpb24gbWV0aG9kLiIKICAgIC8vICAgICApLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gU2VuZGVyCiAgICBpdHhuIFJlY2VpdmVyCiAgICBmcmFtZV9idXJ5IDEKICAgIGl0eG4gQ2xvc2VSZW1haW5kZXJUbwogICAgZnJhbWVfYnVyeSAwCiAgICBiIHRlcm1pbmF0ZV9hZnRlcl9pZl9lbHNlQDUKCnRlcm1pbmF0ZV9lbHNlX2JvZHlAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0MzQtNDQyCiAgICAvLyAjIEV4ZWN1dGUgaW5uZXIgdHJhbnNhY3Rpb24gdGhhdCBvbmx5IGNsb3NlcyBhcHAgcmVtYWluZGVyIGJhbGFuY2UgdG8gdGhlIGNyZWF0b3IKICAgIC8vIGRlbF9hcHBfcmVmdW5kX2l0eG4gPSBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgc2VuZGVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgcmVjZWl2ZXI9R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIC8vICAgICBhbW91bnQ9VUludDY0KDApLCAgIyBTZW5kIHplcm8gYW1vdW50CiAgICAvLyAgICAgZmVlPW1pbl90eG5fZmVlLAogICAgLy8gICAgIGNsb3NlX3JlbWFpbmRlcl90bz1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgLy8gICAgIG5vdGU9IkNsb3NpbmcgcmVtYWluZGVyIG9mIGFwcCBiYWxhbmNlIHRvIENyZWF0b3IgYWZ0ZXIgZGVsZXRpb24gbWV0aG9kLiIsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NDM2CiAgICAvLyBzZW5kZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NDM3CiAgICAvLyByZWNlaXZlcj1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NDQwCiAgICAvLyBjbG9zZV9yZW1haW5kZXJfdG89R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjQ0MQogICAgLy8gbm90ZT0iQ2xvc2luZyByZW1haW5kZXIgb2YgYXBwIGJhbGFuY2UgdG8gQ3JlYXRvciBhZnRlciBkZWxldGlvbiBtZXRob2QuIiwKICAgIHB1c2hieXRlcyAiQ2xvc2luZyByZW1haW5kZXIgb2YgYXBwIGJhbGFuY2UgdG8gQ3JlYXRvciBhZnRlciBkZWxldGlvbiBtZXRob2QuIgogICAgaXR4bl9maWVsZCBOb3RlCiAgICBpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0MzgKICAgIC8vIGFtb3VudD1VSW50NjQoMCksICAjIFNlbmQgemVybyBhbW91bnQKICAgIGludGNfMSAvLyAwCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgaXR4bl9maWVsZCBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0MzQtNDM1CiAgICAvLyAjIEV4ZWN1dGUgaW5uZXIgdHJhbnNhY3Rpb24gdGhhdCBvbmx5IGNsb3NlcyBhcHAgcmVtYWluZGVyIGJhbGFuY2UgdG8gdGhlIGNyZWF0b3IKICAgIC8vIGRlbF9hcHBfcmVmdW5kX2l0eG4gPSBpdHhuLlBheW1lbnQoCiAgICBpbnRjXzAgLy8gcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NDE3LTQxOAogICAgLy8gIyBEZWZpbmUgZmluYWwgY2xvc2luZyBhcHAgYmFsYW5jZSByZWZ1bmQgdHJhbnNhY3Rpb24KICAgIC8vIG1pbl90eG5fZmVlID0gYXJjNC5VSW50MTYoMTAwMCkubmF0aXZlICAjIE1pbmltdW0gYWNjZXB0YWJsZSBmZWUgZm9yIHRyYW5zYWN0aW9uCiAgICBpbnRjXzIgLy8gMTAwMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0MzQtNDQyCiAgICAvLyAjIEV4ZWN1dGUgaW5uZXIgdHJhbnNhY3Rpb24gdGhhdCBvbmx5IGNsb3NlcyBhcHAgcmVtYWluZGVyIGJhbGFuY2UgdG8gdGhlIGNyZWF0b3IKICAgIC8vIGRlbF9hcHBfcmVmdW5kX2l0eG4gPSBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgc2VuZGVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgcmVjZWl2ZXI9R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIC8vICAgICBhbW91bnQ9VUludDY0KDApLCAgIyBTZW5kIHplcm8gYW1vdW50CiAgICAvLyAgICAgZmVlPW1pbl90eG5fZmVlLAogICAgLy8gICAgIGNsb3NlX3JlbWFpbmRlcl90bz1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgLy8gICAgIG5vdGU9IkNsb3NpbmcgcmVtYWluZGVyIG9mIGFwcCBiYWxhbmNlIHRvIENyZWF0b3IgYWZ0ZXIgZGVsZXRpb24gbWV0aG9kLiIsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBTZW5kZXIKICAgIGl0eG4gUmVjZWl2ZXIKICAgIGZyYW1lX2J1cnkgMQogICAgaXR4biBDbG9zZVJlbWFpbmRlclRvCiAgICBmcmFtZV9idXJ5IDAKCnRlcm1pbmF0ZV9hZnRlcl9pZl9lbHNlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NDQ1CiAgICAvLyBkZWxfYXBwX3JlZnVuZF9pdHhuLnNlbmRlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0NDQtNDQ2CiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIGRlbF9hcHBfcmVmdW5kX2l0eG4uc2VuZGVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksICJkZWxfYXBwX3JlZnVuZF9pdHhuICdzZW5kZXInIGFkZHJlc3MgbXVzdCBtYXRjaCBBcHBsaWNhdGlvbiBhZGRyZXNzLiIKICAgIGFzc2VydCAvLyBkZWxfYXBwX3JlZnVuZF9pdHhuICdzZW5kZXInIGFkZHJlc3MgbXVzdCBtYXRjaCBBcHBsaWNhdGlvbiBhZGRyZXNzLgogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjQ0OQogICAgLy8gZGVsX2FwcF9yZWZ1bmRfaXR4bi5yZWNlaXZlcgogICAgZnJhbWVfZGlnIDEKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0NDktNDUwCiAgICAvLyBkZWxfYXBwX3JlZnVuZF9pdHhuLnJlY2VpdmVyCiAgICAvLyBhbmQgZGVsX2FwcF9yZWZ1bmRfaXR4bi5jbG9zZV9yZW1haW5kZXJfdG8gPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgYnogdGVybWluYXRlX2Jvb2xfZmFsc2VAOAogICAgLy8gc21hcnRfY29udHJhY3RzL29wZW5fYmFsbG90L2NvbnRyYWN0LnB5OjQ1MAogICAgLy8gYW5kIGRlbF9hcHBfcmVmdW5kX2l0eG4uY2xvc2VfcmVtYWluZGVyX3RvID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAwCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Blbl9iYWxsb3QvY29udHJhY3QucHk6NDQ5LTQ1MAogICAgLy8gZGVsX2FwcF9yZWZ1bmRfaXR4bi5yZWNlaXZlcgogICAgLy8gYW5kIGRlbF9hcHBfcmVmdW5kX2l0eG4uY2xvc2VfcmVtYWluZGVyX3RvID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIGJ6IHRlcm1pbmF0ZV9ib29sX2ZhbHNlQDgKICAgIGludGNfMCAvLyAxCiAgICBiIHRlcm1pbmF0ZV9ib29sX21lcmdlQDkKCnRlcm1pbmF0ZV9ib29sX2ZhbHNlQDg6CiAgICBpbnRjXzEgLy8gMAoKdGVybWluYXRlX2Jvb2xfbWVyZ2VAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGVuX2JhbGxvdC9jb250cmFjdC5weTo0NDgtNDUxCiAgICAvLyBhc3NlcnQgKAogICAgLy8gICAgIGRlbF9hcHBfcmVmdW5kX2l0eG4ucmVjZWl2ZXIKICAgIC8vICAgICBhbmQgZGVsX2FwcF9yZWZ1bmRfaXR4bi5jbG9zZV9yZW1haW5kZXJfdG8gPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgLy8gKSwgImRlbF9hcHBfcmVmdW5kX2l0eG4gJ3JlY2lldmVyJyBhbmQgJ2Nsb3NlX3JlbWFpbmRlcl90bycgYWRkcmVzcyBtdXN0IG1hdGNoIGFwcGxpY2F0aW9uIENyZWF0b3IgYWRkcmVzcy4iCiAgICBhc3NlcnQgLy8gZGVsX2FwcF9yZWZ1bmRfaXR4biAncmVjaWV2ZXInIGFuZCAnY2xvc2VfcmVtYWluZGVyX3RvJyBhZGRyZXNzIG11c3QgbWF0Y2ggYXBwbGljYXRpb24gQ3JlYXRvciBhZGRyZXNzLgogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 4,
            "num_uints": 8
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "poll_choice1": {
                    "type": "bytes",
                    "key": "poll_choice1"
                },
                "poll_choice2": {
                    "type": "bytes",
                    "key": "poll_choice2"
                },
                "poll_choice3": {
                    "type": "bytes",
                    "key": "poll_choice3"
                },
                "poll_end_date_unix": {
                    "type": "uint64",
                    "key": "poll_end_date_unix"
                },
                "poll_finalized": {
                    "type": "uint64",
                    "key": "poll_finalized"
                },
                "poll_start_date_unix": {
                    "type": "uint64",
                    "key": "poll_start_date_unix"
                },
                "poll_title": {
                    "type": "bytes",
                    "key": "poll_title"
                },
                "total_choice1": {
                    "type": "uint64",
                    "key": "total_choice1"
                },
                "total_choice2": {
                    "type": "uint64",
                    "key": "total_choice2"
                },
                "total_choice3": {
                    "type": "uint64",
                    "key": "total_choice3"
                },
                "total_purged_box_a_": {
                    "type": "uint64",
                    "key": "total_purged_box_a_"
                },
                "total_votes": {
                    "type": "uint64",
                    "key": "total_votes"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "OpenBallot",
        "methods": [
            {
                "name": "generate",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_version_unix",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "set_poll",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "title"
                    },
                    {
                        "type": "byte[]",
                        "name": "choice1"
                    },
                    {
                        "type": "byte[]",
                        "name": "choice2"
                    },
                    {
                        "type": "byte[]",
                        "name": "choice3"
                    },
                    {
                        "type": "uint64",
                        "name": "start_date_unix"
                    },
                    {
                        "type": "uint64",
                        "name": "end_date_unix"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "fund_app_mbr",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "request_box_storage",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "submit_vote",
                "args": [
                    {
                        "type": "uint8",
                        "name": "choice"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delete_box_storage",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "purge_box_storage",
                "args": [
                    {
                        "type": "address[]",
                        "name": "box_keys"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "terminate",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}