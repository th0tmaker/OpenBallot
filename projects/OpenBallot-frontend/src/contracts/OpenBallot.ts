/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"OpenBallot","structs":{},"methods":[{"name":"generate","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"global_storage_mbr","args":[{"name":"mbr_pay","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"local_storage_mbr","args":[{"name":"account","type":"account"},{"name":"mbr_pay","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["OptIn"]}},{"name":"opt_out","args":[{"name":"account","type":"account"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["CloseOut"]}},{"name":"set_vote_dates","args":[{"name":"vote_start_date_str","type":"string"},{"name":"vote_start_date_unix","type":"uint64"},{"name":"vote_end_date_str","type":"string"},{"name":"vote_end_date_unix","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"submit_vote","args":[{"name":"account","type":"account"},{"name":"choice","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"terminate","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}}],"state":{"schema":{"global":{"ints":8,"bytes":0},"local":{"ints":2,"bytes":0}},"keys":{"global":{"choice1_vote_count":{"key":"Y2hvaWNlMV92b3RlX2NvdW50","keyType":"AVMString","valueType":"AVMUint64"},"choice2_vote_count":{"key":"Y2hvaWNlMl92b3RlX2NvdW50","keyType":"AVMString","valueType":"AVMUint64"},"choice3_vote_count":{"key":"Y2hvaWNlM192b3RlX2NvdW50","keyType":"AVMString","valueType":"AVMUint64"},"total_accounts_opted_in":{"key":"dG90YWxfYWNjb3VudHNfb3B0ZWRfaW4=","keyType":"AVMString","valueType":"AVMUint64"},"total_vote_count":{"key":"dG90YWxfdm90ZV9jb3VudA==","keyType":"AVMString","valueType":"AVMUint64"},"vote_dates_final":{"key":"dm90ZV9kYXRlc19maW5hbA==","keyType":"AVMString","valueType":"AVMUint64"},"vote_end_date_unix":{"key":"dm90ZV9lbmRfZGF0ZV91bml4","keyType":"AVMString","valueType":"AVMUint64"},"vote_start_date_unix":{"key":"dm90ZV9zdGFydF9kYXRlX3VuaXg=","keyType":"AVMString","valueType":"AVMUint64"}},"local":{"local_vote_choice":{"key":"dm90ZV9jaG9pY2U=","keyType":"AVMString","valueType":"AVMUint64","desc":"Account vote choice (based on UInt64 corresponding w/ choice)"},"local_vote_status":{"key":"dm90ZV9zdGF0dXM=","keyType":"AVMString","valueType":"AVMUint64","desc":"Account vote status ('0' = not voted, '1' = voted)"}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMub3Blbl9iYWxsb3QuY29udHJhY3QuT3BlbkJhbGxvdC5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the OpenBallot contract
 */
export type OpenBallotArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'generate()void': Record<string, never>
    'global_storage_mbr(pay)void': {
      mbrPay: AppMethodCallTransactionArgument
    }
    'local_storage_mbr(account,pay)void': {
      account: Uint8Array | string
      mbrPay: AppMethodCallTransactionArgument
    }
    'opt_out(account)void': {
      account: Uint8Array | string
    }
    'set_vote_dates(string,uint64,string,uint64)void': {
      voteStartDateStr: string
      voteStartDateUnix: bigint | number
      voteEndDateStr: string
      voteEndDateUnix: bigint | number
    }
    'submit_vote(account,uint64)void': {
      account: Uint8Array | string
      choice: bigint | number
    }
    'terminate()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'generate()void': []
    'global_storage_mbr(pay)void': [mbrPay: AppMethodCallTransactionArgument]
    'local_storage_mbr(account,pay)void': [account: Uint8Array | string, mbrPay: AppMethodCallTransactionArgument]
    'opt_out(account)void': [account: Uint8Array | string]
    'set_vote_dates(string,uint64,string,uint64)void': [voteStartDateStr: string, voteStartDateUnix: bigint | number, voteEndDateStr: string, voteEndDateUnix: bigint | number]
    'submit_vote(account,uint64)void': [account: Uint8Array | string, choice: bigint | number]
    'terminate()void': []
  }
}

/**
 * The return type for each method
 */
export type OpenBallotReturns = {
  'generate()void': void
  'global_storage_mbr(pay)void': void
  'local_storage_mbr(account,pay)void': void
  'opt_out(account)void': void
  'set_vote_dates(string,uint64,string,uint64)void': void
  'submit_vote(account,uint64)void': void
  'terminate()void': void
}

/**
 * Defines the types of available calls and state of the OpenBallot smart contract.
 */
export type OpenBallotTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'generate()void' | 'generate', {
      argsObj: OpenBallotArgs['obj']['generate()void']
      argsTuple: OpenBallotArgs['tuple']['generate()void']
      returns: OpenBallotReturns['generate()void']
    }>
    & Record<'global_storage_mbr(pay)void' | 'global_storage_mbr', {
      argsObj: OpenBallotArgs['obj']['global_storage_mbr(pay)void']
      argsTuple: OpenBallotArgs['tuple']['global_storage_mbr(pay)void']
      returns: OpenBallotReturns['global_storage_mbr(pay)void']
    }>
    & Record<'local_storage_mbr(account,pay)void' | 'local_storage_mbr', {
      argsObj: OpenBallotArgs['obj']['local_storage_mbr(account,pay)void']
      argsTuple: OpenBallotArgs['tuple']['local_storage_mbr(account,pay)void']
      returns: OpenBallotReturns['local_storage_mbr(account,pay)void']
    }>
    & Record<'opt_out(account)void' | 'opt_out', {
      argsObj: OpenBallotArgs['obj']['opt_out(account)void']
      argsTuple: OpenBallotArgs['tuple']['opt_out(account)void']
      returns: OpenBallotReturns['opt_out(account)void']
    }>
    & Record<'set_vote_dates(string,uint64,string,uint64)void' | 'set_vote_dates', {
      argsObj: OpenBallotArgs['obj']['set_vote_dates(string,uint64,string,uint64)void']
      argsTuple: OpenBallotArgs['tuple']['set_vote_dates(string,uint64,string,uint64)void']
      returns: OpenBallotReturns['set_vote_dates(string,uint64,string,uint64)void']
    }>
    & Record<'submit_vote(account,uint64)void' | 'submit_vote', {
      argsObj: OpenBallotArgs['obj']['submit_vote(account,uint64)void']
      argsTuple: OpenBallotArgs['tuple']['submit_vote(account,uint64)void']
      returns: OpenBallotReturns['submit_vote(account,uint64)void']
    }>
    & Record<'terminate()void' | 'terminate', {
      argsObj: OpenBallotArgs['obj']['terminate()void']
      argsTuple: OpenBallotArgs['tuple']['terminate()void']
      returns: OpenBallotReturns['terminate()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        choice1VoteCount: bigint
        choice2VoteCount: bigint
        choice3VoteCount: bigint
        totalAccountsOptedIn: bigint
        totalVoteCount: bigint
        voteDatesFinal: bigint
        voteEndDateUnix: bigint
        voteStartDateUnix: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        /**
         * Account vote choice (based on UInt64 corresponding w/ choice)
         */
        localVoteChoice: bigint
        /**
         * Account vote status ('0' = not voted, '1' = voted)
         */
        localVoteStatus: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type OpenBallotSignatures = keyof OpenBallotTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OpenBallotNonVoidMethodSignatures = keyof OpenBallotTypes['methods'] extends infer T ? T extends keyof OpenBallotTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the OpenBallot smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OpenBallotSignatures> = OpenBallotTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the OpenBallot smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OpenBallotSignatures> = OpenBallotTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OpenBallotTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = OpenBallotTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type OpenBallotCreateCallParams =
  | Expand<CallParams<OpenBallotArgs['obj']['generate()void'] | OpenBallotArgs['tuple']['generate()void']> & {method: 'generate'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<OpenBallotArgs['obj']['generate()void'] | OpenBallotArgs['tuple']['generate()void']> & {method: 'generate()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type OpenBallotDeleteCallParams =
  | Expand<CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']> & {method: 'terminate'}>
  | Expand<CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']> & {method: 'terminate()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type OpenBallotDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: OpenBallotCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: OpenBallotDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the OpenBallot smart contract
 */
export abstract class OpenBallotParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends OpenBallotCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'generate':
          case 'generate()void':
            return OpenBallotParamsFactory.create.generate(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the OpenBallot smart contract using the generate()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      generate(params: CallParams<OpenBallotArgs['obj']['generate()void'] | OpenBallotArgs['tuple']['generate()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'generate()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends OpenBallotDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'terminate':
          case 'terminate()void':
            return OpenBallotParamsFactory.delete.terminate(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the OpenBallot smart contract using the terminate()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      terminate(params: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'terminate()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the OpenBallot smart contract using the local_storage_mbr(account,pay)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      localStorageMbr(params: CallParams<OpenBallotArgs['obj']['local_storage_mbr(account,pay)void'] | OpenBallotArgs['tuple']['local_storage_mbr(account,pay)void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'local_storage_mbr(account,pay)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.account, params.args.mbrPay],
        }
      },
    }
  }

  /**
   * Gets available closeOut ABI call param factories
   */
  static get closeOut() {
    return {
      /**
       * Constructs close out ABI call params for the OpenBallot smart contract using the opt_out(account)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optOut(params: CallParams<OpenBallotArgs['obj']['opt_out(account)void'] | OpenBallotArgs['tuple']['opt_out(account)void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'opt_out(account)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.account],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the global_storage_mbr(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static globalStorageMbr(params: CallParams<OpenBallotArgs['obj']['global_storage_mbr(pay)void'] | OpenBallotArgs['tuple']['global_storage_mbr(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'global_storage_mbr(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the set_vote_dates(string,uint64,string,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setVoteDates(params: CallParams<OpenBallotArgs['obj']['set_vote_dates(string,uint64,string,uint64)void'] | OpenBallotArgs['tuple']['set_vote_dates(string,uint64,string,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_vote_dates(string,uint64,string,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voteStartDateStr, params.args.voteStartDateUnix, params.args.voteEndDateStr, params.args.voteEndDateUnix],
    }
  }
  /**
   * Constructs a no op call for the submit_vote(account,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitVote(params: CallParams<OpenBallotArgs['obj']['submit_vote(account,uint64)void'] | OpenBallotArgs['tuple']['submit_vote(account,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submit_vote(account,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account, params.args.choice],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the OpenBallot smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class OpenBallotFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `OpenBallotFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new OpenBallotClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new OpenBallotClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the OpenBallot smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: OpenBallotDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? OpenBallotParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (OpenBallotCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? OpenBallotParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (OpenBallotDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new OpenBallotClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OpenBallot smart contract using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      generate: (params: CallParams<OpenBallotArgs['obj']['generate()void'] | OpenBallotArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(OpenBallotParamsFactory.create.generate(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the OpenBallot smart contract using the terminate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      terminate: (params: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(OpenBallotParamsFactory.delete.terminate(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OpenBallot smart contract using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      generate: (params: CallParams<OpenBallotArgs['obj']['generate()void'] | OpenBallotArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(OpenBallotParamsFactory.create.generate(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OpenBallot smart contract using an ABI method call using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      generate: async (params: CallParams<OpenBallotArgs['obj']['generate()void'] | OpenBallotArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(OpenBallotParamsFactory.create.generate(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | OpenBallotReturns['generate()void']) }, appClient: new OpenBallotClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the OpenBallot smart contract
 */
export class OpenBallotClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `OpenBallotClient`
   *
   * @param appClient An `AppClient` instance which has been created with the OpenBallot app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `OpenBallotClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends OpenBallotNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `OpenBallotClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OpenBallotClient> {
    return new OpenBallotClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `OpenBallotClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<OpenBallotClient> {
    return new OpenBallotClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OpenBallot smart contract using the `terminate()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      terminate: (params: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']> = {args: []}) => {
        return this.appClient.params.delete(OpenBallotParamsFactory.delete.terminate(params))
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the OpenBallot smart contract using the `local_storage_mbr(account,pay)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      localStorageMbr: (params: CallParams<OpenBallotArgs['obj']['local_storage_mbr(account,pay)void'] | OpenBallotArgs['tuple']['local_storage_mbr(account,pay)void']>) => {
        return this.appClient.params.optIn(OpenBallotParamsFactory.optIn.localStorageMbr(params))
      },

    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the OpenBallot smart contract using the `opt_out(account)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut params
       */
      optOut: (params: CallParams<OpenBallotArgs['obj']['opt_out(account)void'] | OpenBallotArgs['tuple']['opt_out(account)void']>) => {
        return this.appClient.params.closeOut(OpenBallotParamsFactory.closeOut.optOut(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OpenBallot smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `global_storage_mbr(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    globalStorageMbr: (params: CallParams<OpenBallotArgs['obj']['global_storage_mbr(pay)void'] | OpenBallotArgs['tuple']['global_storage_mbr(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OpenBallotParamsFactory.globalStorageMbr(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `set_vote_dates(string,uint64,string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setVoteDates: (params: CallParams<OpenBallotArgs['obj']['set_vote_dates(string,uint64,string,uint64)void'] | OpenBallotArgs['tuple']['set_vote_dates(string,uint64,string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OpenBallotParamsFactory.setVoteDates(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `submit_vote(account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitVote: (params: CallParams<OpenBallotArgs['obj']['submit_vote(account,uint64)void'] | OpenBallotArgs['tuple']['submit_vote(account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OpenBallotParamsFactory.submitVote(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OpenBallot smart contract using the `terminate()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      terminate: (params: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(OpenBallotParamsFactory.delete.terminate(params))
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the OpenBallot smart contract using the `local_storage_mbr(account,pay)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      localStorageMbr: (params: CallParams<OpenBallotArgs['obj']['local_storage_mbr(account,pay)void'] | OpenBallotArgs['tuple']['local_storage_mbr(account,pay)void']>) => {
        return this.appClient.createTransaction.optIn(OpenBallotParamsFactory.optIn.localStorageMbr(params))
      },

    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the OpenBallot smart contract using the `opt_out(account)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut transaction
       */
      optOut: (params: CallParams<OpenBallotArgs['obj']['opt_out(account)void'] | OpenBallotArgs['tuple']['opt_out(account)void']>) => {
        return this.appClient.createTransaction.closeOut(OpenBallotParamsFactory.closeOut.optOut(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OpenBallot smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `global_storage_mbr(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    globalStorageMbr: (params: CallParams<OpenBallotArgs['obj']['global_storage_mbr(pay)void'] | OpenBallotArgs['tuple']['global_storage_mbr(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OpenBallotParamsFactory.globalStorageMbr(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `set_vote_dates(string,uint64,string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setVoteDates: (params: CallParams<OpenBallotArgs['obj']['set_vote_dates(string,uint64,string,uint64)void'] | OpenBallotArgs['tuple']['set_vote_dates(string,uint64,string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OpenBallotParamsFactory.setVoteDates(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `submit_vote(account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitVote: (params: CallParams<OpenBallotArgs['obj']['submit_vote(account,uint64)void'] | OpenBallotArgs['tuple']['submit_vote(account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OpenBallotParamsFactory.submitVote(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OpenBallot smart contract using the `terminate()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      terminate: async (params: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(OpenBallotParamsFactory.delete.terminate(params))
        return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['terminate()void'])}
      },

    },

    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the OpenBallot smart contract using the `local_storage_mbr(account,pay)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      localStorageMbr: async (params: CallParams<OpenBallotArgs['obj']['local_storage_mbr(account,pay)void'] | OpenBallotArgs['tuple']['local_storage_mbr(account,pay)void']> & SendParams) => {
        const result = await this.appClient.send.optIn(OpenBallotParamsFactory.optIn.localStorageMbr(params))
        return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['local_storage_mbr(account,pay)void'])}
      },

    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the OpenBallot smart contract using the `opt_out(account)void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut result
       */
      optOut: async (params: CallParams<OpenBallotArgs['obj']['opt_out(account)void'] | OpenBallotArgs['tuple']['opt_out(account)void']> & SendParams) => {
        const result = await this.appClient.send.closeOut(OpenBallotParamsFactory.closeOut.optOut(params))
        return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['opt_out(account)void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OpenBallot smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `global_storage_mbr(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    globalStorageMbr: async (params: CallParams<OpenBallotArgs['obj']['global_storage_mbr(pay)void'] | OpenBallotArgs['tuple']['global_storage_mbr(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OpenBallotParamsFactory.globalStorageMbr(params))
      return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['global_storage_mbr(pay)void'])}
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `set_vote_dates(string,uint64,string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setVoteDates: async (params: CallParams<OpenBallotArgs['obj']['set_vote_dates(string,uint64,string,uint64)void'] | OpenBallotArgs['tuple']['set_vote_dates(string,uint64,string,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OpenBallotParamsFactory.setVoteDates(params))
      return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['set_vote_dates(string,uint64,string,uint64)void'])}
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `submit_vote(account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitVote: async (params: CallParams<OpenBallotArgs['obj']['submit_vote(account,uint64)void'] | OpenBallotArgs['tuple']['submit_vote(account,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OpenBallotParamsFactory.submitVote(params))
      return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['submit_vote(account,uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new OpenBallotClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current OpenBallot app
   */
  state = {
    /**
     * Methods to access global state for the current OpenBallot app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          choice1VoteCount: result.choice1_vote_count,
          choice2VoteCount: result.choice2_vote_count,
          choice3VoteCount: result.choice3_vote_count,
          totalAccountsOptedIn: result.total_accounts_opted_in,
          totalVoteCount: result.total_vote_count,
          voteDatesFinal: result.vote_dates_final,
          voteEndDateUnix: result.vote_end_date_unix,
          voteStartDateUnix: result.vote_start_date_unix,
        }
      },
      /**
       * Get the current value of the choice1_vote_count key in global state
       */
      choice1VoteCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("choice1VoteCount")) as bigint | undefined },
      /**
       * Get the current value of the choice2_vote_count key in global state
       */
      choice2VoteCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("choice2VoteCount")) as bigint | undefined },
      /**
       * Get the current value of the choice3_vote_count key in global state
       */
      choice3VoteCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("choice3VoteCount")) as bigint | undefined },
      /**
       * Get the current value of the total_accounts_opted_in key in global state
       */
      totalAccountsOptedIn: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalAccountsOptedIn")) as bigint | undefined },
      /**
       * Get the current value of the total_vote_count key in global state
       */
      totalVoteCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalVoteCount")) as bigint | undefined },
      /**
       * Get the current value of the vote_dates_final key in global state
       */
      voteDatesFinal: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voteDatesFinal")) as bigint | undefined },
      /**
       * Get the current value of the vote_end_date_unix key in global state
       */
      voteEndDateUnix: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voteEndDateUnix")) as bigint | undefined },
      /**
       * Get the current value of the vote_start_date_unix key in global state
       */
      voteStartDateUnix: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("voteStartDateUnix")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current OpenBallot app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            localVoteChoice: result.local_vote_choice,
            localVoteStatus: result.local_vote_status,
          }
        },
        /**
         * Get the current value of the local_vote_choice key in local state
         */
        localVoteChoice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("localVoteChoice")) as bigint | undefined },
        /**
         * Get the current value of the local_vote_status key in local state
         */
        localVoteStatus: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("localVoteStatus")) as bigint | undefined },
      }
    },
  }

  public newGroup(): OpenBallotComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a global_storage_mbr(pay)void method call against the OpenBallot contract
       */
      globalStorageMbr(params: CallParams<OpenBallotArgs['obj']['global_storage_mbr(pay)void'] | OpenBallotArgs['tuple']['global_storage_mbr(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.globalStorageMbr(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_vote_dates(string,uint64,string,uint64)void method call against the OpenBallot contract
       */
      setVoteDates(params: CallParams<OpenBallotArgs['obj']['set_vote_dates(string,uint64,string,uint64)void'] | OpenBallotArgs['tuple']['set_vote_dates(string,uint64,string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setVoteDates(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a submit_vote(account,uint64)void method call against the OpenBallot contract
       */
      submitVote(params: CallParams<OpenBallotArgs['obj']['submit_vote(account,uint64)void'] | OpenBallotArgs['tuple']['submit_vote(account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitVote(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          terminate: (params: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.terminate(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get optIn() {
        return {
          localStorageMbr: (params: CallParams<OpenBallotArgs['obj']['local_storage_mbr(account,pay)void'] | OpenBallotArgs['tuple']['local_storage_mbr(account,pay)void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.localStorageMbr(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get closeOut() {
        return {
          optOut: (params: CallParams<OpenBallotArgs['obj']['opt_out(account)void'] | OpenBallotArgs['tuple']['opt_out(account)void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.closeOut.optOut(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the OpenBallot contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as OpenBallotComposer
  }
}
export type OpenBallotComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the global_storage_mbr(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  globalStorageMbr(params?: CallParams<OpenBallotArgs['obj']['global_storage_mbr(pay)void'] | OpenBallotArgs['tuple']['global_storage_mbr(pay)void']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['global_storage_mbr(pay)void'] | undefined]>

  /**
   * Calls the set_vote_dates(string,uint64,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVoteDates(params?: CallParams<OpenBallotArgs['obj']['set_vote_dates(string,uint64,string,uint64)void'] | OpenBallotArgs['tuple']['set_vote_dates(string,uint64,string,uint64)void']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['set_vote_dates(string,uint64,string,uint64)void'] | undefined]>

  /**
   * Calls the submit_vote(account,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitVote(params?: CallParams<OpenBallotArgs['obj']['submit_vote(account,uint64)void'] | OpenBallotArgs['tuple']['submit_vote(account,uint64)void']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['submit_vote(account,uint64)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the OpenBallot smart contract using the terminate()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    terminate(params?: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['terminate()void'] | undefined]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the OpenBallot smart contract using the local_storage_mbr(account,pay)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    localStorageMbr(params?: CallParams<OpenBallotArgs['obj']['local_storage_mbr(account,pay)void'] | OpenBallotArgs['tuple']['local_storage_mbr(account,pay)void']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['local_storage_mbr(account,pay)void'] | undefined]>
  }

  /**
   * Gets available closeOut methods
   */
  readonly closeOut: {
    /**
     * Makes a close out call to an existing instance of the OpenBallot smart contract using the opt_out(account)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optOut(params?: CallParams<OpenBallotArgs['obj']['opt_out(account)void'] | OpenBallotArgs['tuple']['opt_out(account)void']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['opt_out(account)void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the OpenBallot smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): OpenBallotComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): OpenBallotComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<OpenBallotComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<OpenBallotComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<OpenBallotComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<OpenBallotComposerResults<TReturns>>
}
export type OpenBallotComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

