/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"OpenBallot","structs":{},"methods":[{"name":"generate","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"get_version_unix","args":[],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"set_poll","args":[{"name":"title","type":"byte[]"},{"name":"choice1","type":"byte[]"},{"name":"choice2","type":"byte[]"},{"name":"choice3","type":"byte[]"},{"name":"start_date_unix","type":"uint64"},{"name":"end_date_unix","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"fund_app_mbr","args":[{"name":"mbr_pay","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"request_box_storage","args":[{"name":"mbr_pay","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"submit_vote","args":[{"name":"choice","type":"uint8"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"delete_box_storage","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"purge_box_storage","args":[{"name":"box_keys","type":"address[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"terminate","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}}],"state":{"schema":{"global":{"ints":7,"bytes":4},"local":{"ints":0,"bytes":0}},"keys":{"global":{"poll_choice1":{"key":"cG9sbF9jaG9pY2Ux","keyType":"AVMString","valueType":"AVMBytes"},"poll_choice2":{"key":"cG9sbF9jaG9pY2Uy","keyType":"AVMString","valueType":"AVMBytes"},"poll_choice3":{"key":"cG9sbF9jaG9pY2Uz","keyType":"AVMString","valueType":"AVMBytes"},"poll_end_date_unix":{"key":"cG9sbF9lbmRfZGF0ZV91bml4","keyType":"AVMString","valueType":"AVMUint64"},"poll_finalized":{"key":"cG9sbF9maW5hbGl6ZWQ=","keyType":"AVMString","valueType":"AVMUint64"},"poll_start_date_unix":{"key":"cG9sbF9zdGFydF9kYXRlX3VuaXg=","keyType":"AVMString","valueType":"AVMUint64"},"poll_title":{"key":"cG9sbF90aXRsZQ==","keyType":"AVMString","valueType":"AVMBytes"},"total_choice1":{"key":"dG90YWxfY2hvaWNlMQ==","keyType":"AVMString","valueType":"AVMUint64"},"total_choice2":{"key":"dG90YWxfY2hvaWNlMg==","keyType":"AVMString","valueType":"AVMUint64"},"total_choice3":{"key":"dG90YWxfY2hvaWNlMw==","keyType":"AVMString","valueType":"AVMUint64"},"total_purged_box_a_":{"key":"dG90YWxfcHVyZ2VkX2JveF9hXw==","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the OpenBallot contract
 */
export type OpenBallotArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'generate()void': Record<string, never>
    'get_version_unix()uint64': Record<string, never>
    'set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void': {
      title: Uint8Array
      choice1: Uint8Array
      choice2: Uint8Array
      choice3: Uint8Array
      startDateUnix: bigint | number
      endDateUnix: bigint | number
    }
    'fund_app_mbr(pay)void': {
      mbrPay: AppMethodCallTransactionArgument
    }
    'request_box_storage(pay)void': {
      mbrPay: AppMethodCallTransactionArgument
    }
    'submit_vote(uint8)void': {
      choice: bigint | number
    }
    'delete_box_storage()void': Record<string, never>
    'purge_box_storage(address[])void': {
      boxKeys: string[]
    }
    'terminate()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'generate()void': []
    'get_version_unix()uint64': []
    'set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void': [title: Uint8Array, choice1: Uint8Array, choice2: Uint8Array, choice3: Uint8Array, startDateUnix: bigint | number, endDateUnix: bigint | number]
    'fund_app_mbr(pay)void': [mbrPay: AppMethodCallTransactionArgument]
    'request_box_storage(pay)void': [mbrPay: AppMethodCallTransactionArgument]
    'submit_vote(uint8)void': [choice: bigint | number]
    'delete_box_storage()void': []
    'purge_box_storage(address[])void': [boxKeys: string[]]
    'terminate()void': []
  }
}

/**
 * The return type for each method
 */
export type OpenBallotReturns = {
  'generate()void': void
  'get_version_unix()uint64': bigint
  'set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void': void
  'fund_app_mbr(pay)void': void
  'request_box_storage(pay)void': void
  'submit_vote(uint8)void': void
  'delete_box_storage()void': void
  'purge_box_storage(address[])void': void
  'terminate()void': void
}

/**
 * Defines the types of available calls and state of the OpenBallot smart contract.
 */
export type OpenBallotTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'generate()void' | 'generate', {
      argsObj: OpenBallotArgs['obj']['generate()void']
      argsTuple: OpenBallotArgs['tuple']['generate()void']
      returns: OpenBallotReturns['generate()void']
    }>
    & Record<'get_version_unix()uint64' | 'get_version_unix', {
      argsObj: OpenBallotArgs['obj']['get_version_unix()uint64']
      argsTuple: OpenBallotArgs['tuple']['get_version_unix()uint64']
      returns: OpenBallotReturns['get_version_unix()uint64']
    }>
    & Record<'set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void' | 'set_poll', {
      argsObj: OpenBallotArgs['obj']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void']
      argsTuple: OpenBallotArgs['tuple']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void']
      returns: OpenBallotReturns['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void']
    }>
    & Record<'fund_app_mbr(pay)void' | 'fund_app_mbr', {
      argsObj: OpenBallotArgs['obj']['fund_app_mbr(pay)void']
      argsTuple: OpenBallotArgs['tuple']['fund_app_mbr(pay)void']
      returns: OpenBallotReturns['fund_app_mbr(pay)void']
    }>
    & Record<'request_box_storage(pay)void' | 'request_box_storage', {
      argsObj: OpenBallotArgs['obj']['request_box_storage(pay)void']
      argsTuple: OpenBallotArgs['tuple']['request_box_storage(pay)void']
      returns: OpenBallotReturns['request_box_storage(pay)void']
    }>
    & Record<'submit_vote(uint8)void' | 'submit_vote', {
      argsObj: OpenBallotArgs['obj']['submit_vote(uint8)void']
      argsTuple: OpenBallotArgs['tuple']['submit_vote(uint8)void']
      returns: OpenBallotReturns['submit_vote(uint8)void']
    }>
    & Record<'delete_box_storage()void' | 'delete_box_storage', {
      argsObj: OpenBallotArgs['obj']['delete_box_storage()void']
      argsTuple: OpenBallotArgs['tuple']['delete_box_storage()void']
      returns: OpenBallotReturns['delete_box_storage()void']
    }>
    & Record<'purge_box_storage(address[])void' | 'purge_box_storage', {
      argsObj: OpenBallotArgs['obj']['purge_box_storage(address[])void']
      argsTuple: OpenBallotArgs['tuple']['purge_box_storage(address[])void']
      returns: OpenBallotReturns['purge_box_storage(address[])void']
    }>
    & Record<'terminate()void' | 'terminate', {
      argsObj: OpenBallotArgs['obj']['terminate()void']
      argsTuple: OpenBallotArgs['tuple']['terminate()void']
      returns: OpenBallotReturns['terminate()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        pollChoice1: BinaryState
        pollChoice2: BinaryState
        pollChoice3: BinaryState
        pollEndDateUnix: bigint
        pollFinalized: bigint
        pollStartDateUnix: bigint
        pollTitle: BinaryState
        totalChoice1: bigint
        totalChoice2: bigint
        totalChoice3: bigint
        totalPurgedBoxA: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type OpenBallotSignatures = keyof OpenBallotTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OpenBallotNonVoidMethodSignatures = keyof OpenBallotTypes['methods'] extends infer T ? T extends keyof OpenBallotTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the OpenBallot smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OpenBallotSignatures> = OpenBallotTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the OpenBallot smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OpenBallotSignatures> = OpenBallotTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OpenBallotTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type OpenBallotCreateCallParams =
  | Expand<CallParams<OpenBallotArgs['obj']['generate()void'] | OpenBallotArgs['tuple']['generate()void']> & {method: 'generate'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<OpenBallotArgs['obj']['generate()void'] | OpenBallotArgs['tuple']['generate()void']> & {method: 'generate()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type OpenBallotDeleteCallParams =
  | Expand<CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']> & {method: 'terminate'}>
  | Expand<CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']> & {method: 'terminate()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type OpenBallotDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: OpenBallotCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: OpenBallotDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the OpenBallot smart contract
 */
export abstract class OpenBallotParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends OpenBallotCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'generate':
          case 'generate()void':
            return OpenBallotParamsFactory.create.generate(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the OpenBallot smart contract using the generate()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      generate(params: CallParams<OpenBallotArgs['obj']['generate()void'] | OpenBallotArgs['tuple']['generate()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'generate()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends OpenBallotDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'terminate':
          case 'terminate()void':
            return OpenBallotParamsFactory.delete.terminate(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the OpenBallot smart contract using the terminate()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      terminate(params: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'terminate()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the get_version_unix()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVersionUnix(params: CallParams<OpenBallotArgs['obj']['get_version_unix()uint64'] | OpenBallotArgs['tuple']['get_version_unix()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_version_unix()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setPoll(params: CallParams<OpenBallotArgs['obj']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void'] | OpenBallotArgs['tuple']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.title, params.args.choice1, params.args.choice2, params.args.choice3, params.args.startDateUnix, params.args.endDateUnix],
    }
  }
  /**
   * Constructs a no op call for the fund_app_mbr(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fundAppMbr(params: CallParams<OpenBallotArgs['obj']['fund_app_mbr(pay)void'] | OpenBallotArgs['tuple']['fund_app_mbr(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fund_app_mbr(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the request_box_storage(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static requestBoxStorage(params: CallParams<OpenBallotArgs['obj']['request_box_storage(pay)void'] | OpenBallotArgs['tuple']['request_box_storage(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'request_box_storage(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the submit_vote(uint8)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitVote(params: CallParams<OpenBallotArgs['obj']['submit_vote(uint8)void'] | OpenBallotArgs['tuple']['submit_vote(uint8)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submit_vote(uint8)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.choice],
    }
  }
  /**
   * Constructs a no op call for the delete_box_storage()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteBoxStorage(params: CallParams<OpenBallotArgs['obj']['delete_box_storage()void'] | OpenBallotArgs['tuple']['delete_box_storage()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delete_box_storage()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the purge_box_storage(address[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static purgeBoxStorage(params: CallParams<OpenBallotArgs['obj']['purge_box_storage(address[])void'] | OpenBallotArgs['tuple']['purge_box_storage(address[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'purge_box_storage(address[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.boxKeys],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the OpenBallot smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class OpenBallotFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `OpenBallotFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new OpenBallotClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new OpenBallotClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the OpenBallot smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: OpenBallotDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? OpenBallotParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (OpenBallotCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? OpenBallotParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (OpenBallotDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new OpenBallotClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OpenBallot smart contract using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      generate: (params: CallParams<OpenBallotArgs['obj']['generate()void'] | OpenBallotArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(OpenBallotParamsFactory.create.generate(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the OpenBallot smart contract using the terminate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      terminate: (params: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(OpenBallotParamsFactory.delete.terminate(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OpenBallot smart contract using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      generate: (params: CallParams<OpenBallotArgs['obj']['generate()void'] | OpenBallotArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(OpenBallotParamsFactory.create.generate(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OpenBallot smart contract using an ABI method call using the generate()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      generate: async (params: CallParams<OpenBallotArgs['obj']['generate()void'] | OpenBallotArgs['tuple']['generate()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(OpenBallotParamsFactory.create.generate(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | OpenBallotReturns['generate()void']) }, appClient: new OpenBallotClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the OpenBallot smart contract
 */
export class OpenBallotClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `OpenBallotClient`
   *
   * @param appClient An `AppClient` instance which has been created with the OpenBallot app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `OpenBallotClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends OpenBallotNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `OpenBallotClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OpenBallotClient> {
    return new OpenBallotClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `OpenBallotClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<OpenBallotClient> {
    return new OpenBallotClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OpenBallot smart contract using the `terminate()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      terminate: (params: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']> = {args: []}) => {
        return this.appClient.params.delete(OpenBallotParamsFactory.delete.terminate(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OpenBallot smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `get_version_unix()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVersionUnix: (params: CallParams<OpenBallotArgs['obj']['get_version_unix()uint64'] | OpenBallotArgs['tuple']['get_version_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OpenBallotParamsFactory.getVersionUnix(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setPoll: (params: CallParams<OpenBallotArgs['obj']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void'] | OpenBallotArgs['tuple']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OpenBallotParamsFactory.setPoll(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `fund_app_mbr(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fundAppMbr: (params: CallParams<OpenBallotArgs['obj']['fund_app_mbr(pay)void'] | OpenBallotArgs['tuple']['fund_app_mbr(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OpenBallotParamsFactory.fundAppMbr(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `request_box_storage(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    requestBoxStorage: (params: CallParams<OpenBallotArgs['obj']['request_box_storage(pay)void'] | OpenBallotArgs['tuple']['request_box_storage(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OpenBallotParamsFactory.requestBoxStorage(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `submit_vote(uint8)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitVote: (params: CallParams<OpenBallotArgs['obj']['submit_vote(uint8)void'] | OpenBallotArgs['tuple']['submit_vote(uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OpenBallotParamsFactory.submitVote(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `delete_box_storage()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteBoxStorage: (params: CallParams<OpenBallotArgs['obj']['delete_box_storage()void'] | OpenBallotArgs['tuple']['delete_box_storage()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OpenBallotParamsFactory.deleteBoxStorage(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `purge_box_storage(address[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    purgeBoxStorage: (params: CallParams<OpenBallotArgs['obj']['purge_box_storage(address[])void'] | OpenBallotArgs['tuple']['purge_box_storage(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OpenBallotParamsFactory.purgeBoxStorage(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OpenBallot smart contract using the `terminate()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      terminate: (params: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(OpenBallotParamsFactory.delete.terminate(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OpenBallot smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `get_version_unix()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVersionUnix: (params: CallParams<OpenBallotArgs['obj']['get_version_unix()uint64'] | OpenBallotArgs['tuple']['get_version_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OpenBallotParamsFactory.getVersionUnix(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setPoll: (params: CallParams<OpenBallotArgs['obj']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void'] | OpenBallotArgs['tuple']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OpenBallotParamsFactory.setPoll(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `fund_app_mbr(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fundAppMbr: (params: CallParams<OpenBallotArgs['obj']['fund_app_mbr(pay)void'] | OpenBallotArgs['tuple']['fund_app_mbr(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OpenBallotParamsFactory.fundAppMbr(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `request_box_storage(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    requestBoxStorage: (params: CallParams<OpenBallotArgs['obj']['request_box_storage(pay)void'] | OpenBallotArgs['tuple']['request_box_storage(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OpenBallotParamsFactory.requestBoxStorage(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `submit_vote(uint8)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitVote: (params: CallParams<OpenBallotArgs['obj']['submit_vote(uint8)void'] | OpenBallotArgs['tuple']['submit_vote(uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OpenBallotParamsFactory.submitVote(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `delete_box_storage()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteBoxStorage: (params: CallParams<OpenBallotArgs['obj']['delete_box_storage()void'] | OpenBallotArgs['tuple']['delete_box_storage()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OpenBallotParamsFactory.deleteBoxStorage(params))
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `purge_box_storage(address[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    purgeBoxStorage: (params: CallParams<OpenBallotArgs['obj']['purge_box_storage(address[])void'] | OpenBallotArgs['tuple']['purge_box_storage(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OpenBallotParamsFactory.purgeBoxStorage(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OpenBallot smart contract using the `terminate()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      terminate: async (params: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(OpenBallotParamsFactory.delete.terminate(params))
        return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['terminate()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OpenBallot smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `get_version_unix()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVersionUnix: async (params: CallParams<OpenBallotArgs['obj']['get_version_unix()uint64'] | OpenBallotArgs['tuple']['get_version_unix()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OpenBallotParamsFactory.getVersionUnix(params))
      return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['get_version_unix()uint64'])}
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setPoll: async (params: CallParams<OpenBallotArgs['obj']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void'] | OpenBallotArgs['tuple']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OpenBallotParamsFactory.setPoll(params))
      return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void'])}
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `fund_app_mbr(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fundAppMbr: async (params: CallParams<OpenBallotArgs['obj']['fund_app_mbr(pay)void'] | OpenBallotArgs['tuple']['fund_app_mbr(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OpenBallotParamsFactory.fundAppMbr(params))
      return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['fund_app_mbr(pay)void'])}
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `request_box_storage(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    requestBoxStorage: async (params: CallParams<OpenBallotArgs['obj']['request_box_storage(pay)void'] | OpenBallotArgs['tuple']['request_box_storage(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OpenBallotParamsFactory.requestBoxStorage(params))
      return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['request_box_storage(pay)void'])}
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `submit_vote(uint8)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitVote: async (params: CallParams<OpenBallotArgs['obj']['submit_vote(uint8)void'] | OpenBallotArgs['tuple']['submit_vote(uint8)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OpenBallotParamsFactory.submitVote(params))
      return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['submit_vote(uint8)void'])}
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `delete_box_storage()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteBoxStorage: async (params: CallParams<OpenBallotArgs['obj']['delete_box_storage()void'] | OpenBallotArgs['tuple']['delete_box_storage()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OpenBallotParamsFactory.deleteBoxStorage(params))
      return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['delete_box_storage()void'])}
    },

    /**
     * Makes a call to the OpenBallot smart contract using the `purge_box_storage(address[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    purgeBoxStorage: async (params: CallParams<OpenBallotArgs['obj']['purge_box_storage(address[])void'] | OpenBallotArgs['tuple']['purge_box_storage(address[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OpenBallotParamsFactory.purgeBoxStorage(params))
      return {...result, return: result.return as unknown as (undefined | OpenBallotReturns['purge_box_storage(address[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new OpenBallotClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current OpenBallot app
   */
  state = {
    /**
     * Methods to access global state for the current OpenBallot app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          pollChoice1: new BinaryStateValue(result.poll_choice1),
          pollChoice2: new BinaryStateValue(result.poll_choice2),
          pollChoice3: new BinaryStateValue(result.poll_choice3),
          pollEndDateUnix: result.poll_end_date_unix,
          pollFinalized: result.poll_finalized,
          pollStartDateUnix: result.poll_start_date_unix,
          pollTitle: new BinaryStateValue(result.poll_title),
          totalChoice1: result.total_choice1,
          totalChoice2: result.total_choice2,
          totalChoice3: result.total_choice3,
          totalPurgedBoxA: result.total_purged_box_a_,
        }
      },
      /**
       * Get the current value of the poll_choice1 key in global state
       */
      pollChoice1: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("pollChoice1")) as Uint8Array | undefined) },
      /**
       * Get the current value of the poll_choice2 key in global state
       */
      pollChoice2: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("pollChoice2")) as Uint8Array | undefined) },
      /**
       * Get the current value of the poll_choice3 key in global state
       */
      pollChoice3: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("pollChoice3")) as Uint8Array | undefined) },
      /**
       * Get the current value of the poll_end_date_unix key in global state
       */
      pollEndDateUnix: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("pollEndDateUnix")) as bigint | undefined },
      /**
       * Get the current value of the poll_finalized key in global state
       */
      pollFinalized: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("pollFinalized")) as bigint | undefined },
      /**
       * Get the current value of the poll_start_date_unix key in global state
       */
      pollStartDateUnix: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("pollStartDateUnix")) as bigint | undefined },
      /**
       * Get the current value of the poll_title key in global state
       */
      pollTitle: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("pollTitle")) as Uint8Array | undefined) },
      /**
       * Get the current value of the total_choice1 key in global state
       */
      totalChoice1: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalChoice1")) as bigint | undefined },
      /**
       * Get the current value of the total_choice2 key in global state
       */
      totalChoice2: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalChoice2")) as bigint | undefined },
      /**
       * Get the current value of the total_choice3 key in global state
       */
      totalChoice3: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalChoice3")) as bigint | undefined },
      /**
       * Get the current value of the total_purged_box_a_ key in global state
       */
      totalPurgedBoxA: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalPurgedBoxA")) as bigint | undefined },
    },
  }

  public newGroup(): OpenBallotComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a get_version_unix()uint64 method call against the OpenBallot contract
       */
      getVersionUnix(params: CallParams<OpenBallotArgs['obj']['get_version_unix()uint64'] | OpenBallotArgs['tuple']['get_version_unix()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVersionUnix(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_version_unix()uint64', v))
        return this
      },
      /**
       * Add a set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void method call against the OpenBallot contract
       */
      setPoll(params: CallParams<OpenBallotArgs['obj']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void'] | OpenBallotArgs['tuple']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setPoll(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a fund_app_mbr(pay)void method call against the OpenBallot contract
       */
      fundAppMbr(params: CallParams<OpenBallotArgs['obj']['fund_app_mbr(pay)void'] | OpenBallotArgs['tuple']['fund_app_mbr(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fundAppMbr(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a request_box_storage(pay)void method call against the OpenBallot contract
       */
      requestBoxStorage(params: CallParams<OpenBallotArgs['obj']['request_box_storage(pay)void'] | OpenBallotArgs['tuple']['request_box_storage(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.requestBoxStorage(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a submit_vote(uint8)void method call against the OpenBallot contract
       */
      submitVote(params: CallParams<OpenBallotArgs['obj']['submit_vote(uint8)void'] | OpenBallotArgs['tuple']['submit_vote(uint8)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitVote(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a delete_box_storage()void method call against the OpenBallot contract
       */
      deleteBoxStorage(params: CallParams<OpenBallotArgs['obj']['delete_box_storage()void'] | OpenBallotArgs['tuple']['delete_box_storage()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteBoxStorage(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a purge_box_storage(address[])void method call against the OpenBallot contract
       */
      purgeBoxStorage(params: CallParams<OpenBallotArgs['obj']['purge_box_storage(address[])void'] | OpenBallotArgs['tuple']['purge_box_storage(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.purgeBoxStorage(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          terminate: (params: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.terminate(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the OpenBallot contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as OpenBallotComposer
  }
}
export type OpenBallotComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_version_unix()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVersionUnix(params?: CallParams<OpenBallotArgs['obj']['get_version_unix()uint64'] | OpenBallotArgs['tuple']['get_version_unix()uint64']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['get_version_unix()uint64'] | undefined]>

  /**
   * Calls the set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPoll(params?: CallParams<OpenBallotArgs['obj']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void'] | OpenBallotArgs['tuple']['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['set_poll(byte[],byte[],byte[],byte[],uint64,uint64)void'] | undefined]>

  /**
   * Calls the fund_app_mbr(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundAppMbr(params?: CallParams<OpenBallotArgs['obj']['fund_app_mbr(pay)void'] | OpenBallotArgs['tuple']['fund_app_mbr(pay)void']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['fund_app_mbr(pay)void'] | undefined]>

  /**
   * Calls the request_box_storage(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  requestBoxStorage(params?: CallParams<OpenBallotArgs['obj']['request_box_storage(pay)void'] | OpenBallotArgs['tuple']['request_box_storage(pay)void']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['request_box_storage(pay)void'] | undefined]>

  /**
   * Calls the submit_vote(uint8)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitVote(params?: CallParams<OpenBallotArgs['obj']['submit_vote(uint8)void'] | OpenBallotArgs['tuple']['submit_vote(uint8)void']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['submit_vote(uint8)void'] | undefined]>

  /**
   * Calls the delete_box_storage()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteBoxStorage(params?: CallParams<OpenBallotArgs['obj']['delete_box_storage()void'] | OpenBallotArgs['tuple']['delete_box_storage()void']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['delete_box_storage()void'] | undefined]>

  /**
   * Calls the purge_box_storage(address[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purgeBoxStorage(params?: CallParams<OpenBallotArgs['obj']['purge_box_storage(address[])void'] | OpenBallotArgs['tuple']['purge_box_storage(address[])void']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['purge_box_storage(address[])void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the OpenBallot smart contract using the terminate()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    terminate(params?: CallParams<OpenBallotArgs['obj']['terminate()void'] | OpenBallotArgs['tuple']['terminate()void']>): OpenBallotComposer<[...TReturns, OpenBallotReturns['terminate()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the OpenBallot smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): OpenBallotComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): OpenBallotComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<OpenBallotComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<OpenBallotComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<OpenBallotComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<OpenBallotComposerResults<TReturns>>
}
export type OpenBallotComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

